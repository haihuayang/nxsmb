/* ndr parser auto-generated by pidl */
	
#include "include/librpc/dcerpc.hxx"

namespace idl {

x_ndr_off_t dcerpc_ctx_list::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SCALARS(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(uint8(get_size(transfer_syntaxes)), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(abstract_syntax, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(transfer_syntaxes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_ctx_list::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SCALARS(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint8 num_transfer_syntaxes;
	X_NDR_SCALARS(num_transfer_syntaxes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(abstract_syntax, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	transfer_syntaxes.resize(num_transfer_syntaxes);
	X_NDR_SCALARS(transfer_syntaxes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_ctx_list::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(context_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(abstract_syntax, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(transfer_syntaxes, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


x_ndr_off_t dcerpc_bind::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SCALARS(max_xmit_frag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_recv_frag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(assoc_group_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(uint8(get_size(ctx_list)), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ctx_list, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_bind::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SCALARS(max_xmit_frag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_recv_frag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(assoc_group_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint8 num_contexts;
	X_NDR_SCALARS(num_contexts, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	ctx_list.resize(num_contexts);
	X_NDR_SCALARS(ctx_list, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_bind::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(max_xmit_frag, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(max_recv_frag, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(assoc_group_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ctx_list, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_info, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


x_ndr_off_t dcerpc_empty::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	return __bpos;
}


x_ndr_off_t dcerpc_empty::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	return __bpos;
}

void dcerpc_empty::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_object::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LIBNDR_FLAG_OBJECT_PRESENT: {
			X_NDR_SCALARS(object, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(empty, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t dcerpc_object::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LIBNDR_FLAG_OBJECT_PRESENT: {
			X_NDR_SCALARS(object, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(empty, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void dcerpc_object::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case LIBNDR_FLAG_OBJECT_PRESENT: {
			X_NDR_OSTR(object, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_OSTR(empty, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t dcerpc_request::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SCALARS(alloc_hint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(opnum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(object, __ndr, __bpos, __epos, __flags, __level);
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(stub_and_verifier, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_request::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SCALARS(alloc_hint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(opnum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(object, __ndr, __bpos, __epos, __flags, __level);
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(stub_and_verifier, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_request::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(alloc_hint, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(context_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(opnum, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(object, __ndr, __flags, __level);
	X_NDR_OSTR_NEXT(stub_and_verifier, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 4> x_ndr_traits_t<dcerpc_bind_ack_result>::value_name_map = { {
	{ DCERPC_BIND_ACK_RESULT_ACCEPTANCE, "DCERPC_BIND_ACK_RESULT_ACCEPTANCE" },
	{ DCERPC_BIND_ACK_RESULT_USER_REJECTION, "DCERPC_BIND_ACK_RESULT_USER_REJECTION" },
	{ DCERPC_BIND_ACK_RESULT_PROVIDER_REJECTION, "DCERPC_BIND_ACK_RESULT_PROVIDER_REJECTION" },
	{ DCERPC_BIND_ACK_RESULT_NEGOTIATE_ACK, "DCERPC_BIND_ACK_RESULT_NEGOTIATE_ACK" },
} };


const std::array<std::pair<uint16, const char *>, 4> x_ndr_traits_t<dcerpc_bind_ack_reason_values>::value_name_map = { {
	{ DCERPC_BIND_ACK_REASON_NOT_SPECIFIED, "DCERPC_BIND_ACK_REASON_NOT_SPECIFIED" },
	{ DCERPC_BIND_ACK_REASON_ABSTRACT_SYNTAX_NOT_SUPPORTED, "DCERPC_BIND_ACK_REASON_ABSTRACT_SYNTAX_NOT_SUPPORTED" },
	{ DCERPC_BIND_ACK_REASON_TRANSFER_SYNTAXES_NOT_SUPPORTED, "DCERPC_BIND_ACK_REASON_TRANSFER_SYNTAXES_NOT_SUPPORTED" },
	{ DCERPC_BIND_ACK_REASON_LOCAL_LIMIT_EXCEEDED, "DCERPC_BIND_ACK_REASON_LOCAL_LIMIT_EXCEEDED" },
} };


const std::array<std::pair<uint16, const char *>, 2> x_ndr_traits_t<dcerpc_bind_time_features>::value_name_map = { {
		{ DCERPC_BIND_TIME_SECURITY_CONTEXT_MULTIPLEXING, "DCERPC_BIND_TIME_SECURITY_CONTEXT_MULTIPLEXING" },
		{ DCERPC_BIND_TIME_KEEP_CONNECTION_ON_ORPHAN, "DCERPC_BIND_TIME_KEEP_CONNECTION_ON_ORPHAN" },
} };

x_ndr_off_t dcerpc_bind_ack_reason::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(2, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case DCERPC_BIND_ACK_RESULT_NEGOTIATE_ACK: {
			X_NDR_SCALARS(negotiate, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(value, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t dcerpc_bind_ack_reason::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(2, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case DCERPC_BIND_ACK_RESULT_NEGOTIATE_ACK: {
			X_NDR_SCALARS(negotiate, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(value, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void dcerpc_bind_ack_reason::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case DCERPC_BIND_ACK_RESULT_NEGOTIATE_ACK: {
			X_NDR_OSTR(negotiate, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_OSTR(value, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t dcerpc_ack_ctx::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SCALARS(result, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reason, __ndr, __bpos, __epos, __flags, result);
	X_NDR_SCALARS(syntax, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_ack_ctx::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SCALARS(result, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reason, __ndr, __bpos, __epos, __flags, result);
	X_NDR_SCALARS(syntax, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_ack_ctx::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(result, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(reason, __ndr, __flags, result);
	X_NDR_OSTR_NEXT(syntax, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_bind_ack::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(max_xmit_frag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_recv_frag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(assoc_group_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(uint16_t(secondary_address.size() + 1), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(x_ndr_string_with_null_const_t(secondary_address),
			__ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(uint8(get_size(ctx_list)), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ctx_list, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t dcerpc_bind_ack::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(max_xmit_frag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_recv_frag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(assoc_group_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16_t secondary_address_size;
	X_NDR_SCALARS(secondary_address_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_string_with_null_t tmp{secondary_address};
	X_NDR_SCALARS(tmp, // TODO allow const or tmp x_ndr_string_with_null_t(secondary_address),
			__ndr, __bpos, X_NDR_CHECK_POS(__bpos + secondary_address_size, __bpos, __epos),
			__flags, X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	uint8 num_results;
	X_NDR_SCALARS(num_results, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	ctx_list.resize(num_results);
	X_NDR_SCALARS(ctx_list, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_bind_ack::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(max_xmit_frag, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(max_recv_frag, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(assoc_group_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(secondary_address, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ctx_list, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_info, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}

#if 0
const std::array<std::pair<uint16, const char *>, 6> x_ndr_traits_t<dcerpc_bind_nak_reason>::value_name_map = { {
	{ DCERPC_BIND_NAK_REASON_NOT_SPECIFIED, "DCERPC_BIND_NAK_REASON_NOT_SPECIFIED" },
	{ DCERPC_BIND_NAK_REASON_TEMPORARY_CONGESTION, "DCERPC_BIND_NAK_REASON_TEMPORARY_CONGESTION" },
	{ DCERPC_BIND_NAK_REASON_LOCAL_LIMIT_EXCEEDED, "DCERPC_BIND_NAK_REASON_LOCAL_LIMIT_EXCEEDED" },
	{ DCERPC_BIND_NAK_REASON_PROTOCOL_VERSION_NOT_SUPPORTED, "DCERPC_BIND_NAK_REASON_PROTOCOL_VERSION_NOT_SUPPORTED" },
	{ DCERPC_BIND_NAK_REASON_INVALID_AUTH_TYPE, "DCERPC_BIND_NAK_REASON_INVALID_AUTH_TYPE" },
	{ DCERPC_BIND_NAK_REASON_INVALID_CHECKSUM, "DCERPC_BIND_NAK_REASON_INVALID_CHECKSUM" },
} };



x_ndr_off_t dcerpc_bind_nak_version::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(rpc_vers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(rpc_vers_minor, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_bind_nak_version::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(rpc_vers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(rpc_vers_minor, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_bind_nak_version::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(rpc_vers, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rpc_vers_minor, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_bind_nak::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(reject_reason, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(uint8(get_size(versions)), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(versions, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


void dcerpc_bind_nak::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(reject_reason, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(versions, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(_pad, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}
#endif



x_ndr_off_t dcerpc_response::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(alloc_hint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(cancel_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(_pad, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN8), X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(stub_and_verifier, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_response::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(alloc_hint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(cancel_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(_pad, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN8), X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(stub_and_verifier, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_response::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(alloc_hint, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(context_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(cancel_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(_pad, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN8), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(stub_and_verifier, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}

const std::array<std::pair<uint32, const char *>, 53> x_ndr_traits_t<dcerpc_nca_status>::value_name_map = { {
	{ DCERPC_NCA_S_COMM_FAILURE, "DCERPC_NCA_S_COMM_FAILURE" },
	{ DCERPC_NCA_S_OP_RNG_ERROR, "DCERPC_NCA_S_OP_RNG_ERROR" },
	{ DCERPC_NCA_S_UNKNOWN_IF, "DCERPC_NCA_S_UNKNOWN_IF" },
	{ DCERPC_NCA_S_WRONG_BOOT_TIME, "DCERPC_NCA_S_WRONG_BOOT_TIME" },
	{ DCERPC_NCA_S_YOU_CRASHED, "DCERPC_NCA_S_YOU_CRASHED" },
	{ DCERPC_NCA_S_PROTO_ERROR, "DCERPC_NCA_S_PROTO_ERROR" },
	{ DCERPC_NCA_S_OUT_ARGS_TOO_BIG, "DCERPC_NCA_S_OUT_ARGS_TOO_BIG" },
	{ DCERPC_NCA_S_SERVER_TOO_BUSY, "DCERPC_NCA_S_SERVER_TOO_BUSY" },
	{ DCERPC_NCA_S_FAULT_STRING_TOO_LARGE, "DCERPC_NCA_S_FAULT_STRING_TOO_LARGE" },
	{ DCERPC_NCA_S_UNSUPPORTED_TYPE, "DCERPC_NCA_S_UNSUPPORTED_TYPE" },
	{ DCERPC_NCA_S_FAULT_INT_DIV_BY_ZERO, "DCERPC_NCA_S_FAULT_INT_DIV_BY_ZERO" },
	{ DCERPC_NCA_S_FAULT_ADDR_ERROR, "DCERPC_NCA_S_FAULT_ADDR_ERROR" },
	{ DCERPC_NCA_S_FAULT_FP_DIV_BY_ZERO, "DCERPC_NCA_S_FAULT_FP_DIV_BY_ZERO" },
	{ DCERPC_NCA_S_FAULT_FP_UNDERFLOW, "DCERPC_NCA_S_FAULT_FP_UNDERFLOW" },
	{ DCERPC_NCA_S_FAULT_FP_OVERRFLOW, "DCERPC_NCA_S_FAULT_FP_OVERRFLOW" },
	{ DCERPC_NCA_S_FAULT_INVALID_TAG, "DCERPC_NCA_S_FAULT_INVALID_TAG" },
	{ DCERPC_NCA_S_FAULT_INVALID_BOUND, "DCERPC_NCA_S_FAULT_INVALID_BOUND" },
	{ DCERPC_NCA_S_FAULT_RPC_VERSION_MISMATCH, "DCERPC_NCA_S_FAULT_RPC_VERSION_MISMATCH" },
	{ DCERPC_NCA_S_FAULT_UNSPEC_REJECT, "DCERPC_NCA_S_FAULT_UNSPEC_REJECT" },
	{ DCERPC_NCA_S_FAULT_BAD_ACTID, "DCERPC_NCA_S_FAULT_BAD_ACTID" },
	{ DCERPC_NCA_S_FAULT_WHO_ARE_YOU_FAILED, "DCERPC_NCA_S_FAULT_WHO_ARE_YOU_FAILED" },
	{ DCERPC_NCA_S_FAULT_MANAGER_NOT_ENTERED, "DCERPC_NCA_S_FAULT_MANAGER_NOT_ENTERED" },
	{ DCERPC_NCA_S_FAULT_CANCEL, "DCERPC_NCA_S_FAULT_CANCEL" },
	{ DCERPC_NCA_S_FAULT_ILL_INST, "DCERPC_NCA_S_FAULT_ILL_INST" },
	{ DCERPC_NCA_S_FAULT_FP_ERROR, "DCERPC_NCA_S_FAULT_FP_ERROR" },
	{ DCERPC_NCA_S_FAULT_INT_OVERFLOW, "DCERPC_NCA_S_FAULT_INT_OVERFLOW" },
	{ DCERPC_NCA_S_UNUSED_1C000011, "DCERPC_NCA_S_UNUSED_1C000011" },
	{ DCERPC_NCA_S_FAULT_UNSPEC, "DCERPC_NCA_S_FAULT_UNSPEC" },
	{ DCERPC_NCA_S_FAULT_REMOTE_COMM_FAILURE, "DCERPC_NCA_S_FAULT_REMOTE_COMM_FAILURE" },
	{ DCERPC_NCA_S_FAULT_PIPE_EMPTY, "DCERPC_NCA_S_FAULT_PIPE_EMPTY" },
	{ DCERPC_NCA_S_FAULT_PIPE_CLOSED, "DCERPC_NCA_S_FAULT_PIPE_CLOSED" },
	{ DCERPC_NCA_S_FAULT_PIPE_ORDER, "DCERPC_NCA_S_FAULT_PIPE_ORDER" },
	{ DCERPC_NCA_S_FAULT_PIPE_DISCIPLINE, "DCERPC_NCA_S_FAULT_PIPE_DISCIPLINE" },
	{ DCERPC_NCA_S_FAULT_PIPE_COMM_ERROR, "DCERPC_NCA_S_FAULT_PIPE_COMM_ERROR" },
	{ DCERPC_NCA_S_FAULT_PIPE_MEMORY, "DCERPC_NCA_S_FAULT_PIPE_MEMORY" },
	{ DCERPC_NCA_S_FAULT_CONTEXT_MISMATCH, "DCERPC_NCA_S_FAULT_CONTEXT_MISMATCH" },
	{ DCERPC_NCA_S_FAULT_REMOTE_NO_MEMORY, "DCERPC_NCA_S_FAULT_REMOTE_NO_MEMORY" },
	{ DCERPC_NCA_S_INVALID_PRES_CONTEXT_ID, "DCERPC_NCA_S_INVALID_PRES_CONTEXT_ID" },
	{ DCERPC_NCA_S_UNSUPPORTED_AUTHN_LEVEL, "DCERPC_NCA_S_UNSUPPORTED_AUTHN_LEVEL" },
	{ DCERPC_NCA_S_UNUSED_1C00001E, "DCERPC_NCA_S_UNUSED_1C00001E" },
	{ DCERPC_NCA_S_INVALID_CHECKSUM, "DCERPC_NCA_S_INVALID_CHECKSUM" },
	{ DCERPC_NCA_S_INVALID_CRC, "DCERPC_NCA_S_INVALID_CRC" },
	{ DCERPC_NCA_S_FAULT_USER_DEFINED, "DCERPC_NCA_S_FAULT_USER_DEFINED" },
	{ DCERPC_NCA_S_FAULT_TX_OPEN_FAILED, "DCERPC_NCA_S_FAULT_TX_OPEN_FAILED" },
	{ DCERPC_NCA_S_FAULT_CODESET_CONV_ERROR, "DCERPC_NCA_S_FAULT_CODESET_CONV_ERROR" },
	{ DCERPC_NCA_S_FAULT_OBJECT_NOT_FOUND, "DCERPC_NCA_S_FAULT_OBJECT_NOT_FOUND" },
	{ DCERPC_NCA_S_FAULT_NO_CLIENT_STUB, "DCERPC_NCA_S_FAULT_NO_CLIENT_STUB" },
	{ DCERPC_FAULT_ACCESS_DENIED, "DCERPC_FAULT_ACCESS_DENIED" },
	{ DCERPC_FAULT_NO_CALL_ACTIVE, "DCERPC_FAULT_NO_CALL_ACTIVE" },
	{ DCERPC_FAULT_CANT_PERFORM, "DCERPC_FAULT_CANT_PERFORM" },
	{ DCERPC_FAULT_OUT_OF_RESOURCES, "DCERPC_FAULT_OUT_OF_RESOURCES" },
	{ DCERPC_FAULT_BAD_STUB_DATA, "DCERPC_FAULT_BAD_STUB_DATA" },
	{ DCERPC_FAULT_SEC_PKG_ERROR, "DCERPC_FAULT_SEC_PKG_ERROR" },
} };



x_ndr_off_t dcerpc_fault::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(alloc_hint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(cancel_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(_pad, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t dcerpc_fault::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(alloc_hint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(cancel_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(_pad, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_fault::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(alloc_hint, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(context_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(cancel_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(status, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(_pad, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}

#if 0
const std::array<std::pair<uint8, const char *>, 11> x_ndr_traits_t<dcerpc_AuthType>::value_name_map = { {
	{ DCERPC_AUTH_TYPE_NONE, "DCERPC_AUTH_TYPE_NONE" },
	{ DCERPC_AUTH_TYPE_KRB5_1, "DCERPC_AUTH_TYPE_KRB5_1" },
	{ DCERPC_AUTH_TYPE_SPNEGO, "DCERPC_AUTH_TYPE_SPNEGO" },
	{ DCERPC_AUTH_TYPE_NTLMSSP, "DCERPC_AUTH_TYPE_NTLMSSP" },
	{ DCERPC_AUTH_TYPE_KRB5, "DCERPC_AUTH_TYPE_KRB5" },
	{ DCERPC_AUTH_TYPE_DPA, "DCERPC_AUTH_TYPE_DPA" },
	{ DCERPC_AUTH_TYPE_MSN, "DCERPC_AUTH_TYPE_MSN" },
	{ DCERPC_AUTH_TYPE_DIGEST, "DCERPC_AUTH_TYPE_DIGEST" },
	{ DCERPC_AUTH_TYPE_SCHANNEL, "DCERPC_AUTH_TYPE_SCHANNEL" },
	{ DCERPC_AUTH_TYPE_MSMQ, "DCERPC_AUTH_TYPE_MSMQ" },
	{ DCERPC_AUTH_TYPE_NCALRPC_AS_SYSTEM, "DCERPC_AUTH_TYPE_NCALRPC_AS_SYSTEM" },
} };


const std::array<std::pair<uint8, const char *>, 6> x_ndr_traits_t<dcerpc_AuthLevel>::value_name_map = { {
	{ DCERPC_AUTH_LEVEL_NONE, "DCERPC_AUTH_LEVEL_NONE" },
	{ DCERPC_AUTH_LEVEL_CONNECT, "DCERPC_AUTH_LEVEL_CONNECT" },
	{ DCERPC_AUTH_LEVEL_CALL, "DCERPC_AUTH_LEVEL_CALL" },
	{ DCERPC_AUTH_LEVEL_PACKET, "DCERPC_AUTH_LEVEL_PACKET" },
	{ DCERPC_AUTH_LEVEL_INTEGRITY, "DCERPC_AUTH_LEVEL_INTEGRITY" },
	{ DCERPC_AUTH_LEVEL_PRIVACY, "DCERPC_AUTH_LEVEL_PRIVACY" },
} };



x_ndr_off_t dcerpc_auth::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(auth_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_level, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_pad_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(credentials, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_auth::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(auth_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_level, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_pad_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(credentials, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_auth::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(auth_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_level, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_pad_length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_reserved, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_context_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(credentials, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_auth3::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	uint32 _pad{0};
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_auth3::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	uint32 _pad;
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_auth3::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(auth_info, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_orphaned::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	uint32 _pad{0};
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_orphaned::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	uint32 _pad;
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_orphaned::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(auth_info, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_co_cancel::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	uint32 _pad{0};
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_co_cancel::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	uint32 _pad;
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_co_cancel::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(auth_info, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_cl_cancel::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_cl_cancel::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_cl_cancel::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(version, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(id, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_cancel_ack::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(server_is_accepting, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_cancel_ack::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(server_is_accepting, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_cancel_ack::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(version, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(server_is_accepting, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_fack::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(_pad1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(window_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(max_tdsu, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(max_frag_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(serial_no, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(uint16(get_size(selack)), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(selack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_fack::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(_pad1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(window_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(max_tdsu, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(max_frag_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(serial_no, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 selack_size;
	X_NDR_DATA(selack_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(selack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, selack_size);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_fack::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(version, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(_pad1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(window_size, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(max_tdsu, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(max_frag_size, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(serial_no, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(selack, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_ack::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_ack::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_ack::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_ping::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_ping::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_ping::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_shutdown::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_shutdown::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_shutdown::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_working::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_working::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_working::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	(__ndr) << leave;
}



x_ndr_off_t RTSCookie::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Cookie, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t RTSCookie::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Cookie, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void RTSCookie::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Cookie, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<AddressType>::value_name_map = { {
	{ RTS_IPV4, "RTS_IPV4" },
	{ RTS_IPV6, "RTS_IPV6" },
} };



x_ndr_off_t ClientAddressType::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case RTS_IPV4: {
			X_NDR_DATA(ClientAddressIPV4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case RTS_IPV6: {
			X_NDR_DATA(ClientAddressIPV6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t ClientAddressType::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case RTS_IPV4: {
			X_NDR_DATA(ClientAddressIPV4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case RTS_IPV6: {
			X_NDR_DATA(ClientAddressIPV6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void ClientAddressType::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case RTS_IPV4: {
			X_NDR_OSTR(ClientAddressIPV4, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case RTS_IPV6: {
			X_NDR_OSTR(ClientAddressIPV6, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t ClientAddress::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(AddressType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ClientAddress, __ndr, __bpos, __epos, __flags, AddressType);
	X_NDR_DATA(Padding, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t ClientAddress::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(AddressType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ClientAddress, __ndr, __bpos, __epos, __flags, AddressType);
	X_NDR_DATA(Padding, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void ClientAddress::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(AddressType, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ClientAddress, __ndr, __flags, AddressType);
	X_NDR_OSTR_NEXT(Padding, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 4> x_ndr_traits_t<ForwardDestination>::value_name_map = { {
	{ FDClient, "FDClient" },
	{ FDInProxy, "FDInProxy" },
	{ FDServer, "FDServer" },
	{ FDOutProxy, "FDOutProxy" },
} };



x_ndr_off_t FlowControlAcknowledgment::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(BytesReceived, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(AvailableWindow, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ChannelCookie, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t FlowControlAcknowledgment::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(BytesReceived, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(AvailableWindow, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ChannelCookie, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void FlowControlAcknowledgment::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(BytesReceived, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(AvailableWindow, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ChannelCookie, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_ReceiveWindowSize::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ReceiveWindowSize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_ReceiveWindowSize::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ReceiveWindowSize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_ReceiveWindowSize::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ReceiveWindowSize, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_FlowControlAck::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Ack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_FlowControlAck::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Ack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_FlowControlAck::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Ack, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_ConnectionTimeout::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ConnectionTimeout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_ConnectionTimeout::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ConnectionTimeout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_ConnectionTimeout::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ConnectionTimeout, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_Cookie::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Cookie, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_Cookie::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Cookie, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_Cookie::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Cookie, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_ChannelLifetime::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ChannelLifetime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_ChannelLifetime::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ChannelLifetime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_ChannelLifetime::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ChannelLifetime, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_ClientKeepalive::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ClientKeepalive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_ClientKeepalive::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ClientKeepalive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_ClientKeepalive::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ClientKeepalive, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_Version::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_Version::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_Version::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Version, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_Empty::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_Empty::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_Empty::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_Padding::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_CHECK_RANGE(get_size(Padding), 0, 65535);
	X_NDR_DATA(uint32(get_size(Padding)), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(Padding, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_Padding::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	uint32 ConformanceCount;
	X_NDR_DATA(ConformanceCount, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_CHECK_RANGE(ConformanceCount, 0, 65535);
	X_NDR_DATA(Padding, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, ConformanceCount);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_Padding::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Padding, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_NegativeANCE::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_NegativeANCE::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_NegativeANCE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_ANCE::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_ANCE::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_ANCE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_ClientAddress::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ClientAddress, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_ClientAddress::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ClientAddress, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_ClientAddress::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ClientAddress, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_AssociationGroupId::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(AssociationGroupId, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_AssociationGroupId::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(AssociationGroupId, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_AssociationGroupId::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(AssociationGroupId, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_Destination::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ForwardDestination, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_Destination::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ForwardDestination, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_Destination::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ForwardDestination, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmd_PingTrafficSentNotify::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(PingTrafficSent, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd_PingTrafficSentNotify::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(PingTrafficSent, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd_PingTrafficSentNotify::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(PingTrafficSent, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_rts_cmds::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 0x0: {
			X_NDR_DATA(ReceiveWindowSize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x1: {
			X_NDR_DATA(FlowControlAck, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x2: {
			X_NDR_DATA(ConnectionTimeout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x3: {
			X_NDR_DATA(Cookie, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x4: {
			X_NDR_DATA(ChannelLifetime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x5: {
			X_NDR_DATA(ClientKeepalive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x6: {
			X_NDR_DATA(Version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x7: {
			X_NDR_DATA(Empty, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x8: {
			X_NDR_DATA(Padding, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x9: {
			X_NDR_DATA(NegativeANCE, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xA: {
			X_NDR_DATA(ANCE, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xB: {
			X_NDR_DATA(ClientAddress, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xC: {
			X_NDR_DATA(AssociationGroupId, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xD: {
			X_NDR_DATA(Destination, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xE: {
			X_NDR_DATA(PingTrafficSentNotify, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t dcerpc_rts_cmds::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 0x0: {
			X_NDR_DATA(ReceiveWindowSize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x1: {
			X_NDR_DATA(FlowControlAck, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x2: {
			X_NDR_DATA(ConnectionTimeout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x3: {
			X_NDR_DATA(Cookie, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x4: {
			X_NDR_DATA(ChannelLifetime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x5: {
			X_NDR_DATA(ClientKeepalive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x6: {
			X_NDR_DATA(Version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x7: {
			X_NDR_DATA(Empty, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x8: {
			X_NDR_DATA(Padding, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x9: {
			X_NDR_DATA(NegativeANCE, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xA: {
			X_NDR_DATA(ANCE, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xB: {
			X_NDR_DATA(ClientAddress, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xC: {
			X_NDR_DATA(AssociationGroupId, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xD: {
			X_NDR_DATA(Destination, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xE: {
			X_NDR_DATA(PingTrafficSentNotify, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void dcerpc_rts_cmds::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 0x0: {
			X_NDR_OSTR(ReceiveWindowSize, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x1: {
			X_NDR_OSTR(FlowControlAck, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x2: {
			X_NDR_OSTR(ConnectionTimeout, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x3: {
			X_NDR_OSTR(Cookie, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x4: {
			X_NDR_OSTR(ChannelLifetime, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x5: {
			X_NDR_OSTR(ClientKeepalive, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x6: {
			X_NDR_OSTR(Version, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x7: {
			X_NDR_OSTR(Empty, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x8: {
			X_NDR_OSTR(Padding, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0x9: {
			X_NDR_OSTR(NegativeANCE, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xA: {
			X_NDR_OSTR(ANCE, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xB: {
			X_NDR_OSTR(ClientAddress, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xC: {
			X_NDR_OSTR(AssociationGroupId, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xD: {
			X_NDR_OSTR(Destination, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 0xE: {
			X_NDR_OSTR(PingTrafficSentNotify, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t dcerpc_rts_cmd::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(CommandType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(Command, __ndr, __bpos, __epos, __flags, CommandType);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts_cmd::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(CommandType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(Command, __ndr, __bpos, __epos, __flags, CommandType);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts_cmd::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(CommandType, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(Command, __ndr, __flags, CommandType);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 8> x_ndr_traits_t<dcerpc_rts_flags>::value_name_map = { {
		{ RTS_FLAG_NONE, "RTS_FLAG_NONE" },
		{ RTS_FLAG_PING, "RTS_FLAG_PING" },
		{ RTS_FLAG_OTHER_CMD, "RTS_FLAG_OTHER_CMD" },
		{ RTS_FLAG_RECYCLE_CHANNEL, "RTS_FLAG_RECYCLE_CHANNEL" },
		{ RTS_FLAG_IN_CHANNEL, "RTS_FLAG_IN_CHANNEL" },
		{ RTS_FLAG_OUT_CHANNEL, "RTS_FLAG_OUT_CHANNEL" },
		{ RTS_FLAG_EOF, "RTS_FLAG_EOF" },
		{ RTS_FLAG_ECHO, "RTS_FLAG_ECHO" },
} };

x_ndr_off_t dcerpc_rts::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(uint16(get_size(Commands)), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(Commands, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_rts::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(Flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 NumberOfCommands;
	X_NDR_DATA(NumberOfCommands, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(Commands, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, NumberOfCommands);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_rts::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(Commands, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint8, const char *>, 21> x_ndr_traits_t<dcerpc_pkt_type>::value_name_map = { {
	{ DCERPC_PKT_REQUEST, "DCERPC_PKT_REQUEST" },
	{ DCERPC_PKT_PING, "DCERPC_PKT_PING" },
	{ DCERPC_PKT_RESPONSE, "DCERPC_PKT_RESPONSE" },
	{ DCERPC_PKT_FAULT, "DCERPC_PKT_FAULT" },
	{ DCERPC_PKT_WORKING, "DCERPC_PKT_WORKING" },
	{ DCERPC_PKT_NOCALL, "DCERPC_PKT_NOCALL" },
	{ DCERPC_PKT_REJECT, "DCERPC_PKT_REJECT" },
	{ DCERPC_PKT_ACK, "DCERPC_PKT_ACK" },
	{ DCERPC_PKT_CL_CANCEL, "DCERPC_PKT_CL_CANCEL" },
	{ DCERPC_PKT_FACK, "DCERPC_PKT_FACK" },
	{ DCERPC_PKT_CANCEL_ACK, "DCERPC_PKT_CANCEL_ACK" },
	{ DCERPC_PKT_BIND, "DCERPC_PKT_BIND" },
	{ DCERPC_PKT_BIND_ACK, "DCERPC_PKT_BIND_ACK" },
	{ DCERPC_PKT_BIND_NAK, "DCERPC_PKT_BIND_NAK" },
	{ DCERPC_PKT_ALTER, "DCERPC_PKT_ALTER" },
	{ DCERPC_PKT_ALTER_RESP, "DCERPC_PKT_ALTER_RESP" },
	{ DCERPC_PKT_AUTH3, "DCERPC_PKT_AUTH3" },
	{ DCERPC_PKT_SHUTDOWN, "DCERPC_PKT_SHUTDOWN" },
	{ DCERPC_PKT_CO_CANCEL, "DCERPC_PKT_CO_CANCEL" },
	{ DCERPC_PKT_ORPHANED, "DCERPC_PKT_ORPHANED" },
	{ DCERPC_PKT_RTS, "DCERPC_PKT_RTS" },
} };



void dcerpc_payload::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case DCERPC_PKT_REQUEST: construct(request); break;
		case DCERPC_PKT_PING: construct(ping); break;
		case DCERPC_PKT_RESPONSE: construct(response); break;
		case DCERPC_PKT_FAULT: construct(fault); break;
		case DCERPC_PKT_WORKING: construct(working); break;
		case DCERPC_PKT_NOCALL: construct(nocall); break;
		case DCERPC_PKT_REJECT: construct(reject); break;
		case DCERPC_PKT_ACK: construct(ack); break;
		case DCERPC_PKT_CL_CANCEL: construct(cl_cancel); break;
		case DCERPC_PKT_FACK: construct(fack); break;
		case DCERPC_PKT_CANCEL_ACK: construct(cancel_ack); break;
		case DCERPC_PKT_BIND: construct(bind); break;
		case DCERPC_PKT_BIND_ACK: construct(bind_ack); break;
		case DCERPC_PKT_BIND_NAK: construct(bind_nak); break;
		case DCERPC_PKT_ALTER: construct(alter); break;
		case DCERPC_PKT_ALTER_RESP: construct(alter_resp); break;
		case DCERPC_PKT_SHUTDOWN: construct(shutdown); break;
		case DCERPC_PKT_CO_CANCEL: construct(co_cancel); break;
		case DCERPC_PKT_ORPHANED: construct(orphaned); break;
		case DCERPC_PKT_AUTH3: construct(auth3); break;
		case DCERPC_PKT_RTS: construct(rts); break;
	}
}

void dcerpc_payload::__init(x_ndr_switch_t __level, const dcerpc_payload &other)
{
	switch (__level) {
		case DCERPC_PKT_REQUEST: construct(request, other.request); break;
		case DCERPC_PKT_PING: construct(ping, other.ping); break;
		case DCERPC_PKT_RESPONSE: construct(response, other.response); break;
		case DCERPC_PKT_FAULT: construct(fault, other.fault); break;
		case DCERPC_PKT_WORKING: construct(working, other.working); break;
		case DCERPC_PKT_NOCALL: construct(nocall, other.nocall); break;
		case DCERPC_PKT_REJECT: construct(reject, other.reject); break;
		case DCERPC_PKT_ACK: construct(ack, other.ack); break;
		case DCERPC_PKT_CL_CANCEL: construct(cl_cancel, other.cl_cancel); break;
		case DCERPC_PKT_FACK: construct(fack, other.fack); break;
		case DCERPC_PKT_CANCEL_ACK: construct(cancel_ack, other.cancel_ack); break;
		case DCERPC_PKT_BIND: construct(bind, other.bind); break;
		case DCERPC_PKT_BIND_ACK: construct(bind_ack, other.bind_ack); break;
		case DCERPC_PKT_BIND_NAK: construct(bind_nak, other.bind_nak); break;
		case DCERPC_PKT_ALTER: construct(alter, other.alter); break;
		case DCERPC_PKT_ALTER_RESP: construct(alter_resp, other.alter_resp); break;
		case DCERPC_PKT_SHUTDOWN: construct(shutdown, other.shutdown); break;
		case DCERPC_PKT_CO_CANCEL: construct(co_cancel, other.co_cancel); break;
		case DCERPC_PKT_ORPHANED: construct(orphaned, other.orphaned); break;
		case DCERPC_PKT_AUTH3: construct(auth3, other.auth3); break;
		case DCERPC_PKT_RTS: construct(rts, other.rts); break;
	}
}

void dcerpc_payload::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case DCERPC_PKT_REQUEST: destruct(request); break;
		case DCERPC_PKT_PING: destruct(ping); break;
		case DCERPC_PKT_RESPONSE: destruct(response); break;
		case DCERPC_PKT_FAULT: destruct(fault); break;
		case DCERPC_PKT_WORKING: destruct(working); break;
		case DCERPC_PKT_NOCALL: destruct(nocall); break;
		case DCERPC_PKT_REJECT: destruct(reject); break;
		case DCERPC_PKT_ACK: destruct(ack); break;
		case DCERPC_PKT_CL_CANCEL: destruct(cl_cancel); break;
		case DCERPC_PKT_FACK: destruct(fack); break;
		case DCERPC_PKT_CANCEL_ACK: destruct(cancel_ack); break;
		case DCERPC_PKT_BIND: destruct(bind); break;
		case DCERPC_PKT_BIND_ACK: destruct(bind_ack); break;
		case DCERPC_PKT_BIND_NAK: destruct(bind_nak); break;
		case DCERPC_PKT_ALTER: destruct(alter); break;
		case DCERPC_PKT_ALTER_RESP: destruct(alter_resp); break;
		case DCERPC_PKT_SHUTDOWN: destruct(shutdown); break;
		case DCERPC_PKT_CO_CANCEL: destruct(co_cancel); break;
		case DCERPC_PKT_ORPHANED: destruct(orphaned); break;
		case DCERPC_PKT_AUTH3: destruct(auth3); break;
		case DCERPC_PKT_RTS: destruct(rts); break;
	}
}

x_ndr_off_t dcerpc_payload::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case DCERPC_PKT_REQUEST: {
			X_NDR_DATA(request, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_PING: {
			X_NDR_DATA(ping, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_RESPONSE: {
			X_NDR_DATA(response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_FAULT: {
			X_NDR_DATA(fault, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_WORKING: {
			X_NDR_DATA(working, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_NOCALL: {
			X_NDR_DATA(nocall, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_REJECT: {
			X_NDR_DATA(reject, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ACK: {
			X_NDR_DATA(ack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CL_CANCEL: {
			X_NDR_DATA(cl_cancel, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_FACK: {
			X_NDR_DATA(fack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CANCEL_ACK: {
			X_NDR_DATA(cancel_ack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND: {
			X_NDR_DATA(bind, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND_ACK: {
			X_NDR_DATA(bind_ack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND_NAK: {
			X_NDR_DATA(bind_nak, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ALTER: {
			X_NDR_DATA(alter, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ALTER_RESP: {
			X_NDR_DATA(alter_resp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_SHUTDOWN: {
			X_NDR_DATA(shutdown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CO_CANCEL: {
			X_NDR_DATA(co_cancel, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ORPHANED: {
			X_NDR_DATA(orphaned, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_AUTH3: {
			X_NDR_DATA(auth3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_RTS: {
			X_NDR_DATA(rts, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t dcerpc_payload::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case DCERPC_PKT_REQUEST: {
			X_NDR_DATA(request, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_PING: {
			X_NDR_DATA(ping, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_RESPONSE: {
			X_NDR_DATA(response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_FAULT: {
			X_NDR_DATA(fault, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_WORKING: {
			X_NDR_DATA(working, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_NOCALL: {
			X_NDR_DATA(nocall, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_REJECT: {
			X_NDR_DATA(reject, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ACK: {
			X_NDR_DATA(ack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CL_CANCEL: {
			X_NDR_DATA(cl_cancel, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_FACK: {
			X_NDR_DATA(fack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CANCEL_ACK: {
			X_NDR_DATA(cancel_ack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND: {
			X_NDR_DATA(bind, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND_ACK: {
			X_NDR_DATA(bind_ack, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND_NAK: {
			X_NDR_DATA(bind_nak, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ALTER: {
			X_NDR_DATA(alter, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ALTER_RESP: {
			X_NDR_DATA(alter_resp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_SHUTDOWN: {
			X_NDR_DATA(shutdown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CO_CANCEL: {
			X_NDR_DATA(co_cancel, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ORPHANED: {
			X_NDR_DATA(orphaned, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_AUTH3: {
			X_NDR_DATA(auth3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_RTS: {
			X_NDR_DATA(rts, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void dcerpc_payload::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case DCERPC_PKT_REQUEST: {
			X_NDR_OSTR(request, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_PING: {
			X_NDR_OSTR(ping, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_RESPONSE: {
			X_NDR_OSTR(response, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_FAULT: {
			X_NDR_OSTR(fault, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_WORKING: {
			X_NDR_OSTR(working, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_NOCALL: {
			X_NDR_OSTR(nocall, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_REJECT: {
			X_NDR_OSTR(reject, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ACK: {
			X_NDR_OSTR(ack, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CL_CANCEL: {
			X_NDR_OSTR(cl_cancel, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_FACK: {
			X_NDR_OSTR(fack, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CANCEL_ACK: {
			X_NDR_OSTR(cancel_ack, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND: {
			X_NDR_OSTR(bind, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND_ACK: {
			X_NDR_OSTR(bind_ack, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_BIND_NAK: {
			X_NDR_OSTR(bind_nak, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ALTER: {
			X_NDR_OSTR(alter, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ALTER_RESP: {
			X_NDR_OSTR(alter_resp, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_SHUTDOWN: {
			X_NDR_OSTR(shutdown, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_CO_CANCEL: {
			X_NDR_OSTR(co_cancel, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_ORPHANED: {
			X_NDR_OSTR(orphaned, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_AUTH3: {
			X_NDR_OSTR(auth3, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_PKT_RTS: {
			X_NDR_OSTR(rts, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}

const std::array<std::pair<uint8, const char *>, 7> x_ndr_traits_t<dcerpc_pfc_flags>::value_name_map = { {
		{ DCERPC_PFC_FLAG_FIRST, "DCERPC_PFC_FLAG_FIRST" },
		{ DCERPC_PFC_FLAG_LAST, "DCERPC_PFC_FLAG_LAST" },
		{ DCERPC_PFC_FLAG_PENDING_CANCEL_OR_HDR_SIGNING, "DCERPC_PFC_FLAG_PENDING_CANCEL_OR_HDR_SIGNING" },
		{ DCERPC_PFC_FLAG_CONC_MPX, "DCERPC_PFC_FLAG_CONC_MPX" },
		{ DCERPC_PFC_FLAG_DID_NOT_EXECUTE, "DCERPC_PFC_FLAG_DID_NOT_EXECUTE" },
		{ DCERPC_PFC_FLAG_MAYBE, "DCERPC_PFC_FLAG_MAYBE" },
		{ DCERPC_PFC_FLAG_OBJECT_UUID, "DCERPC_PFC_FLAG_OBJECT_UUID" },
} };
void ncacn_packet::set_ptype(dcerpc_pkt_type v)
{
	u.__uninit(x_ndr_switch_t(ptype));
	ptype = v;
	u.__init(x_ndr_switch_t(ptype));
}
ncacn_packet::ncacn_packet()
	: ptype((dcerpc_pkt_type)DCERPC_PKT_REQUEST)
{
	u.__init(x_ndr_switch_t(ptype));
}

ncacn_packet::~ncacn_packet()
{
	u.__uninit(ptype);
}

ncacn_packet::ncacn_packet(const ncacn_packet &other)
	: ptype(other.ptype)
{
	u.__init(x_ndr_switch_t(ptype), other.u);
}

ncacn_packet &ncacn_packet::operator=(const ncacn_packet &other)
{
	u.__uninit(x_ndr_switch_t(ptype));
	ptype = other.ptype;
	u.__init(x_ndr_switch_t(ptype), other.u);
	return *this;
}

x_ndr_off_t ncacn_packet::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(rpc_vers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(rpc_vers_minor, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ptype, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(pfc_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(drep, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(frag_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(call_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(u, __ndr, __bpos, __epos, __flags, ptype);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t ncacn_packet::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(rpc_vers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(rpc_vers_minor, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SWITCH(dcerpc_pkt_type, ptype, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(pfc_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(drep, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(frag_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(call_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(u, __ndr, __bpos, __epos, __flags, ptype);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void ncacn_packet::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(rpc_vers, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rpc_vers_minor, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ptype, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pfc_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(drep, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(frag_length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(call_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(u, __ndr, __flags, ptype);
	(__ndr) << leave;
}


void ncadg_packet::set_ptype(uint8 v)
{
	u.__uninit(x_ndr_switch_t(ptype));
	ptype = v;
	u.__init(x_ndr_switch_t(ptype));
}
ncadg_packet::ncadg_packet()
	: ptype((uint8)DCERPC_PKT_REQUEST)
{
	u.__init(x_ndr_switch_t(ptype));
}

ncadg_packet::~ncadg_packet()
{
	u.__uninit(ptype);
}

ncadg_packet::ncadg_packet(const ncadg_packet &other)
	: ptype(other.ptype)
{
	u.__init(x_ndr_switch_t(ptype), other.u);
}

ncadg_packet &ncadg_packet::operator=(const ncadg_packet &other)
{
	u.__uninit(x_ndr_switch_t(ptype));
	ptype = other.ptype;
	u.__init(x_ndr_switch_t(ptype), other.u);
	return *this;
}

x_ndr_off_t ncadg_packet::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(rpc_vers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ptype, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(pfc_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ncadg_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(drep, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(serial_high, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(object, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(iface, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(activity, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(server_boot, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(iface_version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(seq_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(opnum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ihint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ahint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(len, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(fragnum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_proto, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(serial_low, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(u, __ndr, __bpos, __epos, __flags, ptype);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t ncadg_packet::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(rpc_vers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SWITCH(uint8, ptype, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(pfc_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ncadg_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(drep, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(serial_high, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(object, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(iface, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(activity, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(server_boot, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(iface_version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(seq_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(opnum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ihint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(ahint, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(len, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(fragnum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(auth_proto, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(serial_low, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(u, __ndr, __bpos, __epos, __flags, ptype);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void ncadg_packet::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(rpc_vers, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ptype, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pfc_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ncadg_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(drep, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(serial_high, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(object, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(iface, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(activity, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(server_boot, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(iface_version, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(seq_num, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(opnum, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ihint, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ahint, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(len, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(fragnum, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_proto, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(serial_low, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(u, __ndr, __flags, ptype);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 3> x_ndr_traits_t<dcerpc_sec_vt_command>::value_name_map = { {
		{ DCERPC_SEC_VT_COMMAND_ENUM, "DCERPC_SEC_VT_COMMAND_ENUM" },
		{ DCERPC_SEC_VT_COMMAND_END, "DCERPC_SEC_VT_COMMAND_END" },
		{ DCERPC_SEC_VT_MUST_PROCESS, "DCERPC_SEC_VT_MUST_PROCESS" },
} };
const std::array<std::pair<uint16, const char *>, 3> x_ndr_traits_t<dcerpc_sec_vt_command_enum>::value_name_map = { {
	{ DCERPC_SEC_VT_COMMAND_BITMASK1, "DCERPC_SEC_VT_COMMAND_BITMASK1" },
	{ DCERPC_SEC_VT_COMMAND_PCONTEXT, "DCERPC_SEC_VT_COMMAND_PCONTEXT" },
	{ DCERPC_SEC_VT_COMMAND_HEADER2, "DCERPC_SEC_VT_COMMAND_HEADER2" },
} };


const std::array<std::pair<uint32, const char *>, 1> x_ndr_traits_t<dcerpc_sec_vt_bitmask1>::value_name_map = { {
		{ DCERPC_SEC_VT_CLIENT_SUPPORTS_HEADER_SIGNING, "DCERPC_SEC_VT_CLIENT_SUPPORTS_HEADER_SIGNING" },
} };

x_ndr_off_t dcerpc_sec_vt_pcontext::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(abstract_syntax, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(transfer_syntax, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_sec_vt_pcontext::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(abstract_syntax, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(transfer_syntax, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_sec_vt_pcontext::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(abstract_syntax, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(transfer_syntax, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_sec_vt_header2::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ptype, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint8 reserved1{0};
	X_NDR_DATA(reserved1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 reserved2{0};
	X_NDR_DATA(reserved2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(drep, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(call_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(opnum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_sec_vt_header2::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(ptype, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint8 reserved1;
	X_NDR_DATA(reserved1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 reserved2;
	X_NDR_DATA(reserved2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(drep, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(call_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(context_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(opnum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_sec_vt_header2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ptype, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(drep, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(call_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(context_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(opnum, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void dcerpc_sec_vt_union::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case DCERPC_SEC_VT_COMMAND_BITMASK1: construct(bitmask1); break;
		case DCERPC_SEC_VT_COMMAND_PCONTEXT: construct(pcontext); break;
		case DCERPC_SEC_VT_COMMAND_HEADER2: construct(header2); break;
		default: construct(_unknown); break;
	}
}

void dcerpc_sec_vt_union::__init(x_ndr_switch_t __level, const dcerpc_sec_vt_union &other)
{
	switch (__level) {
		case DCERPC_SEC_VT_COMMAND_BITMASK1: construct(bitmask1, other.bitmask1); break;
		case DCERPC_SEC_VT_COMMAND_PCONTEXT: construct(pcontext, other.pcontext); break;
		case DCERPC_SEC_VT_COMMAND_HEADER2: construct(header2, other.header2); break;
		default: construct(_unknown, other._unknown); break;
	}
}

void dcerpc_sec_vt_union::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case DCERPC_SEC_VT_COMMAND_BITMASK1: destruct(bitmask1); break;
		case DCERPC_SEC_VT_COMMAND_PCONTEXT: destruct(pcontext); break;
		case DCERPC_SEC_VT_COMMAND_HEADER2: destruct(header2); break;
		default: destruct(_unknown); break;
	}
}

x_ndr_off_t dcerpc_sec_vt_union::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case DCERPC_SEC_VT_COMMAND_BITMASK1: {
			X_NDR_DATA(bitmask1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_SEC_VT_COMMAND_PCONTEXT: {
			X_NDR_DATA(pcontext, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_SEC_VT_COMMAND_HEADER2: {
			X_NDR_DATA(header2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_DATA(_unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t dcerpc_sec_vt_union::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case DCERPC_SEC_VT_COMMAND_BITMASK1: {
			X_NDR_DATA(bitmask1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_SEC_VT_COMMAND_PCONTEXT: {
			X_NDR_DATA(pcontext, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_SEC_VT_COMMAND_HEADER2: {
			X_NDR_DATA(header2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_DATA(_unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void dcerpc_sec_vt_union::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case DCERPC_SEC_VT_COMMAND_BITMASK1: {
			X_NDR_OSTR(bitmask1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_SEC_VT_COMMAND_PCONTEXT: {
			X_NDR_OSTR(pcontext, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case DCERPC_SEC_VT_COMMAND_HEADER2: {
			X_NDR_OSTR(header2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_OSTR(_unknown, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}

void dcerpc_sec_vt::set_command(dcerpc_sec_vt_command v)
{
	u.__uninit(x_ndr_switch_t(command&DCERPC_SEC_VT_COMMAND_ENUM));
	command = v;
	u.__init(x_ndr_switch_t(command&DCERPC_SEC_VT_COMMAND_ENUM));
}
dcerpc_sec_vt::dcerpc_sec_vt()
	: command((dcerpc_sec_vt_command)DCERPC_SEC_VT_COMMAND_BITMASK1)
{
	u.__init(x_ndr_switch_t(command&DCERPC_SEC_VT_COMMAND_ENUM));
}

dcerpc_sec_vt::~dcerpc_sec_vt()
{
	u.__uninit(command&DCERPC_SEC_VT_COMMAND_ENUM);
}

dcerpc_sec_vt::dcerpc_sec_vt(const dcerpc_sec_vt &other)
	: command(other.command)
{
	u.__init(x_ndr_switch_t(command&DCERPC_SEC_VT_COMMAND_ENUM), other.u);
}

dcerpc_sec_vt &dcerpc_sec_vt::operator=(const dcerpc_sec_vt &other)
{
	u.__uninit(x_ndr_switch_t(command&DCERPC_SEC_VT_COMMAND_ENUM));
	command = other.command;
	u.__init(x_ndr_switch_t(command&DCERPC_SEC_VT_COMMAND_ENUM), other.u);
	return *this;
}

x_ndr_off_t dcerpc_sec_vt::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(command, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(u, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_SUBCONTEXT_NO_UNREAD_BYTES), command&DCERPC_SEC_VT_COMMAND_ENUM);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_sec_vt::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_SWITCH(dcerpc_sec_vt_command, command, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(u, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_SUBCONTEXT_NO_UNREAD_BYTES), command&DCERPC_SEC_VT_COMMAND_ENUM);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_sec_vt::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(command, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(u, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_SUBCONTEXT_NO_UNREAD_BYTES), command&DCERPC_SEC_VT_COMMAND_ENUM);
	(__ndr) << leave;
}



void dcerpc_sec_vt_count::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(count, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t dcerpc_sec_verification_trailer::push(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN4), X_NDR_SWITCH_NONE);
	std::array<uint8, 8> magic{DCERPC_SEC_VT_MAGIC};
	X_NDR_DATA(magic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(commands, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t dcerpc_sec_verification_trailer::pull(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __ptr; (void)__ptr;
	X_NDR_DATA(_pad, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN4), X_NDR_SWITCH_NONE);
	std::array<uint8, 8> magic;
	X_NDR_DATA(magic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_DATA(commands, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void dcerpc_sec_verification_trailer::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(_pad, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN4), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(commands, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}
#endif


} /* namespace idl */
