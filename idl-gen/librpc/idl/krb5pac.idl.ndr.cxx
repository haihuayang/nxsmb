/* ndr parser auto-generated by pidl */
	
#include "include/librpc/krb5pac.hxx"
#include "include/librpc/ndr_smb.hxx"


namespace idl {

struct remain_u16string_t
{
	remain_u16string_t(std::u16string &v) : val(v) { }
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) {
		X_ASSERT(level == X_NDR_SWITCH_NONE);
		size_t size = epos - bpos;
		if ((size % 2) != 0) {
			return -NDR_ERR_LENGTH;
		}
		val.assign((const char16_t *)(ndr.get_data() + bpos), (const char16_t *)(ndr.get_data() + epos));
		return epos;
	}
	std::u16string &val;
};

x_ndr_off_t PAC_LOGON_NAME::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(logon_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_size = __bpos;
	X_NDR_SKIP(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_SIZE(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint16, __pos_size);
#if 0
	x_ndr_off_t __orig_bpos = __bpos;
	X_NDR_SCALARS(account_name, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(uint16(__bpos - __orig_bpos), _bpos, __epos, __flags, X_NDR_SWITCH_NONE);
#endif
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_LOGON_NAME::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(logon_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_size = __bpos;
	X_NDR_SKIP(uint16, __ndr, __bpos, __epos, __flags);
	remain_u16string_t tmp(account_name);
	X_NDR_SCALARS_SIZE(tmp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint16, __pos_size);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void PAC_LOGON_NAME::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(logon_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t PAC_SIGNATURE_DATA::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(signature, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t PAC_SIGNATURE_DATA::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(signature, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void PAC_SIGNATURE_DATA::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(signature, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t PAC_LOGON_INFO::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(res_group_dom_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(res_groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_LOGON_INFO::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(res_group_dom_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(res_groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t PAC_LOGON_INFO::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(res_group_dom_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(res_groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_LOGON_INFO::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(res_group_dom_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(res_groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void PAC_LOGON_INFO::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(res_group_dom_sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(res_groups, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t PAC_CONSTRAINED_DELEGATION::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(proxy_target, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(transited_services, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_CONSTRAINED_DELEGATION::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(proxy_target, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_VECTOR(transited_services, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_size);
	return __bpos;
}

x_ndr_off_t PAC_CONSTRAINED_DELEGATION::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(proxy_target, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(transited_services, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_CONSTRAINED_DELEGATION::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(proxy_target, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_VECTOR(transited_services, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_size);
	return __bpos;
}

void PAC_CONSTRAINED_DELEGATION::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(proxy_target, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(transited_services, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t PAC_LOGON_INFO_CTR::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_LOGON_INFO_CTR::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t PAC_LOGON_INFO_CTR::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_LOGON_INFO_CTR::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void PAC_LOGON_INFO_CTR::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t PAC_CONSTRAINED_DELEGATION_CTR::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS_UNIQUE_PTR(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_CONSTRAINED_DELEGATION_CTR::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t PAC_CONSTRAINED_DELEGATION_CTR::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS_UNIQUE_PTR(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t PAC_CONSTRAINED_DELEGATION_CTR::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void PAC_CONSTRAINED_DELEGATION_CTR::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 6> x_ndr_traits_t<PAC_TYPE>::value_name_map = { {
	{ PAC_TYPE_LOGON_INFO, "PAC_TYPE_LOGON_INFO" },
	{ PAC_TYPE_SRV_CHECKSUM, "PAC_TYPE_SRV_CHECKSUM" },
	{ PAC_TYPE_KDC_CHECKSUM, "PAC_TYPE_KDC_CHECKSUM" },
	{ PAC_TYPE_LOGON_NAME, "PAC_TYPE_LOGON_NAME" },
	{ PAC_TYPE_CONSTRAINED_DELEGATION, "PAC_TYPE_CONSTRAINED_DELEGATION" },
	{ PAC_TYPE_UNKNOWN_12, "PAC_TYPE_UNKNOWN_12" },
} };



x_ndr_off_t DATA_BLOB_REM::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(remaining, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t DATA_BLOB_REM::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(remaining, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void DATA_BLOB_REM::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(remaining, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void PAC_INFO::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case PAC_TYPE_LOGON_INFO: construct(logon_info); break;
		case PAC_TYPE_SRV_CHECKSUM: construct(srv_cksum); break;
		case PAC_TYPE_KDC_CHECKSUM: construct(kdc_cksum); break;
		case PAC_TYPE_LOGON_NAME: construct(logon_name); break;
		case PAC_TYPE_CONSTRAINED_DELEGATION: construct(constrained_delegation); break;
		default: construct(unknown); break;
	}
}

void PAC_INFO::__init(x_ndr_switch_t __level, const PAC_INFO &other)
{
	switch (__level) {
		case PAC_TYPE_LOGON_INFO: construct(logon_info, other.logon_info); break;
		case PAC_TYPE_SRV_CHECKSUM: construct(srv_cksum, other.srv_cksum); break;
		case PAC_TYPE_KDC_CHECKSUM: construct(kdc_cksum, other.kdc_cksum); break;
		case PAC_TYPE_LOGON_NAME: construct(logon_name, other.logon_name); break;
		case PAC_TYPE_CONSTRAINED_DELEGATION: construct(constrained_delegation, other.constrained_delegation); break;
		default: construct(unknown, other.unknown); break;
	}
}

void PAC_INFO::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case PAC_TYPE_LOGON_INFO: destruct(logon_info); break;
		case PAC_TYPE_SRV_CHECKSUM: destruct(srv_cksum); break;
		case PAC_TYPE_KDC_CHECKSUM: destruct(kdc_cksum); break;
		case PAC_TYPE_LOGON_NAME: destruct(logon_name); break;
		case PAC_TYPE_CONSTRAINED_DELEGATION: destruct(constrained_delegation); break;
		default: destruct(unknown); break;
	}
}

x_ndr_off_t PAC_INFO::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case PAC_TYPE_LOGON_INFO: {
			X_NDR_SUBCTX(logon_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_SRV_CHECKSUM: {
			X_NDR_SCALARS(srv_cksum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_KDC_CHECKSUM: {
			X_NDR_SCALARS(kdc_cksum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_LOGON_NAME: {
			X_NDR_SCALARS(logon_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_CONSTRAINED_DELEGATION: {
			X_NDR_SUBCTX(constrained_delegation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t PAC_INFO::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case PAC_TYPE_LOGON_INFO: {
			X_NDR_SUBCTX(logon_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_SRV_CHECKSUM: {
			X_NDR_SCALARS(srv_cksum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_KDC_CHECKSUM: {
			X_NDR_SCALARS(kdc_cksum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_LOGON_NAME: {
			X_NDR_SCALARS(logon_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_CONSTRAINED_DELEGATION: {
			X_NDR_SUBCTX(constrained_delegation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void PAC_INFO::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case PAC_TYPE_LOGON_INFO: {
			X_NDR_OSTR(logon_info, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_SRV_CHECKSUM: {
			X_NDR_OSTR(srv_cksum, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_KDC_CHECKSUM: {
			X_NDR_OSTR(kdc_cksum, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_LOGON_NAME: {
			X_NDR_OSTR(logon_name, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case PAC_TYPE_CONSTRAINED_DELEGATION: {
			X_NDR_OSTR(constrained_delegation, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_OSTR(unknown, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}

void PAC_BUFFER::set_type(PAC_TYPE v)
{
	if (info) {
		info->__uninit(x_ndr_switch_t(type));
		info = nullptr;
	}
	type = v;
	// info->__init(x_ndr_switch_t(type));
}
#if 0
PAC_BUFFER::PAC_BUFFER()
	: type((PAC_TYPE)PAC_TYPE_LOGON_INFO)
{
	info->__init(x_ndr_switch_t(type));
}
#endif
PAC_BUFFER::~PAC_BUFFER()
{
	if (info) {
		info->__uninit(type);
	}
}
#if 0
PAC_BUFFER::PAC_BUFFER(const PAC_BUFFER &other)
	: type(other.type)
{
	info->__init(x_ndr_switch_t(type), *other.info);
}

PAC_BUFFER &PAC_BUFFER::operator=(const PAC_BUFFER &other)
{
	info->__uninit(x_ndr_switch_t(type));
	type = other.type;
	info->__init(x_ndr_switch_t(type), *other.info);
	return *this;
}
#endif
x_ndr_off_t PAC_BUFFER::ndr_scalars(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint64, __ndr, __bpos, __epos, __flags);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_BUFFER::ndr_buffers(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_size = __ndr.load_pos();
	x_ndr_off_t __pos_info = __ndr.load_pos();
	X_NDR_BUFFERS_RELATIVE_PTR_SIZE_1(info, __ndr, __bpos, __epos,
			x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN8), type,
			uint64, __pos_info, uint32, __pos_size, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t PAC_BUFFER::ndr_scalars(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint64, __ndr, __bpos, __epos, __flags);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_BUFFER::ndr_buffers(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_size = __ndr.load_pos();
	x_ndr_off_t __pos_info = __ndr.load_pos();
	X_NDR_BUFFERS_RELATIVE_PTR_SIZE_1(info, __ndr, __bpos, __epos,
			x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN8), type,
			uint64, __pos_info, uint32, __pos_size, x_ndr_I_t());
	return __bpos;
}

void PAC_BUFFER::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(info, __ndr, __flags, type);
	(__ndr) << leave;
}

x_ndr_off_t PAC_DATA::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(uint32(buffers.size()), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	for (const auto &__v: buffers) {
		X_NDR_SCALARS(__v, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_DATA::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	for (const auto &__v: buffers) {
		X_NDR_BUFFERS(__v, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	return __bpos;
}


x_ndr_off_t PAC_DATA::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 num_buffers;
	X_NDR_SCALARS(num_buffers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	buffers.resize(num_buffers);
	X_NDR_SCALARS(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	for (auto &__v: buffers) {
		X_NDR_SCALARS(__v, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_DATA::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	for (auto &__v: buffers) {
		X_NDR_BUFFERS(__v, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	return __bpos;
}

void PAC_DATA::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(version, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(buffers, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t PAC_BUFFER_RAW::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint64, __ndr, __bpos, __epos, __flags);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_BUFFER_RAW::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_size = __ndr.load_pos();
	x_ndr_off_t __pos_info = __ndr.load_pos();
	X_NDR_BUFFERS_RELATIVE_PTR_SIZE_1(info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN8), __level, uint64, __pos_info, uint32, __pos_size, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t PAC_BUFFER_RAW::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint64, __ndr, __bpos, __epos, __flags);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_BUFFER_RAW::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_size = __ndr.load_pos();
	x_ndr_off_t __pos_info = __ndr.load_pos();
	X_NDR_BUFFERS_RELATIVE_PTR_SIZE_1(info, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN8), __level, uint64, __pos_info, uint32, __pos_size, x_ndr_I_t());
	return __bpos;
}

void PAC_BUFFER_RAW::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(info, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_ALIGN8), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t PAC_DATA_RAW::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(uint32(buffers.size()), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	for (auto &__v: buffers) {
		X_NDR_SCALARS(__v, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_DATA_RAW::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	for (auto &__v: buffers) {
		X_NDR_BUFFERS(__v, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	return __bpos;
}

x_ndr_off_t PAC_DATA_RAW::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	uint32 num_buffers;
	X_NDR_SCALARS(num_buffers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	buffers.resize(num_buffers);
	for (auto &__v: buffers) {
		X_NDR_SCALARS(__v, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t PAC_DATA_RAW::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	for (auto &__v: buffers) {
		X_NDR_BUFFERS(__v, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	return __bpos;
}

void PAC_DATA_RAW::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(version, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(buffers, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t PAC_Validate::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 MessageType{NETLOGON_GENERIC_KRB5_PAC_VALIDATE};
	X_NDR_SCALARS(MessageType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ChecksumLength, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SignatureType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SignatureLength, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ChecksumAndSignature, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t PAC_Validate::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 MessageType;
	X_NDR_SCALARS(MessageType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ChecksumLength, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SignatureType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SignatureLength, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ChecksumAndSignature, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void PAC_Validate::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ChecksumLength, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SignatureType, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SignatureLength, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ChecksumAndSignature, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netsamlogoncache_entry::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(timestamp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netsamlogoncache_entry::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netsamlogoncache_entry::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(timestamp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netsamlogoncache_entry::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netsamlogoncache_entry::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(timestamp, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(info3, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



// }
}
