/* header auto-generated by pidl */
#ifndef _PIDL_HEADER_lsarpc
#define _PIDL_HEADER_lsarpc
#include "include/librpc/ndr_smb.hxx"

#include "include/librpc/misc.hxx"
#include "include/librpc/security.hxx"

namespace idl {
#ifndef _HEADER_lsarpc
#define _HEADER_lsarpc

// namespace lsarpc {

struct lsa_String
{
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::u16string> string;
};

template <> struct x_ndr_traits_t<lsa_String> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_BinaryString
{
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::u16string> array;
};

template <> struct x_ndr_traits_t<lsa_BinaryString> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_StringLarge
{
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::u16string> string;
};

template <> struct x_ndr_traits_t<lsa_StringLarge> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_AsciiStringLarge
{
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::u16string> string;
};

template <> struct x_ndr_traits_t<lsa_AsciiStringLarge> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_LUID {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint32 low;
	uint32 high;
} ;

template <> struct x_ndr_traits_t<lsa_LUID> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_PrivEntry {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_StringLarge name;
	lsa_LUID luid;
} ;

template <> struct x_ndr_traits_t<lsa_PrivEntry> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_PrivArray {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_PrivEntry>> privs; //x_ndr_unique_array_t<lsa_PrivEntry, uint32> privs;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_PrivArray> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_QosInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint16 impersonation_level;
	uint8 context_mode;
	uint8 effective_only;
} ;

template <> struct x_ndr_traits_t<lsa_QosInfo> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_ObjectAttribute {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<uint8>> root_dir;
	std::shared_ptr<std::u16string> object_name;/* [string, charset(UTF16)] */
	uint32 attributes;
	std::shared_ptr<security_descriptor> sec_desc;
	std::shared_ptr<lsa_QosInfo> sec_qos;
} ;

template <> struct x_ndr_traits_t<lsa_ObjectAttribute> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_PolicyAccessMask : uint32 {
	LSA_POLICY_VIEW_LOCAL_INFORMATION=0x00000001,
	LSA_POLICY_VIEW_AUDIT_INFORMATION=0x00000002,
	LSA_POLICY_GET_PRIVATE_INFORMATION=0x00000004,
	LSA_POLICY_TRUST_ADMIN=0x00000008,
	LSA_POLICY_CREATE_ACCOUNT=0x00000010,
	LSA_POLICY_CREATE_SECRET=0x00000020,
	LSA_POLICY_CREATE_PRIVILEGE=0x00000040,
	LSA_POLICY_SET_DEFAULT_QUOTA_LIMITS=0x00000080,
	LSA_POLICY_SET_AUDIT_REQUIREMENTS=0x00000100,
	LSA_POLICY_AUDIT_LOG_ADMIN=0x00000200,
	LSA_POLICY_SERVER_ADMIN=0x00000400,
	LSA_POLICY_LOOKUP_NAMES=0x00000800,
	LSA_POLICY_NOTIFICATION=0x00001000,
}/* [bitmap32bit, public] */;

template <> struct x_ndr_traits_t<lsa_PolicyAccessMask> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_bitmap;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 13> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_PolicyAccessMask>(const lsa_PolicyAccessMask &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_PolicyAccessMask>(lsa_PolicyAccessMask &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_PolicyAccessMask(v);
	return __bpos;
}


const int LSA_POLICY_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED_ACCESS|LSA_POLICY_VIEW_LOCAL_INFORMATION|LSA_POLICY_VIEW_AUDIT_INFORMATION|LSA_POLICY_GET_PRIVATE_INFORMATION|LSA_POLICY_TRUST_ADMIN|LSA_POLICY_CREATE_ACCOUNT|LSA_POLICY_CREATE_SECRET|LSA_POLICY_CREATE_PRIVILEGE|LSA_POLICY_SET_DEFAULT_QUOTA_LIMITS|LSA_POLICY_SET_AUDIT_REQUIREMENTS|LSA_POLICY_AUDIT_LOG_ADMIN|LSA_POLICY_SERVER_ADMIN|LSA_POLICY_LOOKUP_NAMES|LSA_POLICY_NOTIFICATION);
const int LSA_POLICY_READ = (STANDARD_RIGHTS_READ_ACCESS|LSA_POLICY_VIEW_LOCAL_INFORMATION|LSA_POLICY_VIEW_AUDIT_INFORMATION|LSA_POLICY_GET_PRIVATE_INFORMATION);
const int LSA_POLICY_WRITE = (STANDARD_RIGHTS_READ_ACCESS|LSA_POLICY_TRUST_ADMIN|LSA_POLICY_CREATE_ACCOUNT|LSA_POLICY_CREATE_SECRET|LSA_POLICY_CREATE_PRIVILEGE|LSA_POLICY_SET_DEFAULT_QUOTA_LIMITS|LSA_POLICY_SET_AUDIT_REQUIREMENTS|LSA_POLICY_AUDIT_LOG_ADMIN|LSA_POLICY_SERVER_ADMIN);
const int LSA_POLICY_EXECUTE = (STANDARD_RIGHTS_EXECUTE_ACCESS|LSA_POLICY_VIEW_LOCAL_INFORMATION|LSA_POLICY_LOOKUP_NAMES);

enum lsa_AccountAccessMask : uint32 {
	LSA_ACCOUNT_VIEW=0x00000001,
	LSA_ACCOUNT_ADJUST_PRIVILEGES=0x00000002,
	LSA_ACCOUNT_ADJUST_QUOTAS=0x00000004,
	LSA_ACCOUNT_ADJUST_SYSTEM_ACCESS=0x00000008,
}/* [bitmap32bit, public] */;

template <> struct x_ndr_traits_t<lsa_AccountAccessMask> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_bitmap;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 4> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_AccountAccessMask>(const lsa_AccountAccessMask &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_AccountAccessMask>(lsa_AccountAccessMask &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_AccountAccessMask(v);
	return __bpos;
}


const int LSA_ACCOUNT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED_ACCESS|LSA_ACCOUNT_VIEW|LSA_ACCOUNT_ADJUST_PRIVILEGES|LSA_ACCOUNT_ADJUST_QUOTAS|LSA_ACCOUNT_ADJUST_SYSTEM_ACCESS);
const int LSA_ACCOUNT_READ = (STANDARD_RIGHTS_READ_ACCESS|LSA_ACCOUNT_VIEW);
const int LSA_ACCOUNT_WRITE = (STANDARD_RIGHTS_READ_ACCESS|LSA_ACCOUNT_ADJUST_PRIVILEGES|LSA_ACCOUNT_ADJUST_QUOTAS|LSA_ACCOUNT_ADJUST_SYSTEM_ACCESS);
const int LSA_ACCOUNT_EXECUTE = (STANDARD_RIGHTS_EXECUTE_ACCESS);

enum lsa_SecretAccessMask : uint32 {
	LSA_SECRET_SET_VALUE=0x00000001,
	LSA_SECRET_QUERY_VALUE=0x00000002,
}/* [bitmap32bit, public] */;

template <> struct x_ndr_traits_t<lsa_SecretAccessMask> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_bitmap;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 2> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_SecretAccessMask>(const lsa_SecretAccessMask &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_SecretAccessMask>(lsa_SecretAccessMask &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_SecretAccessMask(v);
	return __bpos;
}


const int LSA_SECRET_ALL_ACCESS = (LSA_SECRET_QUERY_VALUE|LSA_SECRET_SET_VALUE|SEC_STD_DELETE|STANDARD_RIGHTS_READ_ACCESS|SEC_STD_WRITE_DAC|SEC_STD_WRITE_OWNER);
const int LSA_SECRET_READ = (LSA_SECRET_QUERY_VALUE|STANDARD_RIGHTS_READ_ACCESS);
const int LSA_SECRET_WRITE = (LSA_SECRET_SET_VALUE|STANDARD_RIGHTS_READ_ACCESS);
const int LSA_SECRET_EXECUTE = (STANDARD_RIGHTS_READ_ACCESS);

enum lsa_TrustedAccessMask : uint32 {
	LSA_TRUSTED_QUERY_DOMAIN_NAME=0x00000001,
	LSA_TRUSTED_QUERY_CONTROLLERS=0x00000002,
	LSA_TRUSTED_SET_CONTROLLERS=0x00000004,
	LSA_TRUSTED_QUERY_POSIX=0x00000008,
	LSA_TRUSTED_SET_POSIX=0x00000010,
	LSA_TRUSTED_SET_AUTH=0x00000020,
	LSA_TRUSTED_QUERY_AUTH=0x00000040,
}/* [bitmap32bit, public] */;

template <> struct x_ndr_traits_t<lsa_TrustedAccessMask> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_bitmap;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 7> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustedAccessMask>(const lsa_TrustedAccessMask &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustedAccessMask>(lsa_TrustedAccessMask &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_TrustedAccessMask(v);
	return __bpos;
}


const int LSA_TRUSTED_DOMAIN_ALL_ACCESS = (LSA_TRUSTED_QUERY_DOMAIN_NAME|LSA_TRUSTED_QUERY_CONTROLLERS|LSA_TRUSTED_SET_CONTROLLERS|LSA_TRUSTED_QUERY_POSIX|LSA_TRUSTED_SET_POSIX|LSA_TRUSTED_SET_AUTH|LSA_TRUSTED_QUERY_AUTH|SEC_STD_DELETE|STANDARD_RIGHTS_READ_ACCESS|SEC_STD_WRITE_DAC|SEC_STD_WRITE_OWNER);
const int LSA_TRUSTED_DOMAIN_READ = (LSA_TRUSTED_QUERY_DOMAIN_NAME|STANDARD_RIGHTS_READ_ACCESS);
const int LSA_TRUSTED_DOMAIN_WRITE = (LSA_TRUSTED_SET_CONTROLLERS|LSA_TRUSTED_SET_POSIX|LSA_TRUSTED_SET_AUTH|STANDARD_RIGHTS_READ_ACCESS);
const int LSA_TRUSTED_DOMAIN_EXECUTE = (LSA_TRUSTED_QUERY_DOMAIN_NAME|LSA_TRUSTED_QUERY_POSIX|STANDARD_RIGHTS_READ_ACCESS);

struct lsa_AuditLogInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint32 percent_full;
	uint32 maximum_log_size;
	hyper retention_time;
	uint8 shutdown_in_progress;
	hyper time_to_shutdown;
	uint32 next_audit_record;
} ;

template <> struct x_ndr_traits_t<lsa_AuditLogInfo> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_PolicyAuditPolicy : uint32 {
	LSA_AUDIT_POLICY_NONE=0,
	LSA_AUDIT_POLICY_SUCCESS=1,
	LSA_AUDIT_POLICY_FAILURE=2,
	LSA_AUDIT_POLICY_ALL=(LSA_AUDIT_POLICY_SUCCESS|LSA_AUDIT_POLICY_FAILURE),
	LSA_AUDIT_POLICY_CLEAR=4,
}/* [v1_enum] */;

template <> struct x_ndr_traits_t<lsa_PolicyAuditPolicy> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 5> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_PolicyAuditPolicy>(const lsa_PolicyAuditPolicy &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_PolicyAuditPolicy>(lsa_PolicyAuditPolicy &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_PolicyAuditPolicy(v);
	return __bpos;
}


enum lsa_PolicyAuditEventType : uint16 {
	LSA_AUDIT_CATEGORY_SYSTEM=0,
	LSA_AUDIT_CATEGORY_LOGON=1,
	LSA_AUDIT_CATEGORY_FILE_AND_OBJECT_ACCESS=2,
	LSA_AUDIT_CATEGORY_USE_OF_USER_RIGHTS=3,
	LSA_AUDIT_CATEGORY_PROCCESS_TRACKING=4,
	LSA_AUDIT_CATEGORY_SECURITY_POLICY_CHANGES=5,
	LSA_AUDIT_CATEGORY_ACCOUNT_MANAGEMENT=6,
	LSA_AUDIT_CATEGORY_DIRECTORY_SERVICE_ACCESS=7,
	LSA_AUDIT_CATEGORY_ACCOUNT_LOGON=8,
};

template <> struct x_ndr_traits_t<lsa_PolicyAuditEventType> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint16;
	static const std::array<std::pair<uint16, const char *>, 9> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_PolicyAuditEventType>(const lsa_PolicyAuditEventType &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint1632(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_PolicyAuditEventType>(lsa_PolicyAuditEventType &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint16_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_PolicyAuditEventType(v);
	return __bpos;
}


struct lsa_AuditEventsInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint32 auditing_mode;
	std::shared_ptr<std::vector<lsa_PolicyAuditPolicy>> settings; // x_ndr_unique_array_t<lsa_PolicyAuditPolicy, uint32> settings;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_AuditEventsInfo> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_DomainInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_StringLarge name;
	std::shared_ptr<dom_sid2> sid;
} ;

template <> struct x_ndr_traits_t<lsa_DomainInfo> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_PDAccountInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_String name;
} ;

template <> struct x_ndr_traits_t<lsa_PDAccountInfo> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_Role : uint32 {
	LSA_ROLE_BACKUP=2,
	LSA_ROLE_PRIMARY=3,
}/* [v1_enum] */;

template <> struct x_ndr_traits_t<lsa_Role> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 2> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_Role>(const lsa_Role &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_Role>(lsa_Role &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_Role(v);
	return __bpos;
}


struct lsa_ServerRole {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_Role role;
} ;

template <> struct x_ndr_traits_t<lsa_ServerRole> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_ReplicaSourceInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_String source;
	lsa_String account;
} ;

template <> struct x_ndr_traits_t<lsa_ReplicaSourceInfo> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_DefaultQuotaInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint32 paged_pool;
	uint32 non_paged_pool;
	uint32 min_wss;
	uint32 max_wss;
	uint32 pagefile;
	hyper unknown;
} ;

template <> struct x_ndr_traits_t<lsa_DefaultQuotaInfo> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_ModificationInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	hyper modified_id;
	NTTIME_hyper db_create_time;
} ;

template <> struct x_ndr_traits_t<lsa_ModificationInfo> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_AuditFullSetInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint8 shutdown_on_full;
} ;

template <> struct x_ndr_traits_t<lsa_AuditFullSetInfo> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_AuditFullQueryInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint8 shutdown_on_full;
	uint8 log_is_full;
} ;

template <> struct x_ndr_traits_t<lsa_AuditFullQueryInfo> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_DnsDomainInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_StringLarge name;
	lsa_StringLarge dns_domain;
	lsa_StringLarge dns_forest;
	GUID domain_guid;
	std::shared_ptr<dom_sid2> sid;
} ;

template <> struct x_ndr_traits_t<lsa_DnsDomainInfo> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_PolicyInfo : uint16 {
	LSA_POLICY_INFO_AUDIT_LOG=1,
	LSA_POLICY_INFO_AUDIT_EVENTS=2,
	LSA_POLICY_INFO_DOMAIN=3,
	LSA_POLICY_INFO_PD=4,
	LSA_POLICY_INFO_ACCOUNT_DOMAIN=5,
	LSA_POLICY_INFO_ROLE=6,
	LSA_POLICY_INFO_REPLICA=7,
	LSA_POLICY_INFO_QUOTA=8,
	LSA_POLICY_INFO_MOD=9,
	LSA_POLICY_INFO_AUDIT_FULL_SET=10,
	LSA_POLICY_INFO_AUDIT_FULL_QUERY=11,
	LSA_POLICY_INFO_DNS=12,
	LSA_POLICY_INFO_DNS_INT=13,
	LSA_POLICY_INFO_L_ACCOUNT_DOMAIN=14,
};

template <> struct x_ndr_traits_t<lsa_PolicyInfo> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint16;
	static const std::array<std::pair<uint16, const char *>, 14> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_PolicyInfo>(const lsa_PolicyInfo &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint1632(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_PolicyInfo>(lsa_PolicyInfo &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint16_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_PolicyInfo(v);
	return __bpos;
}


union lsa_PolicyInformation
{
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_PolicyInformation() { }
	~lsa_PolicyInformation() { }
	void __init(x_ndr_switch_t __level);
	void __init(x_ndr_switch_t __level, const lsa_PolicyInformation &__other);
	void __uninit(x_ndr_switch_t __level);
	lsa_AuditLogInfo audit_log;/* [case(LSA_POLICY_INFO_AUDIT_LOG)] */
	lsa_AuditEventsInfo audit_events;/* [case(LSA_POLICY_INFO_AUDIT_EVENTS)] */
	lsa_DomainInfo domain;/* [case(LSA_POLICY_INFO_DOMAIN)] */
	lsa_PDAccountInfo pd;/* [case(LSA_POLICY_INFO_PD)] */
	lsa_DomainInfo account_domain;/* [case(LSA_POLICY_INFO_ACCOUNT_DOMAIN)] */
	lsa_ServerRole role;/* [case(LSA_POLICY_INFO_ROLE)] */
	lsa_ReplicaSourceInfo replica;/* [case(LSA_POLICY_INFO_REPLICA)] */
	lsa_DefaultQuotaInfo quota;/* [case(LSA_POLICY_INFO_QUOTA)] */
	lsa_ModificationInfo mod;/* [case(LSA_POLICY_INFO_MOD)] */
	lsa_AuditFullSetInfo auditfullset;/* [case(LSA_POLICY_INFO_AUDIT_FULL_SET)] */
	lsa_AuditFullQueryInfo auditfullquery;/* [case(LSA_POLICY_INFO_AUDIT_FULL_QUERY)] */
	lsa_DnsDomainInfo dns;/* [case(LSA_POLICY_INFO_DNS)] */
	lsa_DomainInfo l_account_domain;/* [case(LSA_POLICY_INFO_L_ACCOUNT_DOMAIN)] */
} /* [switch_type(uint16)] */;

template <> struct x_ndr_traits_t<lsa_PolicyInformation> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_union;
};


struct lsa_SidPtr {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<dom_sid2> sid;
} ;

template <> struct x_ndr_traits_t<lsa_SidPtr> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_SidArray {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_SidPtr>> sids; // x_ndr_unique_array_t<lsa_SidPtr, uint32> sids;/* [size_is(num_sids)] */
} /* [public] */;

template <> struct x_ndr_traits_t<lsa_SidArray> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};
const int LSA_ENUM_TRUST_DOMAIN_MULTIPLIER = 60;

struct lsa_DomainList {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_DomainInfo>> domains; // x_ndr_unique_array_t<lsa_DomainInfo, uint32> domains;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_DomainList> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_SidType : uint16 {
	SID_NAME_USE_NONE=0,
	SID_NAME_USER=1,
	SID_NAME_DOM_GRP=2,
	SID_NAME_DOMAIN=3,
	SID_NAME_ALIAS=4,
	SID_NAME_WKN_GRP=5,
	SID_NAME_DELETED=6,
	SID_NAME_INVALID=7,
	SID_NAME_UNKNOWN=8,
	SID_NAME_COMPUTER=9,
}/* [public] */;

template <> struct x_ndr_traits_t<lsa_SidType> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint16;
	static const std::array<std::pair<uint16, const char *>, 10> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_SidType>(const lsa_SidType &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint1632(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_SidType>(lsa_SidType &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint16_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_SidType(v);
	return __bpos;
}


struct lsa_TranslatedSid {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_SidType sid_type;
	uint32 rid;
	uint32 sid_index;
} ;

template <> struct x_ndr_traits_t<lsa_TranslatedSid> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TransSidArray {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_TranslatedSid>> sids; // x_ndr_unique_array_t<lsa_TranslatedSid, uint32> sids;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_TransSidArray> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};
const int LSA_REF_DOMAIN_LIST_MULTIPLIER = 32;

struct lsa_RefDomainList {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_DomainInfo>> domains; // x_ndr_unique_array_t<lsa_DomainInfo, uint32> domains;/* [size_is(count)] */
	uint32 max_size;
} /* [public] */;

template <> struct x_ndr_traits_t<lsa_RefDomainList> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_LookupNamesLevel : uint16 {
	LSA_LOOKUP_NAMES_ALL=1,
	LSA_LOOKUP_NAMES_DOMAINS_ONLY=2,
	LSA_LOOKUP_NAMES_PRIMARY_DOMAIN_ONLY=3,
	LSA_LOOKUP_NAMES_UPLEVEL_TRUSTS_ONLY=4,
	LSA_LOOKUP_NAMES_FOREST_TRUSTS_ONLY=5,
	LSA_LOOKUP_NAMES_UPLEVEL_TRUSTS_ONLY2=6,
	LSA_LOOKUP_NAMES_RODC_REFERRAL_TO_FULL_DC=7,
}/* [public] */;

template <> struct x_ndr_traits_t<lsa_LookupNamesLevel> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint16;
	static const std::array<std::pair<uint16, const char *>, 7> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_LookupNamesLevel>(const lsa_LookupNamesLevel &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint1632(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_LookupNamesLevel>(lsa_LookupNamesLevel &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint16_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_LookupNamesLevel(v);
	return __bpos;
}


struct lsa_TranslatedName {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_SidType sid_type;
	lsa_String name;
	uint32 sid_index;
} ;

template <> struct x_ndr_traits_t<lsa_TranslatedName> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TransNameArray {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_TranslatedName>> names; // x_ndr_unique_array_t<lsa_TranslatedName, uint32> names;/* [size_is(count)] */
} /* [public] */;

template <> struct x_ndr_traits_t<lsa_TransNameArray> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_LUIDAttribute {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_LUID luid;
	uint32 attribute;
} ;

template <> struct x_ndr_traits_t<lsa_LUIDAttribute> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_DATA_BUF {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<uint8>> data; // x_ndr_unique_with_size_length_TODO<uint8, uint3264> data;/* [length_is(length), size_is(size)] */
} /* [flag(LIBNDR_PRINT_ARRAY_HEX)] */;

template <> struct x_ndr_traits_t<lsa_DATA_BUF> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_DATA_BUF2 {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<uint8>> data; // x_ndr_unique_array_t<uint8, uint32> data;/* [size_is(size)] */
} /* [flag(LIBNDR_PRINT_ARRAY_HEX)] */;

template <> struct x_ndr_traits_t<lsa_DATA_BUF2> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_TrustDomInfoEnum : uint16 {
	LSA_TRUSTED_DOMAIN_INFO_NAME=1,
	LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS=2,
	LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET=3,
	LSA_TRUSTED_DOMAIN_INFO_PASSWORD=4,
	LSA_TRUSTED_DOMAIN_INFO_BASIC=5,
	LSA_TRUSTED_DOMAIN_INFO_INFO_EX=6,
	LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO=7,
	LSA_TRUSTED_DOMAIN_INFO_FULL_INFO=8,
	LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL=9,
	LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL=10,
	LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL=11,
	LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL=12,
	LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES=13,
};

template <> struct x_ndr_traits_t<lsa_TrustDomInfoEnum> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint16;
	static const std::array<std::pair<uint16, const char *>, 13> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustDomInfoEnum>(const lsa_TrustDomInfoEnum &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint1632(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustDomInfoEnum>(lsa_TrustDomInfoEnum &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint16_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_TrustDomInfoEnum(v);
	return __bpos;
}


enum lsa_TrustDirection : uint32 {
	LSA_TRUST_DIRECTION_INBOUND=0x00000001,
	LSA_TRUST_DIRECTION_OUTBOUND=0x00000002,
}/* [bitmap32bit, public] */;

template <> struct x_ndr_traits_t<lsa_TrustDirection> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_bitmap;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 2> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustDirection>(const lsa_TrustDirection &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustDirection>(lsa_TrustDirection &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_TrustDirection(v);
	return __bpos;
}



enum lsa_TrustType : uint32 {
	LSA_TRUST_TYPE_DOWNLEVEL=0x00000001,
	LSA_TRUST_TYPE_UPLEVEL=0x00000002,
	LSA_TRUST_TYPE_MIT=0x00000003,
	LSA_TRUST_TYPE_DCE=0x00000004,
}/* [v1_enum, public] */;

template <> struct x_ndr_traits_t<lsa_TrustType> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 4> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustType>(const lsa_TrustType &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustType>(lsa_TrustType &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_TrustType(v);
	return __bpos;
}


enum lsa_TrustAttributes : uint32 {
	LSA_TRUST_ATTRIBUTE_NON_TRANSITIVE=0x00000001,
	LSA_TRUST_ATTRIBUTE_UPLEVEL_ONLY=0x00000002,
	LSA_TRUST_ATTRIBUTE_QUARANTINED_DOMAIN=0x00000004,
	LSA_TRUST_ATTRIBUTE_FOREST_TRANSITIVE=0x00000008,
	LSA_TRUST_ATTRIBUTE_CROSS_ORGANIZATION=0x00000010,
	LSA_TRUST_ATTRIBUTE_WITHIN_FOREST=0x00000020,
	LSA_TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL=0x00000040,
	LSA_TRUST_ATTRIBUTE_USES_RC4_ENCRYPTION=0x00000080,
}/* [bitmap32bit, public] */;

template <> struct x_ndr_traits_t<lsa_TrustAttributes> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_bitmap;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 8> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustAttributes>(const lsa_TrustAttributes &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustAttributes>(lsa_TrustAttributes &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_TrustAttributes(v);
	return __bpos;
}



struct lsa_TrustDomainInfoName {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_StringLarge netbios_name;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoName> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoControllers {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_StringLarge>> netbios_names; // x_ndr_unique_array_t<lsa_StringLarge, uint32> netbios_names;/* [size_is(entries)] */
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoControllers> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoPosixOffset {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint32 posix_offset;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoPosixOffset> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoPassword {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<lsa_DATA_BUF> password;
	std::shared_ptr<lsa_DATA_BUF> old_password;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoPassword> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoBasic {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_String netbios_name;
	std::shared_ptr<dom_sid2> sid;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoBasic> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoInfoEx {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_StringLarge domain_name;
	lsa_StringLarge netbios_name;
	std::shared_ptr<dom_sid2> sid;
	lsa_TrustDirection trust_direction;
	lsa_TrustType trust_type;
	lsa_TrustAttributes trust_attributes;
} /* [public] */;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoInfoEx> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_TrustAuthType : uint32 {
	TRUST_AUTH_TYPE_NONE=0,
	TRUST_AUTH_TYPE_NT4OWF=1,
	TRUST_AUTH_TYPE_CLEAR=2,
	TRUST_AUTH_TYPE_VERSION=3,
}/* [v1_enum, public] */;

template <> struct x_ndr_traits_t<lsa_TrustAuthType> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 4> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustAuthType>(const lsa_TrustAuthType &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_TrustAuthType>(lsa_TrustAuthType &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_TrustAuthType(v);
	return __bpos;
}


struct lsa_TrustDomainInfoBuffer {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	NTTIME_hyper last_update_time;
	lsa_TrustAuthType AuthType;
	lsa_DATA_BUF2 data;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoBuffer> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoAuthInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint32 incoming_count;
	std::shared_ptr<lsa_TrustDomainInfoBuffer> incoming_current_auth_info;
	std::shared_ptr<lsa_TrustDomainInfoBuffer> incoming_previous_auth_info;
	uint32 outgoing_count;
	std::shared_ptr<lsa_TrustDomainInfoBuffer> outgoing_current_auth_info;
	std::shared_ptr<lsa_TrustDomainInfoBuffer> outgoing_previous_auth_info;
} /* [public] */;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoAuthInfo> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoFullInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_TrustDomainInfoInfoEx info_ex;
	lsa_TrustDomainInfoPosixOffset posix_offset;
	lsa_TrustDomainInfoAuthInfo auth_info;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoFullInfo> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoAuthInfoInternal {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_DATA_BUF2 auth_blob;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoAuthInfoInternal> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoFullInfoInternal {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_TrustDomainInfoInfoEx info_ex;
	lsa_TrustDomainInfoPosixOffset posix_offset;
	lsa_TrustDomainInfoAuthInfoInternal auth_info;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoFullInfoInternal> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoInfoEx2Internal {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_TrustDomainInfoInfoEx info_ex;
	std::shared_ptr<std::vector<uint8>> forest_trust_data; // x_ndr_unique_array_t<uint8, uint32> forest_trust_data;/* [size_is(forest_trust_length)] */
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoInfoEx2Internal> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoFullInfo2Internal {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_TrustDomainInfoInfoEx2Internal info;
	lsa_TrustDomainInfoPosixOffset posix_offset;
	lsa_TrustDomainInfoAuthInfo auth_info;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoFullInfo2Internal> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TrustDomainInfoSupportedEncTypes {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	kerb_EncTypes enc_types;
} ;

template <> struct x_ndr_traits_t<lsa_TrustDomainInfoSupportedEncTypes> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

union lsa_TrustedDomainInfo
{
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_TrustedDomainInfo() { }
	~lsa_TrustedDomainInfo() { }
	void __init(x_ndr_switch_t __level);
	void __init(x_ndr_switch_t __level, const lsa_TrustedDomainInfo &__other);
	void __uninit(x_ndr_switch_t __level);
	lsa_TrustDomainInfoName name;/* [case(LSA_TRUSTED_DOMAIN_INFO_NAME)] */
	lsa_TrustDomainInfoControllers controllers;/* [case(LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS)] */
	lsa_TrustDomainInfoPosixOffset posix_offset;/* [case(LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET)] */
	lsa_TrustDomainInfoPassword password;/* [case(LSA_TRUSTED_DOMAIN_INFO_PASSWORD)] */
	lsa_TrustDomainInfoBasic info_basic;/* [case(LSA_TRUSTED_DOMAIN_INFO_BASIC)] */
	lsa_TrustDomainInfoInfoEx info_ex;/* [case(LSA_TRUSTED_DOMAIN_INFO_INFO_EX)] */
	lsa_TrustDomainInfoAuthInfo auth_info;/* [case(LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO)] */
	lsa_TrustDomainInfoFullInfo full_info;/* [case(LSA_TRUSTED_DOMAIN_INFO_FULL_INFO)] */
	lsa_TrustDomainInfoAuthInfoInternal auth_info_internal;/* [case(LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL)] */
	lsa_TrustDomainInfoFullInfoInternal full_info_internal;/* [case(LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL)] */
	lsa_TrustDomainInfoInfoEx2Internal info_ex2_internal;/* [case(LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL)] */
	lsa_TrustDomainInfoFullInfo2Internal full_info2_internal;/* [case(LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL)] */
	lsa_TrustDomainInfoSupportedEncTypes enc_types;/* [case(LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES)] */
} /* [switch_type(lsa_TrustDomInfoEnum)] */;

template <> struct x_ndr_traits_t<lsa_TrustedDomainInfo> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_union;
};


struct lsa_DATA_BUF_PTR {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<lsa_DATA_BUF> buf;
} ;

template <> struct x_ndr_traits_t<lsa_DATA_BUF_PTR> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_RightAttribute {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::u16string> name;/* [string, charset(UTF16)] */
} ;

template <> struct x_ndr_traits_t<lsa_RightAttribute> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_RightSet {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_StringLarge>> names; // x_ndr_unique_array_t<lsa_StringLarge, uint32> names;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_RightSet> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};
const int LSA_ENUM_TRUST_DOMAIN_EX_MULTIPLIER = 82;

struct lsa_DomainListEx {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_TrustDomainInfoInfoEx>> domains; // x_ndr_unique_array_t<lsa_TrustDomainInfoInfoEx, uint32> domains;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_DomainListEx> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_krbAuthenticationOptions : uint32 {
	LSA_POLICY_KERBEROS_VALIDATE_CLIENT=0x00000080,
}/* [bitmap32bit] */;

template <> struct x_ndr_traits_t<lsa_krbAuthenticationOptions> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_bitmap;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 1> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_krbAuthenticationOptions>(const lsa_krbAuthenticationOptions &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_krbAuthenticationOptions>(lsa_krbAuthenticationOptions &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_krbAuthenticationOptions(v);
	return __bpos;
}



struct lsa_DomainInfoKerberos {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_krbAuthenticationOptions authentication_options;
	hyper service_tkt_lifetime;
	hyper user_tkt_lifetime;
	hyper user_tkt_renewaltime;
	hyper clock_skew;
	hyper reserved;
} ;

template <> struct x_ndr_traits_t<lsa_DomainInfoKerberos> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_DomainInfoEfs {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<uint8>> efs_blob; // x_ndr_unique_array_t<uint8, uint32> efs_blob;/* [size_is(blob_size)] */
} ;

template <> struct x_ndr_traits_t<lsa_DomainInfoEfs> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_DomainInfoEnum : uint16 {
	LSA_DOMAIN_INFO_POLICY_EFS=2,
	LSA_DOMAIN_INFO_POLICY_KERBEROS=3,
};

template <> struct x_ndr_traits_t<lsa_DomainInfoEnum> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint16;
	static const std::array<std::pair<uint16, const char *>, 2> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_DomainInfoEnum>(const lsa_DomainInfoEnum &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint1632(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_DomainInfoEnum>(lsa_DomainInfoEnum &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint16_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_DomainInfoEnum(v);
	return __bpos;
}


union lsa_DomainInformationPolicy
{
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_DomainInformationPolicy() { }
	~lsa_DomainInformationPolicy() { }
	void __init(x_ndr_switch_t __level);
	void __init(x_ndr_switch_t __level, const lsa_DomainInformationPolicy &__other);
	void __uninit(x_ndr_switch_t __level);
	lsa_DomainInfoEfs efs_info;/* [case(LSA_DOMAIN_INFO_POLICY_EFS)] */
	lsa_DomainInfoKerberos kerberos_info;/* [case(LSA_DOMAIN_INFO_POLICY_KERBEROS)] */
} /* [switch_type(uint16)] */;

template <> struct x_ndr_traits_t<lsa_DomainInformationPolicy> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_union;
};


struct lsa_TranslatedName2 {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_SidType sid_type;
	lsa_String name;
	uint32 sid_index;
	uint32 unknown;
} ;

template <> struct x_ndr_traits_t<lsa_TranslatedName2> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TransNameArray2 {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_TranslatedName2>> names; // x_ndr_unique_array_t<lsa_TranslatedName2, uint32> names;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_TransNameArray2> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_LookupOptions : uint32 {
	LSA_LOOKUP_OPTION_SEARCH_ISOLATED_NAMES=0x00000000,
	LSA_LOOKUP_OPTION_SEARCH_ISOLATED_NAMES_LOCAL=0x80000000,
}/* [v1_enum] */;

template <> struct x_ndr_traits_t<lsa_LookupOptions> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 2> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_LookupOptions>(const lsa_LookupOptions &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_LookupOptions>(lsa_LookupOptions &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_LookupOptions(v);
	return __bpos;
}


enum lsa_ClientRevision : uint32 {
	LSA_CLIENT_REVISION_1=0x00000001,
	LSA_CLIENT_REVISION_2=0x00000002,
}/* [v1_enum] */;

template <> struct x_ndr_traits_t<lsa_ClientRevision> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 2> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_ClientRevision>(const lsa_ClientRevision &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_ClientRevision>(lsa_ClientRevision &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_ClientRevision(v);
	return __bpos;
}


struct lsa_TranslatedSid2 {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_SidType sid_type;
	uint32 rid;
	uint32 sid_index;
	uint32 unknown;
} ;

template <> struct x_ndr_traits_t<lsa_TranslatedSid2> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TransSidArray2 {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_TranslatedSid2>> sids; // x_ndr_unique_array_t<lsa_TranslatedSid2, uint32> sids;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_TransSidArray2> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TranslatedSid3 {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_SidType sid_type;
	std::shared_ptr<dom_sid2> sid;
	uint32 sid_index;
	uint32 flags;
} ;

template <> struct x_ndr_traits_t<lsa_TranslatedSid3> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_TransSidArray3 {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<lsa_TranslatedSid3>> sids; // x_ndr_unique_array_t<lsa_TranslatedSid3, uint32> sids;/* [size_is(count)] */
} ;

template <> struct x_ndr_traits_t<lsa_TransSidArray3> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

enum lsa_ForestTrustRecordFlags : uint32 {
	LSA_TLN_DISABLED_NEW=0x00000001,
	LSA_TLN_DISABLED_ADMIN=0x00000002,
	LSA_TLN_DISABLED_CONFLICT=0x00000004,
	LSA_SID_DISABLED_ADMIN=0x00000001,
	LSA_SID_DISABLED_CONFLICT=0x00000002,
	LSA_NB_DISABLED_ADMIN=0x00000004,
	LSA_NB_DISABLED_CONFLICT=0x00000008,
}/* [bitmap32bit, public] */;

template <> struct x_ndr_traits_t<lsa_ForestTrustRecordFlags> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_bitmap;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 7> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_ForestTrustRecordFlags>(const lsa_ForestTrustRecordFlags &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_ForestTrustRecordFlags>(lsa_ForestTrustRecordFlags &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_ForestTrustRecordFlags(v);
	return __bpos;
}


const uint32 LSA_TLN_DISABLED_MASK = (LSA_TLN_DISABLED_NEW|LSA_TLN_DISABLED_ADMIN|LSA_TLN_DISABLED_CONFLICT);
const uint32 LSA_SID_DISABLED_MASK = (LSA_SID_DISABLED_ADMIN|LSA_SID_DISABLED_CONFLICT);
const uint32 LSA_NB_DISABLED_MASK = (LSA_NB_DISABLED_ADMIN|LSA_NB_DISABLED_CONFLICT);

enum lsa_ForestTrustRecordType : uint16 {
	LSA_FOREST_TRUST_TOP_LEVEL_NAME=0,
	LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX=1,
	LSA_FOREST_TRUST_DOMAIN_INFO=2,
	LSA_FOREST_TRUST_RECORD_TYPE_LAST=3,
};

template <> struct x_ndr_traits_t<lsa_ForestTrustRecordType> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint16;
	static const std::array<std::pair<uint16, const char *>, 4> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_ForestTrustRecordType>(const lsa_ForestTrustRecordType &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint1632(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_ForestTrustRecordType>(lsa_ForestTrustRecordType &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint16_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_ForestTrustRecordType(v);
	return __bpos;
}


struct lsa_ForestTrustBinaryData {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<std::vector<uint8>> data; // x_ndr_unique_array_t<uint8, uint3264> data;/* [size_is(length)] */
} ;

template <> struct x_ndr_traits_t<lsa_ForestTrustBinaryData> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};

struct lsa_ForestTrustDomainInfo {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	std::shared_ptr<dom_sid2> domain_sid;
	lsa_StringLarge dns_domain_name;
	lsa_StringLarge netbios_domain_name;
} ;

template <> struct x_ndr_traits_t<lsa_ForestTrustDomainInfo> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};
#if 0
union lsa_ForestTrustData
{
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_ForestTrustData() { }
	~lsa_ForestTrustData() { }
	void __init(x_ndr_switch_t __level);
	void __init(x_ndr_switch_t __level, const lsa_ForestTrustData &__other);
	void __uninit(x_ndr_switch_t __level);
	lsa_StringLarge top_level_name;/* [case(LSA_FOREST_TRUST_TOP_LEVEL_NAME)] */
	lsa_StringLarge top_level_name_ex;/* [case(LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX)] */
	lsa_ForestTrustDomainInfo domain_info;/* [case(LSA_FOREST_TRUST_DOMAIN_INFO)] */
	lsa_ForestTrustBinaryData data;/* [default] */
} /* [switch_type(lsa_ForestTrustRecordType)] */;

template <> struct x_ndr_traits_t<lsa_ForestTrustData> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_union;
};


struct lsa_ForestTrustRecord {
	lsa_ForestTrustRecord();
	~lsa_ForestTrustRecord();
	lsa_ForestTrustRecord(const lsa_ForestTrustRecord& other);
	lsa_ForestTrustRecord &operator=(const lsa_ForestTrustRecord& other);
	void set_type(lsa_ForestTrustRecordType v);
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	lsa_ForestTrustRecordFlags flags;
	lsa_ForestTrustRecordType type;
	NTTIME_hyper time;
	lsa_ForestTrustData forest_trust_data;/* [switch_is(type)] */
} ;

template <> struct x_ndr_traits_t<lsa_ForestTrustRecord> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};
#endif
enum lsa_ForestTrustCollisionRecordType : uint32 {
	LSA_FOREST_TRUST_COLLISION_TDO=0,
	LSA_FOREST_TRUST_COLLISION_XREF=1,
	LSA_FOREST_TRUST_COLLISION_OTHER=2,
}/* [v1_enum] */;

template <> struct x_ndr_traits_t<lsa_ForestTrustCollisionRecordType> {
	using has_buffers = std::false_type;
	using ndr_type = x_ndr_type_enum;
	using ndr_base_type = uint32;
	static const std::array<std::pair<uint32, const char *>, 3> value_name_map;
};

template <> inline x_ndr_off_t x_ndr_scalars<lsa_ForestTrustCollisionRecordType>(const lsa_ForestTrustCollisionRecordType &__val, x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	return x_ndr_push_uint32(__val, __ndr, __bpos, __epos, __flags);
}

template <> inline x_ndr_off_t x_ndr_scalars<lsa_ForestTrustCollisionRecordType>(lsa_ForestTrustCollisionRecordType &__val, x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	uint32_t v;
	X_NDR_SCALARS(v, __ndr, __bpos, __epos, __flags, __level);
	__val = lsa_ForestTrustCollisionRecordType(v);
	return __bpos;
}


struct lsa_ForestTrustCollisionRecord {
	x_ndr_off_t ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const;
	x_ndr_off_t ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	x_ndr_off_t ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level);
	void ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const;
	uint32 index;
	lsa_ForestTrustCollisionRecordType type;
	lsa_ForestTrustRecordFlags flags;
	lsa_String name;
} /* [public] */;

template <> struct x_ndr_traits_t<lsa_ForestTrustCollisionRecord> {
	using has_buffers = std::true_type;
	using ndr_type = x_ndr_type_struct;
};
const int LSA_CLIENT_REVISION_NO_DNS = 0x00000001;
const int LSA_CLIENT_REVISION_DNS = 0x00000002;
const int LSA_LOOKUP_OPTIONS_NO_ISOLATED = 0x80000000;
// }
#endif /* _HEADER_lsarpc */
} /* namespace idl */

#endif /* _PIDL_HEADER_lsarpc */

