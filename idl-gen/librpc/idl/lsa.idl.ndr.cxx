/* ndr parser auto-generated by pidl */
	
#include "include/librpc/lsa.hxx"
#include "include/librpc/ndr_smb.hxx"


namespace idl {

// namespace lsarpc {

struct double_sizer
{
	template <typename T>
	T operator()(T t) const { return t * 2; }
};

x_ndr_off_t lsa_String::ndr_scalars(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(string, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_String::ndr_buffers(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(string, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE,
			uint16, __pos_length, double_sizer(),
			uint16, __pos_size, double_sizer());
	return __bpos;
}

x_ndr_off_t lsa_String::ndr_scalars(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(string, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_String::ndr_buffers(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(string, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE,
			uint16, __pos_length, double_sizer(),
			uint16, __pos_size, double_sizer());
	return __bpos;
}

void lsa_String::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	x_ndr_ostr_u16string(*string, __ndr, __flags, __level);
}


x_ndr_off_t lsa_BinaryString::ndr_scalars(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(array, __ndr, __bpos, __epos, __flags, __level);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_BinaryString::ndr_buffers(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(array, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE,
			uint16, __pos_length, double_sizer(), uint16, __pos_size, double_sizer());
	return __bpos;
}

x_ndr_off_t lsa_BinaryString::ndr_scalars(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_TODO;
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(array, __ndr, __bpos, __epos, __flags, __level);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_BinaryString::ndr_buffers(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_TODO;
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(array, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE,
			uint16, __pos_length, double_sizer(), uint16, __pos_size, double_sizer());
	return __bpos;
}

void lsa_BinaryString::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	x_ndr_ostr_u16string(*array, __ndr, __flags, __level);
}


x_ndr_off_t lsa_StringLarge::ndr_scalars(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(string, __ndr, __bpos, __epos, __flags, __level);
#if 0
	uint16_t length = val ? val->val.size() * 2 : 0;
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, __level);
	X_NDR_SCALARS(uint16_t(length + 2), __ndr, __bpos, __epos, __flags, __level);
	uint3264 ptr{0};
	if (val) {
		ptr.val = __ndr.next_ptr();
	}
	X_NDR_SCALARS(ptr, __ndr, __bpos, __epos, __flags, __level);
#endif
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_StringLarge::ndr_buffers(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	if (string) {
		X_TODO;
#if 0
		uint32_t size = string->size();
		X_NDR_SCALARS((uint3264{size + 1}), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(uint3264{0}, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(uint3264{size}, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(*string, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(uint16(2 * size), __ndr, __pos_length, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(uint16(2 * size + 2), __ndr, __pos_size, __epos, __flags, X_NDR_SWITCH_NONE);
#endif
	}
	return __bpos;
}

x_ndr_off_t lsa_StringLarge::ndr_scalars(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(string, __ndr, __bpos, __epos, __flags, __level);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_StringLarge::ndr_buffers(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	if (string) {
		uint3264 size, offset, length;
		X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		if (offset.val != 0) {
			return -NDR_ERR_ARRAY_SIZE;
		}
		if (length.val > size.val) {
			return -NDR_ERR_ARRAY_SIZE;
		}

		X_TODO; // pull u16string with length
		// epos = X_NDR_CHECK_POS(bpos + length.val, bpos, epos);
		// bpos = x_ndr_puller_t<T, typename x_ndr_traits_t<T>::has_buffers>()(*t, ndr,
		//		bpos, epos, flags, level);

		uint16 tmp_length, tmp_size;
		X_NDR_SCALARS(tmp_length, __ndr, __pos_length, __epos, __flags, X_NDR_SWITCH_NONE);
		if (tmp_length != 2 * length.val) {
			return -NDR_ERR_ARRAY_SIZE;
		}
		X_NDR_SCALARS(tmp_size, __ndr, __pos_size, __epos, __flags, X_NDR_SWITCH_NONE);
		if (tmp_size != 2 * size.val) {
			return -NDR_ERR_ARRAY_SIZE;
		}
	}
	return __bpos;
}

void lsa_StringLarge::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	x_ndr_ostr_u16string(*string, __ndr, __flags, __level);
}


x_ndr_off_t lsa_AsciiStringLarge::ndr_scalars(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(string, __ndr, __bpos, __epos, __flags, __level);
#if 0
	uint16_t length = val ? val->val.size() * 2 : 0;
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, __level);
	X_NDR_SCALARS(uint16_t(length + 2), __ndr, __bpos, __epos, __flags, __level);
	uint3264 ptr{0};
	if (val) {
		ptr.val = __ndr.next_ptr();
	}
	X_NDR_SCALARS(ptr, __ndr, __bpos, __epos, __flags, __level);
#endif
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_AsciiStringLarge::ndr_buffers(x_ndr_push_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	if (string) {
		X_TODO;
#if 0
		uint32_t size = string->size();
		X_NDR_SCALARS((uint3264{size + 1}), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(uint3264{0}, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(uint3264{size}, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(*string, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(uint16(2 * size), __ndr, __pos_length, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(uint16(2 * size + 2), __ndr, __pos_size, __epos, __flags, X_NDR_SWITCH_NONE);
#endif
	}
	return __bpos;
}

x_ndr_off_t lsa_AsciiStringLarge::ndr_scalars(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_TODO;
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(string, __ndr, __bpos, __epos, __flags, __level);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_AsciiStringLarge::ndr_buffers(x_ndr_pull_t &__ndr,
		x_ndr_off_t __bpos, x_ndr_off_t __epos,
		uint32_t __flags, x_ndr_switch_t __level)
{
	X_TODO;
	X_ASSERT(__level == X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	if (string) {
		uint3264 size, offset, length;
		X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		if (offset.val != 0) {
			return -NDR_ERR_ARRAY_SIZE;
		}
		if (length.val > size.val) {
			return -NDR_ERR_ARRAY_SIZE;
		}

		X_TODO; // pull u16string with length
		// epos = X_NDR_CHECK_POS(bpos + length.val, bpos, epos);
		// bpos = x_ndr_puller_t<T, typename x_ndr_traits_t<T>::has_buffers>()(*t, ndr,
		//		bpos, epos, flags, level);

		uint16 tmp_length, tmp_size;
		X_NDR_SCALARS(tmp_length, __ndr, __pos_length, __epos, __flags, X_NDR_SWITCH_NONE);
		if (tmp_length != 2 * length.val) {
			return -NDR_ERR_ARRAY_SIZE;
		}
		X_NDR_SCALARS(tmp_size, __ndr, __pos_size, __epos, __flags, X_NDR_SWITCH_NONE);
		if (tmp_size != 2 * size.val) {
			return -NDR_ERR_ARRAY_SIZE;
		}
	}
	return __bpos;
}

void lsa_AsciiStringLarge::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	x_ndr_ostr_u16string(*string, __ndr, __flags, __level);
}



x_ndr_off_t lsa_LUID::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(low, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(high, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_LUID::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(low, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(high, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_LUID::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(low, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(high, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_PrivEntry::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(luid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_PrivEntry::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_PrivEntry::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(luid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_PrivEntry::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_PrivEntry::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(luid, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_PrivArray::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(privs, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_PrivArray::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(privs, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_PrivArray::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(privs, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_PrivArray::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(privs, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_PrivArray::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(privs, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_QosInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint3264 len;
	X_NDR_SCALARS(len, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(impersonation_level, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(context_mode, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(effective_only, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_QosInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint3264 len;
	X_NDR_SCALARS(len, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(impersonation_level, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(context_mode, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(effective_only, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_QosInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(impersonation_level, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(context_mode, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(effective_only, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_ObjectAttribute::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(uint3264(0x18), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(root_dir, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(object_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sec_desc, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sec_qos, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ObjectAttribute::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(root_dir, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(object_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sec_desc, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sec_qos, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_ObjectAttribute::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint3264 len;
	X_NDR_SCALARS(len, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(root_dir, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(object_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sec_desc, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sec_qos, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ObjectAttribute::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(root_dir, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(object_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sec_desc, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sec_qos, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_ObjectAttribute::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(root_dir, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(object_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sec_desc, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sec_qos, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 13> x_ndr_traits_t<lsa_PolicyAccessMask>::value_name_map = { {
		{ LSA_POLICY_VIEW_LOCAL_INFORMATION, "LSA_POLICY_VIEW_LOCAL_INFORMATION" },
		{ LSA_POLICY_VIEW_AUDIT_INFORMATION, "LSA_POLICY_VIEW_AUDIT_INFORMATION" },
		{ LSA_POLICY_GET_PRIVATE_INFORMATION, "LSA_POLICY_GET_PRIVATE_INFORMATION" },
		{ LSA_POLICY_TRUST_ADMIN, "LSA_POLICY_TRUST_ADMIN" },
		{ LSA_POLICY_CREATE_ACCOUNT, "LSA_POLICY_CREATE_ACCOUNT" },
		{ LSA_POLICY_CREATE_SECRET, "LSA_POLICY_CREATE_SECRET" },
		{ LSA_POLICY_CREATE_PRIVILEGE, "LSA_POLICY_CREATE_PRIVILEGE" },
		{ LSA_POLICY_SET_DEFAULT_QUOTA_LIMITS, "LSA_POLICY_SET_DEFAULT_QUOTA_LIMITS" },
		{ LSA_POLICY_SET_AUDIT_REQUIREMENTS, "LSA_POLICY_SET_AUDIT_REQUIREMENTS" },
		{ LSA_POLICY_AUDIT_LOG_ADMIN, "LSA_POLICY_AUDIT_LOG_ADMIN" },
		{ LSA_POLICY_SERVER_ADMIN, "LSA_POLICY_SERVER_ADMIN" },
		{ LSA_POLICY_LOOKUP_NAMES, "LSA_POLICY_LOOKUP_NAMES" },
		{ LSA_POLICY_NOTIFICATION, "LSA_POLICY_NOTIFICATION" },
} };
const std::array<std::pair<uint32, const char *>, 4> x_ndr_traits_t<lsa_AccountAccessMask>::value_name_map = { {
		{ LSA_ACCOUNT_VIEW, "LSA_ACCOUNT_VIEW" },
		{ LSA_ACCOUNT_ADJUST_PRIVILEGES, "LSA_ACCOUNT_ADJUST_PRIVILEGES" },
		{ LSA_ACCOUNT_ADJUST_QUOTAS, "LSA_ACCOUNT_ADJUST_QUOTAS" },
		{ LSA_ACCOUNT_ADJUST_SYSTEM_ACCESS, "LSA_ACCOUNT_ADJUST_SYSTEM_ACCESS" },
} };
const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<lsa_SecretAccessMask>::value_name_map = { {
		{ LSA_SECRET_SET_VALUE, "LSA_SECRET_SET_VALUE" },
		{ LSA_SECRET_QUERY_VALUE, "LSA_SECRET_QUERY_VALUE" },
} };
const std::array<std::pair<uint32, const char *>, 7> x_ndr_traits_t<lsa_TrustedAccessMask>::value_name_map = { {
		{ LSA_TRUSTED_QUERY_DOMAIN_NAME, "LSA_TRUSTED_QUERY_DOMAIN_NAME" },
		{ LSA_TRUSTED_QUERY_CONTROLLERS, "LSA_TRUSTED_QUERY_CONTROLLERS" },
		{ LSA_TRUSTED_SET_CONTROLLERS, "LSA_TRUSTED_SET_CONTROLLERS" },
		{ LSA_TRUSTED_QUERY_POSIX, "LSA_TRUSTED_QUERY_POSIX" },
		{ LSA_TRUSTED_SET_POSIX, "LSA_TRUSTED_SET_POSIX" },
		{ LSA_TRUSTED_SET_AUTH, "LSA_TRUSTED_SET_AUTH" },
		{ LSA_TRUSTED_QUERY_AUTH, "LSA_TRUSTED_QUERY_AUTH" },
} };

x_ndr_off_t lsa_AuditLogInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(percent_full, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(maximum_log_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(retention_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(shutdown_in_progress, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(time_to_shutdown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(next_audit_record, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_AuditLogInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(percent_full, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(maximum_log_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(retention_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(shutdown_in_progress, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(time_to_shutdown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(next_audit_record, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_AuditLogInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(percent_full, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(maximum_log_size, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(retention_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(shutdown_in_progress, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(time_to_shutdown, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(next_audit_record, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 5> x_ndr_traits_t<lsa_PolicyAuditPolicy>::value_name_map = { {
	{ LSA_AUDIT_POLICY_NONE, "LSA_AUDIT_POLICY_NONE" },
	{ LSA_AUDIT_POLICY_SUCCESS, "LSA_AUDIT_POLICY_SUCCESS" },
	{ LSA_AUDIT_POLICY_FAILURE, "LSA_AUDIT_POLICY_FAILURE" },
	{ LSA_AUDIT_POLICY_ALL, "LSA_AUDIT_POLICY_ALL" },
	{ LSA_AUDIT_POLICY_CLEAR, "LSA_AUDIT_POLICY_CLEAR" },
} };


const std::array<std::pair<uint16, const char *>, 9> x_ndr_traits_t<lsa_PolicyAuditEventType>::value_name_map = { {
	{ LSA_AUDIT_CATEGORY_SYSTEM, "LSA_AUDIT_CATEGORY_SYSTEM" },
	{ LSA_AUDIT_CATEGORY_LOGON, "LSA_AUDIT_CATEGORY_LOGON" },
	{ LSA_AUDIT_CATEGORY_FILE_AND_OBJECT_ACCESS, "LSA_AUDIT_CATEGORY_FILE_AND_OBJECT_ACCESS" },
	{ LSA_AUDIT_CATEGORY_USE_OF_USER_RIGHTS, "LSA_AUDIT_CATEGORY_USE_OF_USER_RIGHTS" },
	{ LSA_AUDIT_CATEGORY_PROCCESS_TRACKING, "LSA_AUDIT_CATEGORY_PROCCESS_TRACKING" },
	{ LSA_AUDIT_CATEGORY_SECURITY_POLICY_CHANGES, "LSA_AUDIT_CATEGORY_SECURITY_POLICY_CHANGES" },
	{ LSA_AUDIT_CATEGORY_ACCOUNT_MANAGEMENT, "LSA_AUDIT_CATEGORY_ACCOUNT_MANAGEMENT" },
	{ LSA_AUDIT_CATEGORY_DIRECTORY_SERVICE_ACCESS, "LSA_AUDIT_CATEGORY_DIRECTORY_SERVICE_ACCESS" },
	{ LSA_AUDIT_CATEGORY_ACCOUNT_LOGON, "LSA_AUDIT_CATEGORY_ACCOUNT_LOGON" },
} };



x_ndr_off_t lsa_AuditEventsInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(auditing_mode, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(settings, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags)
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_AuditEventsInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(settings, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_AuditEventsInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(auditing_mode, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(settings, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags)
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_AuditEventsInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(settings, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_AuditEventsInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(auditing_mode, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(settings, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_DomainInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DomainInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_DomainInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DomainInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_DomainInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_PDAccountInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_PDAccountInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_PDAccountInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_PDAccountInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_PDAccountInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<lsa_Role>::value_name_map = { {
	{ LSA_ROLE_BACKUP, "LSA_ROLE_BACKUP" },
	{ LSA_ROLE_PRIMARY, "LSA_ROLE_PRIMARY" },
} };



x_ndr_off_t lsa_ServerRole::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(role, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_ServerRole::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(role, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_ServerRole::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(role, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_ReplicaSourceInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(source, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ReplicaSourceInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(source, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_ReplicaSourceInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(source, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ReplicaSourceInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(source, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_ReplicaSourceInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(source, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_DefaultQuotaInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(paged_pool, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(non_paged_pool, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(min_wss, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_wss, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pagefile, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_DefaultQuotaInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(paged_pool, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(non_paged_pool, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(min_wss, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_wss, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pagefile, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_DefaultQuotaInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(paged_pool, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(non_paged_pool, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(min_wss, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(max_wss, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pagefile, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_ModificationInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(modified_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(db_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_ModificationInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(modified_id, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(db_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_ModificationInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(modified_id, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(db_create_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_AuditFullSetInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(shutdown_on_full, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_AuditFullSetInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(shutdown_on_full, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_AuditFullSetInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(shutdown_on_full, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_AuditFullQueryInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(shutdown_on_full, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(log_is_full, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_AuditFullQueryInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(shutdown_on_full, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(log_is_full, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_AuditFullQueryInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(shutdown_on_full, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(log_is_full, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_DnsDomainInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_forest, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_guid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DnsDomainInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_forest, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_DnsDomainInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_forest, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_guid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DnsDomainInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_forest, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_DnsDomainInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_domain, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_forest, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_guid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 14> x_ndr_traits_t<lsa_PolicyInfo>::value_name_map = { {
	{ LSA_POLICY_INFO_AUDIT_LOG, "LSA_POLICY_INFO_AUDIT_LOG" },
	{ LSA_POLICY_INFO_AUDIT_EVENTS, "LSA_POLICY_INFO_AUDIT_EVENTS" },
	{ LSA_POLICY_INFO_DOMAIN, "LSA_POLICY_INFO_DOMAIN" },
	{ LSA_POLICY_INFO_PD, "LSA_POLICY_INFO_PD" },
	{ LSA_POLICY_INFO_ACCOUNT_DOMAIN, "LSA_POLICY_INFO_ACCOUNT_DOMAIN" },
	{ LSA_POLICY_INFO_ROLE, "LSA_POLICY_INFO_ROLE" },
	{ LSA_POLICY_INFO_REPLICA, "LSA_POLICY_INFO_REPLICA" },
	{ LSA_POLICY_INFO_QUOTA, "LSA_POLICY_INFO_QUOTA" },
	{ LSA_POLICY_INFO_MOD, "LSA_POLICY_INFO_MOD" },
	{ LSA_POLICY_INFO_AUDIT_FULL_SET, "LSA_POLICY_INFO_AUDIT_FULL_SET" },
	{ LSA_POLICY_INFO_AUDIT_FULL_QUERY, "LSA_POLICY_INFO_AUDIT_FULL_QUERY" },
	{ LSA_POLICY_INFO_DNS, "LSA_POLICY_INFO_DNS" },
	{ LSA_POLICY_INFO_DNS_INT, "LSA_POLICY_INFO_DNS_INT" },
	{ LSA_POLICY_INFO_L_ACCOUNT_DOMAIN, "LSA_POLICY_INFO_L_ACCOUNT_DOMAIN" },
} };



void lsa_PolicyInformation::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case LSA_POLICY_INFO_AUDIT_LOG: construct(audit_log); break;
		case LSA_POLICY_INFO_AUDIT_EVENTS: construct(audit_events); break;
		case LSA_POLICY_INFO_DOMAIN: construct(domain); break;
		case LSA_POLICY_INFO_PD: construct(pd); break;
		case LSA_POLICY_INFO_ACCOUNT_DOMAIN: construct(account_domain); break;
		case LSA_POLICY_INFO_ROLE: construct(role); break;
		case LSA_POLICY_INFO_REPLICA: construct(replica); break;
		case LSA_POLICY_INFO_QUOTA: construct(quota); break;
		case LSA_POLICY_INFO_MOD: construct(mod); break;
		case LSA_POLICY_INFO_AUDIT_FULL_SET: construct(auditfullset); break;
		case LSA_POLICY_INFO_AUDIT_FULL_QUERY: construct(auditfullquery); break;
		case LSA_POLICY_INFO_DNS: construct(dns); break;
		case LSA_POLICY_INFO_DNS_INT: construct(dns); break;
		case LSA_POLICY_INFO_L_ACCOUNT_DOMAIN: construct(l_account_domain); break;
	}
}

void lsa_PolicyInformation::__init(x_ndr_switch_t __level, const lsa_PolicyInformation &other)
{
	switch (__level) {
		case LSA_POLICY_INFO_AUDIT_LOG: construct(audit_log, other.audit_log); break;
		case LSA_POLICY_INFO_AUDIT_EVENTS: construct(audit_events, other.audit_events); break;
		case LSA_POLICY_INFO_DOMAIN: construct(domain, other.domain); break;
		case LSA_POLICY_INFO_PD: construct(pd, other.pd); break;
		case LSA_POLICY_INFO_ACCOUNT_DOMAIN: construct(account_domain, other.account_domain); break;
		case LSA_POLICY_INFO_ROLE: construct(role, other.role); break;
		case LSA_POLICY_INFO_REPLICA: construct(replica, other.replica); break;
		case LSA_POLICY_INFO_QUOTA: construct(quota, other.quota); break;
		case LSA_POLICY_INFO_MOD: construct(mod, other.mod); break;
		case LSA_POLICY_INFO_AUDIT_FULL_SET: construct(auditfullset, other.auditfullset); break;
		case LSA_POLICY_INFO_AUDIT_FULL_QUERY: construct(auditfullquery, other.auditfullquery); break;
		case LSA_POLICY_INFO_DNS: construct(dns, other.dns); break;
		case LSA_POLICY_INFO_DNS_INT: construct(dns, other.dns); break;
		case LSA_POLICY_INFO_L_ACCOUNT_DOMAIN: construct(l_account_domain, other.l_account_domain); break;
	}
}

void lsa_PolicyInformation::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case LSA_POLICY_INFO_AUDIT_LOG: destruct(audit_log); break;
		case LSA_POLICY_INFO_AUDIT_EVENTS: destruct(audit_events); break;
		case LSA_POLICY_INFO_DOMAIN: destruct(domain); break;
		case LSA_POLICY_INFO_PD: destruct(pd); break;
		case LSA_POLICY_INFO_ACCOUNT_DOMAIN: destruct(account_domain); break;
		case LSA_POLICY_INFO_ROLE: destruct(role); break;
		case LSA_POLICY_INFO_REPLICA: destruct(replica); break;
		case LSA_POLICY_INFO_QUOTA: destruct(quota); break;
		case LSA_POLICY_INFO_MOD: destruct(mod); break;
		case LSA_POLICY_INFO_AUDIT_FULL_SET: destruct(auditfullset); break;
		case LSA_POLICY_INFO_AUDIT_FULL_QUERY: destruct(auditfullquery); break;
		case LSA_POLICY_INFO_DNS: destruct(dns); break;
		case LSA_POLICY_INFO_DNS_INT: destruct(dns); break;
		case LSA_POLICY_INFO_L_ACCOUNT_DOMAIN: destruct(l_account_domain); break;
	}
}

x_ndr_off_t lsa_PolicyInformation::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(8, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LSA_POLICY_INFO_AUDIT_LOG: {
			X_NDR_SCALARS(audit_log, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_EVENTS: {
			X_NDR_SCALARS(audit_events, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DOMAIN: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_PD: {
			X_NDR_SCALARS(pd, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_ACCOUNT_DOMAIN: {
			X_NDR_SCALARS(account_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_ROLE: {
			X_NDR_SCALARS(role, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_REPLICA: {
			X_NDR_SCALARS(replica, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_QUOTA: {
			X_NDR_SCALARS(quota, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_MOD: {
			X_NDR_SCALARS(mod, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_FULL_SET: {
			X_NDR_SCALARS(auditfullset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_FULL_QUERY: {
			X_NDR_SCALARS(auditfullquery, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DNS: {
			X_NDR_SCALARS(dns, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DNS_INT: {
			X_NDR_SCALARS(dns, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_L_ACCOUNT_DOMAIN: {
			X_NDR_SCALARS(l_account_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t lsa_PolicyInformation::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(8, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LSA_POLICY_INFO_AUDIT_LOG: {
			X_NDR_SCALARS(audit_log, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_EVENTS: {
			X_NDR_SCALARS(audit_events, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DOMAIN: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_PD: {
			X_NDR_SCALARS(pd, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_ACCOUNT_DOMAIN: {
			X_NDR_SCALARS(account_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_ROLE: {
			X_NDR_SCALARS(role, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_REPLICA: {
			X_NDR_SCALARS(replica, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_QUOTA: {
			X_NDR_SCALARS(quota, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_MOD: {
			X_NDR_SCALARS(mod, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_FULL_SET: {
			X_NDR_SCALARS(auditfullset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_FULL_QUERY: {
			X_NDR_SCALARS(auditfullquery, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DNS: {
			X_NDR_SCALARS(dns, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DNS_INT: {
			X_NDR_SCALARS(dns, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_L_ACCOUNT_DOMAIN: {
			X_NDR_SCALARS(l_account_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void lsa_PolicyInformation::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case LSA_POLICY_INFO_AUDIT_LOG: {
			X_NDR_OSTR(audit_log, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_EVENTS: {
			X_NDR_OSTR(audit_events, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DOMAIN: {
			X_NDR_OSTR(domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_PD: {
			X_NDR_OSTR(pd, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_ACCOUNT_DOMAIN: {
			X_NDR_OSTR(account_domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_ROLE: {
			X_NDR_OSTR(role, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_REPLICA: {
			X_NDR_OSTR(replica, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_QUOTA: {
			X_NDR_OSTR(quota, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_MOD: {
			X_NDR_OSTR(mod, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_FULL_SET: {
			X_NDR_OSTR(auditfullset, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_AUDIT_FULL_QUERY: {
			X_NDR_OSTR(auditfullquery, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DNS: {
			X_NDR_OSTR(dns, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_DNS_INT: {
			X_NDR_OSTR(dns, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_POLICY_INFO_L_ACCOUNT_DOMAIN: {
			X_NDR_OSTR(l_account_domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t lsa_SidPtr::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_SidPtr::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_SidPtr::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_SidPtr::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_SidPtr::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_SidArray::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_SidArray::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_num_sids = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_num_sids, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_SidArray::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_SidArray::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_num_sids = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_num_sids, x_ndr_I_t());
	return __bpos;
}

void lsa_SidArray::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sids, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_DomainList::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DomainList::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_DomainList::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DomainList::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_DomainList::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domains, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 10> x_ndr_traits_t<lsa_SidType>::value_name_map = { {
	{ SID_NAME_USE_NONE, "SID_NAME_USE_NONE" },
	{ SID_NAME_USER, "SID_NAME_USER" },
	{ SID_NAME_DOM_GRP, "SID_NAME_DOM_GRP" },
	{ SID_NAME_DOMAIN, "SID_NAME_DOMAIN" },
	{ SID_NAME_ALIAS, "SID_NAME_ALIAS" },
	{ SID_NAME_WKN_GRP, "SID_NAME_WKN_GRP" },
	{ SID_NAME_DELETED, "SID_NAME_DELETED" },
	{ SID_NAME_INVALID, "SID_NAME_INVALID" },
	{ SID_NAME_UNKNOWN, "SID_NAME_UNKNOWN" },
	{ SID_NAME_COMPUTER, "SID_NAME_COMPUTER" },
} };



x_ndr_off_t lsa_TranslatedSid::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_TranslatedSid::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_TranslatedSid::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sid_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid_index, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TransSidArray::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_TransSidArray::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sids, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_RefDomainList::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_RefDomainList::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_RefDomainList::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_RefDomainList::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_RefDomainList::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domains, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(max_size, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 7> x_ndr_traits_t<lsa_LookupNamesLevel>::value_name_map = { {
	{ LSA_LOOKUP_NAMES_ALL, "LSA_LOOKUP_NAMES_ALL" },
	{ LSA_LOOKUP_NAMES_DOMAINS_ONLY, "LSA_LOOKUP_NAMES_DOMAINS_ONLY" },
	{ LSA_LOOKUP_NAMES_PRIMARY_DOMAIN_ONLY, "LSA_LOOKUP_NAMES_PRIMARY_DOMAIN_ONLY" },
	{ LSA_LOOKUP_NAMES_UPLEVEL_TRUSTS_ONLY, "LSA_LOOKUP_NAMES_UPLEVEL_TRUSTS_ONLY" },
	{ LSA_LOOKUP_NAMES_FOREST_TRUSTS_ONLY, "LSA_LOOKUP_NAMES_FOREST_TRUSTS_ONLY" },
	{ LSA_LOOKUP_NAMES_UPLEVEL_TRUSTS_ONLY2, "LSA_LOOKUP_NAMES_UPLEVEL_TRUSTS_ONLY2" },
	{ LSA_LOOKUP_NAMES_RODC_REFERRAL_TO_FULL_DC, "LSA_LOOKUP_NAMES_RODC_REFERRAL_TO_FULL_DC" },
} };



x_ndr_off_t lsa_TranslatedName::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TranslatedName::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_TranslatedName::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TranslatedName::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TranslatedName::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sid_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid_index, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TransNameArray::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransNameArray::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_TransNameArray::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransNameArray::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_TransNameArray::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(names, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_LUIDAttribute::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(luid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attribute, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_LUIDAttribute::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(luid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attribute, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_LUIDAttribute::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(luid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(attribute, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_DATA_BUF::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint3264, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint3264, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint3264, __pos_length, x_ndr_I_t(), uint3264, __pos_size, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint3264, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint3264, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_length = __ndr.load_pos();
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint3264, __pos_length, x_ndr_I_t(), uint3264, __pos_size, x_ndr_I_t());
	return __bpos;
}

void lsa_DATA_BUF::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_DATA_BUF2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_size, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_size, x_ndr_I_t());
	return __bpos;
}

void lsa_DATA_BUF2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 13> x_ndr_traits_t<lsa_TrustDomInfoEnum>::value_name_map = { {
	{ LSA_TRUSTED_DOMAIN_INFO_NAME, "LSA_TRUSTED_DOMAIN_INFO_NAME" },
	{ LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS, "LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS" },
	{ LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET, "LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET" },
	{ LSA_TRUSTED_DOMAIN_INFO_PASSWORD, "LSA_TRUSTED_DOMAIN_INFO_PASSWORD" },
	{ LSA_TRUSTED_DOMAIN_INFO_BASIC, "LSA_TRUSTED_DOMAIN_INFO_BASIC" },
	{ LSA_TRUSTED_DOMAIN_INFO_INFO_EX, "LSA_TRUSTED_DOMAIN_INFO_INFO_EX" },
	{ LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO, "LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO" },
	{ LSA_TRUSTED_DOMAIN_INFO_FULL_INFO, "LSA_TRUSTED_DOMAIN_INFO_FULL_INFO" },
	{ LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL, "LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL" },
	{ LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL, "LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL" },
	{ LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL, "LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL" },
	{ LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL, "LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL" },
	{ LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES, "LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES" },
} };


const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<lsa_TrustDirection>::value_name_map = { {
		{ LSA_TRUST_DIRECTION_INBOUND, "LSA_TRUST_DIRECTION_INBOUND" },
		{ LSA_TRUST_DIRECTION_OUTBOUND, "LSA_TRUST_DIRECTION_OUTBOUND" },
} };
const std::array<std::pair<uint32, const char *>, 4> x_ndr_traits_t<lsa_TrustType>::value_name_map = { {
	{ LSA_TRUST_TYPE_DOWNLEVEL, "LSA_TRUST_TYPE_DOWNLEVEL" },
	{ LSA_TRUST_TYPE_UPLEVEL, "LSA_TRUST_TYPE_UPLEVEL" },
	{ LSA_TRUST_TYPE_MIT, "LSA_TRUST_TYPE_MIT" },
	{ LSA_TRUST_TYPE_DCE, "LSA_TRUST_TYPE_DCE" },
} };


const std::array<std::pair<uint32, const char *>, 8> x_ndr_traits_t<lsa_TrustAttributes>::value_name_map = { {
		{ LSA_TRUST_ATTRIBUTE_NON_TRANSITIVE, "LSA_TRUST_ATTRIBUTE_NON_TRANSITIVE" },
		{ LSA_TRUST_ATTRIBUTE_UPLEVEL_ONLY, "LSA_TRUST_ATTRIBUTE_UPLEVEL_ONLY" },
		{ LSA_TRUST_ATTRIBUTE_QUARANTINED_DOMAIN, "LSA_TRUST_ATTRIBUTE_QUARANTINED_DOMAIN" },
		{ LSA_TRUST_ATTRIBUTE_FOREST_TRANSITIVE, "LSA_TRUST_ATTRIBUTE_FOREST_TRANSITIVE" },
		{ LSA_TRUST_ATTRIBUTE_CROSS_ORGANIZATION, "LSA_TRUST_ATTRIBUTE_CROSS_ORGANIZATION" },
		{ LSA_TRUST_ATTRIBUTE_WITHIN_FOREST, "LSA_TRUST_ATTRIBUTE_WITHIN_FOREST" },
		{ LSA_TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL, "LSA_TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL" },
		{ LSA_TRUST_ATTRIBUTE_USES_RC4_ENCRYPTION, "LSA_TRUST_ATTRIBUTE_USES_RC4_ENCRYPTION" },
} };

x_ndr_off_t lsa_TrustDomainInfoName::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoName::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_TrustDomainInfoName::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_TrustDomainInfoName::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoName::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(netbios_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoControllers::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(netbios_names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoControllers::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_entries = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(netbios_names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_entries, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoControllers::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(netbios_names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoControllers::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_entries = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(netbios_names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_entries, x_ndr_I_t());
	return __bpos;
}

void lsa_TrustDomainInfoControllers::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(netbios_names, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoPosixOffset::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_TrustDomainInfoPosixOffset::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_TrustDomainInfoPosixOffset::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(posix_offset, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoPassword::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(old_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoPassword::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(old_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoPassword::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(old_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoPassword::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(old_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoPassword::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(password, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(old_password, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoBasic::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoBasic::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoBasic::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoBasic::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoBasic::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(netbios_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoInfoEx::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_direction, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoInfoEx::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoInfoEx::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_direction, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoInfoEx::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoInfoEx::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(netbios_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_direction, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 4> x_ndr_traits_t<lsa_TrustAuthType>::value_name_map = { {
	{ TRUST_AUTH_TYPE_NONE, "TRUST_AUTH_TYPE_NONE" },
	{ TRUST_AUTH_TYPE_NT4OWF, "TRUST_AUTH_TYPE_NT4OWF" },
	{ TRUST_AUTH_TYPE_CLEAR, "TRUST_AUTH_TYPE_CLEAR" },
	{ TRUST_AUTH_TYPE_VERSION, "TRUST_AUTH_TYPE_VERSION" },
} };



x_ndr_off_t lsa_TrustDomainInfoBuffer::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(last_update_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(AuthType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoBuffer::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_TrustDomainInfoBuffer::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(last_update_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(AuthType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_TrustDomainInfoBuffer::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoBuffer::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(last_update_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(AuthType, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoAuthInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(incoming_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(incoming_current_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(incoming_previous_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(outgoing_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(outgoing_current_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(outgoing_previous_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoAuthInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(incoming_current_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(incoming_previous_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(outgoing_current_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(outgoing_previous_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoAuthInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(incoming_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(incoming_current_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(incoming_previous_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(outgoing_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(outgoing_current_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(outgoing_previous_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoAuthInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(incoming_current_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(incoming_previous_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(outgoing_current_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(outgoing_previous_auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoAuthInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(incoming_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(incoming_current_auth_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(incoming_previous_auth_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(outgoing_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(outgoing_current_auth_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(outgoing_previous_auth_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoFullInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoFullInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_TrustDomainInfoFullInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_TrustDomainInfoFullInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoFullInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info_ex, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(posix_offset, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoAuthInfoInternal::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(auth_blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoAuthInfoInternal::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(auth_blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_TrustDomainInfoAuthInfoInternal::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(auth_blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_TrustDomainInfoAuthInfoInternal::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(auth_blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoAuthInfoInternal::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(auth_blob, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoFullInfoInternal::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoFullInfoInternal::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_TrustDomainInfoFullInfoInternal::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_TrustDomainInfoFullInfoInternal::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoFullInfoInternal::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info_ex, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(posix_offset, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoInfoEx2Internal::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(forest_trust_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoInfoEx2Internal::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_forest_trust_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(forest_trust_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_forest_trust_length, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoInfoEx2Internal::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(forest_trust_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoInfoEx2Internal::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_forest_trust_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(forest_trust_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_forest_trust_length, x_ndr_I_t());
	return __bpos;
}

void lsa_TrustDomainInfoInfoEx2Internal::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info_ex, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(forest_trust_data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoFullInfo2Internal::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TrustDomainInfoFullInfo2Internal::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_TrustDomainInfoFullInfo2Internal::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_TrustDomainInfoFullInfo2Internal::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TrustDomainInfoFullInfo2Internal::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(posix_offset, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TrustDomainInfoSupportedEncTypes::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(enc_types, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_TrustDomainInfoSupportedEncTypes::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(enc_types, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_TrustDomainInfoSupportedEncTypes::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(enc_types, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void lsa_TrustedDomainInfo::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case LSA_TRUSTED_DOMAIN_INFO_NAME: construct(name); break;
		case LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS: construct(controllers); break;
		case LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET: construct(posix_offset); break;
		case LSA_TRUSTED_DOMAIN_INFO_PASSWORD: construct(password); break;
		case LSA_TRUSTED_DOMAIN_INFO_BASIC: construct(info_basic); break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX: construct(info_ex); break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO: construct(auth_info); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO: construct(full_info); break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL: construct(auth_info_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL: construct(full_info_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL: construct(info_ex2_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL: construct(full_info2_internal); break;
		case LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES: construct(enc_types); break;
	}
}

void lsa_TrustedDomainInfo::__init(x_ndr_switch_t __level, const lsa_TrustedDomainInfo &other)
{
	switch (__level) {
		case LSA_TRUSTED_DOMAIN_INFO_NAME: construct(name, other.name); break;
		case LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS: construct(controllers, other.controllers); break;
		case LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET: construct(posix_offset, other.posix_offset); break;
		case LSA_TRUSTED_DOMAIN_INFO_PASSWORD: construct(password, other.password); break;
		case LSA_TRUSTED_DOMAIN_INFO_BASIC: construct(info_basic, other.info_basic); break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX: construct(info_ex, other.info_ex); break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO: construct(auth_info, other.auth_info); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO: construct(full_info, other.full_info); break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL: construct(auth_info_internal, other.auth_info_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL: construct(full_info_internal, other.full_info_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL: construct(info_ex2_internal, other.info_ex2_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL: construct(full_info2_internal, other.full_info2_internal); break;
		case LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES: construct(enc_types, other.enc_types); break;
	}
}

void lsa_TrustedDomainInfo::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case LSA_TRUSTED_DOMAIN_INFO_NAME: destruct(name); break;
		case LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS: destruct(controllers); break;
		case LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET: destruct(posix_offset); break;
		case LSA_TRUSTED_DOMAIN_INFO_PASSWORD: destruct(password); break;
		case LSA_TRUSTED_DOMAIN_INFO_BASIC: destruct(info_basic); break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX: destruct(info_ex); break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO: destruct(auth_info); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO: destruct(full_info); break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL: destruct(auth_info_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL: destruct(full_info_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL: destruct(info_ex2_internal); break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL: destruct(full_info2_internal); break;
		case LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES: destruct(enc_types); break;
	}
}

x_ndr_off_t lsa_TrustedDomainInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LSA_TRUSTED_DOMAIN_INFO_NAME: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS: {
			X_NDR_SCALARS(controllers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET: {
			X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_PASSWORD: {
			X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_BASIC: {
			X_NDR_SCALARS(info_basic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX: {
			X_NDR_SCALARS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO: {
			X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO: {
			X_NDR_SCALARS(full_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL: {
			X_NDR_SCALARS(auth_info_internal, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL: {
			X_NDR_SCALARS(full_info_internal, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL: {
			X_NDR_SCALARS(info_ex2_internal, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL: {
			X_NDR_SCALARS(full_info2_internal, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES: {
			X_NDR_SCALARS(enc_types, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t lsa_TrustedDomainInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LSA_TRUSTED_DOMAIN_INFO_NAME: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS: {
			X_NDR_SCALARS(controllers, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET: {
			X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_PASSWORD: {
			X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_BASIC: {
			X_NDR_SCALARS(info_basic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX: {
			X_NDR_SCALARS(info_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO: {
			X_NDR_SCALARS(auth_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO: {
			X_NDR_SCALARS(full_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL: {
			X_NDR_SCALARS(auth_info_internal, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL: {
			X_NDR_SCALARS(full_info_internal, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL: {
			X_NDR_SCALARS(info_ex2_internal, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL: {
			X_NDR_SCALARS(full_info2_internal, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES: {
			X_NDR_SCALARS(enc_types, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void lsa_TrustedDomainInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case LSA_TRUSTED_DOMAIN_INFO_NAME: {
			X_NDR_OSTR(name, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_CONTROLLERS: {
			X_NDR_OSTR(controllers, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_POSIX_OFFSET: {
			X_NDR_OSTR(posix_offset, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_PASSWORD: {
			X_NDR_OSTR(password, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_BASIC: {
			X_NDR_OSTR(info_basic, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX: {
			X_NDR_OSTR(info_ex, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO: {
			X_NDR_OSTR(auth_info, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO: {
			X_NDR_OSTR(full_info, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_AUTH_INFO_INTERNAL: {
			X_NDR_OSTR(auth_info_internal, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_INTERNAL: {
			X_NDR_OSTR(full_info_internal, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_INFO_EX2_INTERNAL: {
			X_NDR_OSTR(info_ex2_internal, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_INFO_FULL_INFO_2_INTERNAL: {
			X_NDR_OSTR(full_info2_internal, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES: {
			X_NDR_OSTR(enc_types, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t lsa_DATA_BUF_PTR::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(buf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF_PTR::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(buf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF_PTR::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(buf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DATA_BUF_PTR::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(buf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_DATA_BUF_PTR::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(buf, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


#if 0
x_ndr_off_t lsa_RightAttribute::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_RightAttribute::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_RightAttribute::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_RightAttribute::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_RightAttribute::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}
#endif


x_ndr_off_t lsa_RightSet::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_RightSet::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_RightSet::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_RightSet::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_RightSet::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(names, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_DomainListEx::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DomainListEx::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_DomainListEx::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DomainListEx::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_DomainListEx::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domains, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 1> x_ndr_traits_t<lsa_krbAuthenticationOptions>::value_name_map = { {
		{ LSA_POLICY_KERBEROS_VALIDATE_CLIENT, "LSA_POLICY_KERBEROS_VALIDATE_CLIENT" },
} };

x_ndr_off_t lsa_DomainInfoKerberos::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(authentication_options, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(service_tkt_lifetime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_tkt_lifetime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_tkt_renewaltime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(clock_skew, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_DomainInfoKerberos::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(authentication_options, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(service_tkt_lifetime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_tkt_lifetime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_tkt_renewaltime, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(clock_skew, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_DomainInfoKerberos::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(authentication_options, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(service_tkt_lifetime, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(user_tkt_lifetime, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(user_tkt_renewaltime, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(clock_skew, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(reserved, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_DomainInfoEfs::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(efs_blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DomainInfoEfs::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_blob_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(efs_blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_blob_size, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_DomainInfoEfs::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(efs_blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_DomainInfoEfs::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_blob_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(efs_blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_blob_size, x_ndr_I_t());
	return __bpos;
}

void lsa_DomainInfoEfs::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(efs_blob, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 2> x_ndr_traits_t<lsa_DomainInfoEnum>::value_name_map = { {
	{ LSA_DOMAIN_INFO_POLICY_EFS, "LSA_DOMAIN_INFO_POLICY_EFS" },
	{ LSA_DOMAIN_INFO_POLICY_KERBEROS, "LSA_DOMAIN_INFO_POLICY_KERBEROS" },
} };



void lsa_DomainInformationPolicy::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case LSA_DOMAIN_INFO_POLICY_EFS: construct(efs_info); break;
		case LSA_DOMAIN_INFO_POLICY_KERBEROS: construct(kerberos_info); break;
	}
}

void lsa_DomainInformationPolicy::__init(x_ndr_switch_t __level, const lsa_DomainInformationPolicy &other)
{
	switch (__level) {
		case LSA_DOMAIN_INFO_POLICY_EFS: construct(efs_info, other.efs_info); break;
		case LSA_DOMAIN_INFO_POLICY_KERBEROS: construct(kerberos_info, other.kerberos_info); break;
	}
}

void lsa_DomainInformationPolicy::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case LSA_DOMAIN_INFO_POLICY_EFS: destruct(efs_info); break;
		case LSA_DOMAIN_INFO_POLICY_KERBEROS: destruct(kerberos_info); break;
	}
}

x_ndr_off_t lsa_DomainInformationPolicy::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LSA_DOMAIN_INFO_POLICY_EFS: {
			X_NDR_SCALARS(efs_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_DOMAIN_INFO_POLICY_KERBEROS: {
			X_NDR_SCALARS(kerberos_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t lsa_DomainInformationPolicy::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LSA_DOMAIN_INFO_POLICY_EFS: {
			X_NDR_SCALARS(efs_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_DOMAIN_INFO_POLICY_KERBEROS: {
			X_NDR_SCALARS(kerberos_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void lsa_DomainInformationPolicy::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case LSA_DOMAIN_INFO_POLICY_EFS: {
			X_NDR_OSTR(efs_info, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_DOMAIN_INFO_POLICY_KERBEROS: {
			X_NDR_OSTR(kerberos_info, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t lsa_TranslatedName2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TranslatedName2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_TranslatedName2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_TranslatedName2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TranslatedName2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sid_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid_index, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TransNameArray2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransNameArray2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_TransNameArray2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransNameArray2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_TransNameArray2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(names, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<lsa_LookupOptions>::value_name_map = { {
	{ LSA_LOOKUP_OPTION_SEARCH_ISOLATED_NAMES, "LSA_LOOKUP_OPTION_SEARCH_ISOLATED_NAMES" },
	{ LSA_LOOKUP_OPTION_SEARCH_ISOLATED_NAMES_LOCAL, "LSA_LOOKUP_OPTION_SEARCH_ISOLATED_NAMES_LOCAL" },
} };


const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<lsa_ClientRevision>::value_name_map = { {
	{ LSA_CLIENT_REVISION_1, "LSA_CLIENT_REVISION_1" },
	{ LSA_CLIENT_REVISION_2, "LSA_CLIENT_REVISION_2" },
} };



x_ndr_off_t lsa_TranslatedSid2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t lsa_TranslatedSid2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void lsa_TranslatedSid2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sid_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid_index, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TransSidArray2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_TransSidArray2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sids, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TranslatedSid3::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TranslatedSid3::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_TranslatedSid3::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(sid_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TranslatedSid3::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_TranslatedSid3::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sid_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid_index, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_TransSidArray3::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray3::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray3::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_TransSidArray3::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void lsa_TransSidArray3::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sids, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 7> x_ndr_traits_t<lsa_ForestTrustRecordFlags>::value_name_map = { {
		{ LSA_TLN_DISABLED_NEW, "LSA_TLN_DISABLED_NEW" },
		{ LSA_TLN_DISABLED_ADMIN, "LSA_TLN_DISABLED_ADMIN" },
		{ LSA_TLN_DISABLED_CONFLICT, "LSA_TLN_DISABLED_CONFLICT" },
		{ LSA_SID_DISABLED_ADMIN, "LSA_SID_DISABLED_ADMIN" },
		{ LSA_SID_DISABLED_CONFLICT, "LSA_SID_DISABLED_CONFLICT" },
		{ LSA_NB_DISABLED_ADMIN, "LSA_NB_DISABLED_ADMIN" },
		{ LSA_NB_DISABLED_CONFLICT, "LSA_NB_DISABLED_CONFLICT" },
} };
const std::array<std::pair<uint16, const char *>, 4> x_ndr_traits_t<lsa_ForestTrustRecordType>::value_name_map = { {
	{ LSA_FOREST_TRUST_TOP_LEVEL_NAME, "LSA_FOREST_TRUST_TOP_LEVEL_NAME" },
	{ LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX, "LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX" },
	{ LSA_FOREST_TRUST_DOMAIN_INFO, "LSA_FOREST_TRUST_DOMAIN_INFO" },
	{ LSA_FOREST_TRUST_RECORD_TYPE_LAST, "LSA_FOREST_TRUST_RECORD_TYPE_LAST" },
} };



x_ndr_off_t lsa_ForestTrustBinaryData::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint3264, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustBinaryData::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint3264, __pos_length, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustBinaryData::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint3264, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustBinaryData::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint3264, __pos_length, x_ndr_I_t());
	return __bpos;
}

void lsa_ForestTrustBinaryData::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t lsa_ForestTrustDomainInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(netbios_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustDomainInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(netbios_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustDomainInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(netbios_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustDomainInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(netbios_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_ForestTrustDomainInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domain_sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(netbios_domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


#if 0
void lsa_ForestTrustData::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME: construct(top_level_name); break;
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX: construct(top_level_name_ex); break;
		case LSA_FOREST_TRUST_DOMAIN_INFO: construct(domain_info); break;
		default: construct(data); break;
	}
}

void lsa_ForestTrustData::__init(x_ndr_switch_t __level, const lsa_ForestTrustData &other)
{
	switch (__level) {
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME: construct(top_level_name, other.top_level_name); break;
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX: construct(top_level_name_ex, other.top_level_name_ex); break;
		case LSA_FOREST_TRUST_DOMAIN_INFO: construct(domain_info, other.domain_info); break;
		default: construct(data, other.data); break;
	}
}

void lsa_ForestTrustData::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME: destruct(top_level_name); break;
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX: destruct(top_level_name_ex); break;
		case LSA_FOREST_TRUST_DOMAIN_INFO: destruct(domain_info); break;
		default: destruct(data); break;
	}
}

x_ndr_off_t lsa_ForestTrustData::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME: {
			X_NDR_SCALARS(top_level_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX: {
			X_NDR_SCALARS(top_level_name_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_FOREST_TRUST_DOMAIN_INFO: {
			X_NDR_SCALARS(domain_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustData::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME: {
			X_NDR_SCALARS(top_level_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX: {
			X_NDR_SCALARS(top_level_name_ex, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_FOREST_TRUST_DOMAIN_INFO: {
			X_NDR_SCALARS(domain_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void lsa_ForestTrustData::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME: {
			X_NDR_OSTR(top_level_name, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_FOREST_TRUST_TOP_LEVEL_NAME_EX: {
			X_NDR_OSTR(top_level_name_ex, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case LSA_FOREST_TRUST_DOMAIN_INFO: {
			X_NDR_OSTR(domain_info, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_OSTR(data, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}

void lsa_ForestTrustRecord::set_type(lsa_ForestTrustRecordType v)
{
	forest_trust_data.__uninit(x_ndr_switch_t(type));
	type = v;
	forest_trust_data.__init(x_ndr_switch_t(type));
}
lsa_ForestTrustRecord::lsa_ForestTrustRecord()
	: type((lsa_ForestTrustRecordType)LSA_FOREST_TRUST_TOP_LEVEL_NAME)
{
	forest_trust_data.__init(x_ndr_switch_t(type));
}

lsa_ForestTrustRecord::~lsa_ForestTrustRecord()
{
	forest_trust_data.__uninit(type);
}

lsa_ForestTrustRecord::lsa_ForestTrustRecord(const lsa_ForestTrustRecord &other)
	: type(other.type)
{
	forest_trust_data.__init(x_ndr_switch_t(type), other.forest_trust_data);
}

lsa_ForestTrustRecord &lsa_ForestTrustRecord::operator=(const lsa_ForestTrustRecord &other)
{
	forest_trust_data.__uninit(x_ndr_switch_t(type));
	type = other.type;
	forest_trust_data.__init(x_ndr_switch_t(type), other.forest_trust_data);
	return *this;
}

x_ndr_off_t lsa_ForestTrustRecord::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(forest_trust_data, __ndr, __bpos, __epos, __flags, type);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustRecord::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(forest_trust_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_ForestTrustRecord::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SWITCH(lsa_ForestTrustRecordType, type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(forest_trust_data, __ndr, __bpos, __epos, __flags, type);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_ForestTrustRecord::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(forest_trust_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_ForestTrustRecord::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(forest_trust_data, __ndr, __flags, type);
	(__ndr) << leave;
}
#endif

const std::array<std::pair<uint32, const char *>, 3> x_ndr_traits_t<lsa_ForestTrustCollisionRecordType>::value_name_map = { {
	{ LSA_FOREST_TRUST_COLLISION_TDO, "LSA_FOREST_TRUST_COLLISION_TDO" },
	{ LSA_FOREST_TRUST_COLLISION_XREF, "LSA_FOREST_TRUST_COLLISION_XREF" },
	{ LSA_FOREST_TRUST_COLLISION_OTHER, "LSA_FOREST_TRUST_COLLISION_OTHER" },
} };



x_ndr_off_t lsa_ForestTrustCollisionRecord::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t lsa_ForestTrustCollisionRecord::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t lsa_ForestTrustCollisionRecord::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t lsa_ForestTrustCollisionRecord::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void lsa_ForestTrustCollisionRecord::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(index, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



// }
}
