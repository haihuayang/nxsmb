/* ndr parser auto-generated by pidl */
	
#include "include/librpc/misc.hxx"


namespace idl {

// namespace misc {

x_ndr_off_t GUID::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(time_low, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(time_mid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(time_hi_and_version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(clock_seq, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(node, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t GUID::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(time_low, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(time_mid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(time_hi_and_version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(clock_seq, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(node, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t ndr_syntax_id::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(uuid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(if_version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t ndr_syntax_id::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(uuid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(if_version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t policy_handle::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(handle_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(uuid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t policy_handle::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(handle_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(uuid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void policy_handle::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(handle_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(uuid, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 8> x_ndr_traits_t<netr_SchannelType>::value_name_map = { {
	{ SEC_CHAN_NULL, "SEC_CHAN_NULL" },
	{ SEC_CHAN_LOCAL, "SEC_CHAN_LOCAL" },
	{ SEC_CHAN_WKSTA, "SEC_CHAN_WKSTA" },
	{ SEC_CHAN_DNS_DOMAIN, "SEC_CHAN_DNS_DOMAIN" },
	{ SEC_CHAN_DOMAIN, "SEC_CHAN_DOMAIN" },
	{ SEC_CHAN_LANMAN, "SEC_CHAN_LANMAN" },
	{ SEC_CHAN_BDC, "SEC_CHAN_BDC" },
	{ SEC_CHAN_RODC, "SEC_CHAN_RODC" },
} };



x_ndr_off_t KRB5_EDATA_NTSTATUS::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(ntstatus, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t KRB5_EDATA_NTSTATUS::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(ntstatus, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void KRB5_EDATA_NTSTATUS::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ntstatus, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 12> x_ndr_traits_t<winreg_Type>::value_name_map = { {
	{ REG_NONE, "REG_NONE" },
	{ REG_SZ, "REG_SZ" },
	{ REG_EXPAND_SZ, "REG_EXPAND_SZ" },
	{ REG_BINARY, "REG_BINARY" },
	{ REG_DWORD, "REG_DWORD" },
	{ REG_DWORD_BIG_ENDIAN, "REG_DWORD_BIG_ENDIAN" },
	{ REG_LINK, "REG_LINK" },
	{ REG_MULTI_SZ, "REG_MULTI_SZ" },
	{ REG_RESOURCE_LIST, "REG_RESOURCE_LIST" },
	{ REG_FULL_RESOURCE_DESCRIPTOR, "REG_FULL_RESOURCE_DESCRIPTOR" },
	{ REG_RESOURCE_REQUIREMENTS_LIST, "REG_RESOURCE_REQUIREMENTS_LIST" },
	{ REG_QWORD, "REG_QWORD" },
} };


const std::array<std::pair<uint32, const char *>, 3> x_ndr_traits_t<netr_SamDatabaseID>::value_name_map = { {
	{ SAM_DATABASE_DOMAIN, "SAM_DATABASE_DOMAIN" },
	{ SAM_DATABASE_BUILTIN, "SAM_DATABASE_BUILTIN" },
	{ SAM_DATABASE_PRIVS, "SAM_DATABASE_PRIVS" },
} };


const std::array<std::pair<uint32, const char *>, 27> x_ndr_traits_t<svcctl_ServerType>::value_name_map = { {
		{ SV_TYPE_WORKSTATION, "SV_TYPE_WORKSTATION" },
		{ SV_TYPE_SERVER, "SV_TYPE_SERVER" },
		{ SV_TYPE_SQLSERVER, "SV_TYPE_SQLSERVER" },
		{ SV_TYPE_DOMAIN_CTRL, "SV_TYPE_DOMAIN_CTRL" },
		{ SV_TYPE_DOMAIN_BAKCTRL, "SV_TYPE_DOMAIN_BAKCTRL" },
		{ SV_TYPE_TIME_SOURCE, "SV_TYPE_TIME_SOURCE" },
		{ SV_TYPE_AFP, "SV_TYPE_AFP" },
		{ SV_TYPE_NOVELL, "SV_TYPE_NOVELL" },
		{ SV_TYPE_DOMAIN_MEMBER, "SV_TYPE_DOMAIN_MEMBER" },
		{ SV_TYPE_PRINTQ_SERVER, "SV_TYPE_PRINTQ_SERVER" },
		{ SV_TYPE_DIALIN_SERVER, "SV_TYPE_DIALIN_SERVER" },
		{ SV_TYPE_SERVER_UNIX, "SV_TYPE_SERVER_UNIX" },
		{ SV_TYPE_NT, "SV_TYPE_NT" },
		{ SV_TYPE_WFW, "SV_TYPE_WFW" },
		{ SV_TYPE_SERVER_MFPN, "SV_TYPE_SERVER_MFPN" },
		{ SV_TYPE_SERVER_NT, "SV_TYPE_SERVER_NT" },
		{ SV_TYPE_POTENTIAL_BROWSER, "SV_TYPE_POTENTIAL_BROWSER" },
		{ SV_TYPE_BACKUP_BROWSER, "SV_TYPE_BACKUP_BROWSER" },
		{ SV_TYPE_MASTER_BROWSER, "SV_TYPE_MASTER_BROWSER" },
		{ SV_TYPE_DOMAIN_MASTER, "SV_TYPE_DOMAIN_MASTER" },
		{ SV_TYPE_SERVER_OSF, "SV_TYPE_SERVER_OSF" },
		{ SV_TYPE_SERVER_VMS, "SV_TYPE_SERVER_VMS" },
		{ SV_TYPE_WIN95_PLUS, "SV_TYPE_WIN95_PLUS" },
		{ SV_TYPE_DFS_SERVER, "SV_TYPE_DFS_SERVER" },
		{ SV_TYPE_ALTERNATE_XPORT, "SV_TYPE_ALTERNATE_XPORT" },
		{ SV_TYPE_LOCAL_LIST_ONLY, "SV_TYPE_LOCAL_LIST_ONLY" },
		{ SV_TYPE_DOMAIN_ENUM, "SV_TYPE_DOMAIN_ENUM" },
} };

// }
}
