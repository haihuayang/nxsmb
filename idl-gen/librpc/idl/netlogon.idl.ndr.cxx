/* ndr parser auto-generated by pidl */
	
#include "include/librpc/netlogon.hxx"
#include "include/librpc/security.hxx"
#include "include/librpc/ndr_smb.hxx"

namespace idl {

x_ndr_off_t netr_UasInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS_UNIQUE_PTR(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(priv, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_pw_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(kickoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pw_can_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pw_must_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(computer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(script_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_UasInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(computer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(script_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_UasInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS_UNIQUE_PTR(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(priv, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auth_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_pw_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(kickoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pw_can_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pw_must_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(computer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(script_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_UasInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(computer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(script_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_UasInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(priv, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_pw_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logon, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logoff, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logoff_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(kickoff_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_age, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pw_can_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pw_must_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(computer, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(script_path, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_UasLogoffInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(duration, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_UasLogoffInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(duration, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_UasLogoffInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(duration, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_AcctLockStr::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(lockout_duration, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reset_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_attempt_lockout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_AcctLockStr::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(lockout_duration, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reset_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_attempt_lockout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_AcctLockStr::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(lockout_duration, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(reset_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_attempt_lockout, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 19> x_ndr_traits_t<netr_LogonParameterControl>::value_name_map = { {
		{ MSV1_0_CLEARTEXT_PASSWORD_ALLOWED, "MSV1_0_CLEARTEXT_PASSWORD_ALLOWED" },
		{ MSV1_0_UPDATE_LOGON_STATISTICS, "MSV1_0_UPDATE_LOGON_STATISTICS" },
		{ MSV1_0_RETURN_USER_PARAMETERS, "MSV1_0_RETURN_USER_PARAMETERS" },
		{ MSV1_0_DONT_TRY_GUEST_ACCOUNT, "MSV1_0_DONT_TRY_GUEST_ACCOUNT" },
		{ MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT, "MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT" },
		{ MSV1_0_RETURN_PASSWORD_EXPIRY, "MSV1_0_RETURN_PASSWORD_EXPIRY" },
		{ MSV1_0_USE_CLIENT_CHALLENGE, "MSV1_0_USE_CLIENT_CHALLENGE" },
		{ MSV1_0_TRY_GUEST_ACCOUNT_ONLY, "MSV1_0_TRY_GUEST_ACCOUNT_ONLY" },
		{ MSV1_0_RETURN_PROFILE_PATH, "MSV1_0_RETURN_PROFILE_PATH" },
		{ MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY, "MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY" },
		{ MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT, "MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT" },
		{ MSV1_0_DISABLE_PERSONAL_FALLBACK, "MSV1_0_DISABLE_PERSONAL_FALLBACK" },
		{ MSV1_0_ALLOW_FORCE_GUEST, "MSV1_0_ALLOW_FORCE_GUEST" },
		{ MSV1_0_CLEARTEXT_PASSWORD_SUPPLIED, "MSV1_0_CLEARTEXT_PASSWORD_SUPPLIED" },
		{ MSV1_0_USE_DOMAIN_FOR_ROUTING_ONLY, "MSV1_0_USE_DOMAIN_FOR_ROUTING_ONLY" },
		{ MSV1_0_ALLOW_MSVCHAPV2, "MSV1_0_ALLOW_MSVCHAPV2" },
		{ MSV1_0_S4U2SELF, "MSV1_0_S4U2SELF" },
		{ MSV1_0_CHECK_LOGONHOURS_FOR_S4U, "MSV1_0_CHECK_LOGONHOURS_FOR_S4U" },
		{ MSV1_0_SUBAUTHENTICATION_DLL_EX, "MSV1_0_SUBAUTHENTICATION_DLL_EX" },
} };



x_ndr_off_t netr_IdentityInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parameter_control, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_id_low, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_id_high, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_IdentityInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_IdentityInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parameter_control, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_id_low, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_id_high, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_IdentityInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_IdentityInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(parameter_control, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_id_low, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_id_high, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(workstation, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_PasswordInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lmpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ntpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_PasswordInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t netr_PasswordInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lmpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ntpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_PasswordInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_PasswordInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(identity_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lmpassword, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ntpassword, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_ChallengeResponse::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	__ndr.save_pos(__bpos);
	X_NDR_SCALARS(uint16(0), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	__ndr.save_pos(__bpos);
	X_NDR_SCALARS(uint16(0), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_ChallengeResponse::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	x_ndr_off_t pos_length = __ndr.load_pos();
	x_ndr_off_t pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE,
			uint16, pos_length, x_ndr_I_t(), uint16, pos_size, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t netr_ChallengeResponse::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	__ndr.save_pos(__bpos);
	uint16 length;
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	__ndr.save_pos(__bpos);
	uint16 size;
	X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_ChallengeResponse::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	x_ndr_off_t pos_length = __ndr.load_pos();
	x_ndr_off_t pos_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE,
			uint16, pos_length, x_ndr_I_t(), uint16, pos_size, x_ndr_I_t());
	return __bpos;
}

void netr_ChallengeResponse::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_NetworkInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(challenge, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_NetworkInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_BUFFERS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(nt, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(lm, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t netr_NetworkInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(challenge, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_NetworkInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(nt, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(lm, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_NetworkInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(identity_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(challenge, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(nt, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lm, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_GenericInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(package_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	__ndr.save_pos(__bpos);
	X_NDR_SCALARS(uint32(0), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_GenericInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_BUFFERS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(package_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_length, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t netr_GenericInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(package_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	__ndr.save_pos(__bpos);
	uint32 data_length;
	X_NDR_SCALARS(data_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_GenericInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(identity_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(package_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_length, x_ndr_I_t());
	return __bpos;
}

void netr_GenericInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(identity_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(package_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 7> x_ndr_traits_t<netr_LogonInfoClass>::value_name_map = { {
	{ NetlogonInteractiveInformation, "NetlogonInteractiveInformation" },
	{ NetlogonNetworkInformation, "NetlogonNetworkInformation" },
	{ NetlogonServiceInformation, "NetlogonServiceInformation" },
	{ NetlogonGenericInformation, "NetlogonGenericInformation" },
	{ NetlogonInteractiveTransitiveInformation, "NetlogonInteractiveTransitiveInformation" },
	{ NetlogonNetworkTransitiveInformation, "NetlogonNetworkTransitiveInformation" },
	{ NetlogonServiceTransitiveInformation, "NetlogonServiceTransitiveInformation" },
} };



void netr_LogonLevel::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case NetlogonInteractiveInformation: construct(password); break;
		case NetlogonNetworkInformation: construct(network); break;
		case NetlogonServiceInformation: construct(password); break;
		case NetlogonGenericInformation: construct(generic); break;
		case NetlogonInteractiveTransitiveInformation: construct(password); break;
		case NetlogonNetworkTransitiveInformation: construct(network); break;
		case NetlogonServiceTransitiveInformation: construct(password); break;
		default: break;
	}
}

void netr_LogonLevel::__init(x_ndr_switch_t __level, const netr_LogonLevel &other)
{
	switch (__level) {
		case NetlogonInteractiveInformation: construct(password, other.password); break;
		case NetlogonNetworkInformation: construct(network, other.network); break;
		case NetlogonServiceInformation: construct(password, other.password); break;
		case NetlogonGenericInformation: construct(generic, other.generic); break;
		case NetlogonInteractiveTransitiveInformation: construct(password, other.password); break;
		case NetlogonNetworkTransitiveInformation: construct(network, other.network); break;
		case NetlogonServiceTransitiveInformation: construct(password, other.password); break;
		default: break;
	}
}

void netr_LogonLevel::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case NetlogonInteractiveInformation: destruct(password); break;
		case NetlogonNetworkInformation: destruct(network); break;
		case NetlogonServiceInformation: destruct(password); break;
		case NetlogonGenericInformation: destruct(generic); break;
		case NetlogonInteractiveTransitiveInformation: destruct(password); break;
		case NetlogonNetworkTransitiveInformation: destruct(network); break;
		case NetlogonServiceTransitiveInformation: destruct(password); break;
		default: break;
	}
}

x_ndr_off_t netr_LogonLevel::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NetlogonInteractiveInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(network, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonGenericInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(generic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonInteractiveTransitiveInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkTransitiveInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(network, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceTransitiveInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_LogonLevel::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case NetlogonInteractiveInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(network, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonGenericInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(generic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonInteractiveTransitiveInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkTransitiveInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(network, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceTransitiveInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_LogonLevel::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NetlogonInteractiveInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(network, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonGenericInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(generic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonInteractiveTransitiveInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkTransitiveInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(network, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceTransitiveInformation: {
			X_NDR_SCALARS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_LogonLevel::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	switch (__level) {
		case NetlogonInteractiveInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(network, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonGenericInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(generic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonInteractiveTransitiveInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkTransitiveInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(network, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceTransitiveInformation: {
			X_NDR_BUFFERS_UNIQUE_PTR(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void netr_LogonLevel::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case NetlogonInteractiveInformation: {
			X_NDR_OSTR(password, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkInformation: {
			X_NDR_OSTR(network, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceInformation: {
			X_NDR_OSTR(password, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonGenericInformation: {
			X_NDR_OSTR(generic, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonInteractiveTransitiveInformation: {
			X_NDR_OSTR(password, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonNetworkTransitiveInformation: {
			X_NDR_OSTR(network, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonServiceTransitiveInformation: {
			X_NDR_OSTR(password, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
}


x_ndr_off_t netr_UserSessionKey::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(key, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_UserSessionKey::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(key, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_UserSessionKey::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(key, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_LMSessionKey::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(key, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_LMSessionKey::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(key, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_LMSessionKey::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(key, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 11> x_ndr_traits_t<netr_UserFlags>::value_name_map = { {
		{ NETLOGON_GUEST, "NETLOGON_GUEST" },
		{ NETLOGON_NOENCRYPTION, "NETLOGON_NOENCRYPTION" },
		{ NETLOGON_CACHED_ACCOUNT, "NETLOGON_CACHED_ACCOUNT" },
		{ NETLOGON_USED_LM_PASSWORD, "NETLOGON_USED_LM_PASSWORD" },
		{ NETLOGON_EXTRA_SIDS, "NETLOGON_EXTRA_SIDS" },
		{ NETLOGON_SUBAUTH_SESSION_KEY, "NETLOGON_SUBAUTH_SESSION_KEY" },
		{ NETLOGON_SERVER_TRUST_ACCOUNT, "NETLOGON_SERVER_TRUST_ACCOUNT" },
		{ NETLOGON_NTLMV2_ENABLED, "NETLOGON_NTLMV2_ENABLED" },
		{ NETLOGON_RESOURCE_GROUPS, "NETLOGON_RESOURCE_GROUPS" },
		{ NETLOGON_PROFILE_PATH_RETURNED, "NETLOGON_PROFILE_PATH_RETURNED" },
		{ NETLOGON_GRACE_LOGON, "NETLOGON_GRACE_LOGON" },
} };

x_ndr_off_t netr_SamBaseInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(logon_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(kickoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(allow_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(force_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(key, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_server, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(LMSessKey, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sub_auth_status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_successful_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_failed_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(failed_logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_SamBaseInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_server, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_SamBaseInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(logon_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(kickoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(allow_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(force_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(key, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_server, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(LMSessKey, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sub_auth_status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_successful_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_failed_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(failed_logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_SamBaseInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_server, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_SamBaseInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(logon_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logoff_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(kickoff_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(allow_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(force_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_script, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(profile_path, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_directory, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_drive, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_password_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(primary_gid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(groups, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(user_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(key, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_server, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_domain, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(LMSessKey, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sub_auth_status, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_successful_logon, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_failed_logon, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(failed_logon_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(reserved, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_SamInfo2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_SamInfo2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_SamInfo2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_SamInfo2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_SamInfo2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(base, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_SidAttr::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_SidAttr::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_SidAttr::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_SidAttr::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_SidAttr::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_SamInfo3::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_SamInfo3::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_sidcount = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_VECTOR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_sidcount);
	return __bpos;
}

x_ndr_off_t netr_SamInfo3::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_SamInfo3::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_sidcount = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_VECTOR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_sidcount);
	return __bpos;
}

void netr_SamInfo3::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(base, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sids, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_SamInfo6::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(principle, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_SamInfo6::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_sidcount = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_VECTOR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_sidcount);
	X_NDR_BUFFERS(dns_domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(principle, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t netr_SamInfo6::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(principle, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_SamInfo6::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(base, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_sidcount = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_VECTOR(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_sidcount);
	X_NDR_BUFFERS(dns_domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(principle, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_SamInfo6::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(base, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sids, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_domainname, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(principle, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_PacInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(pac, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_server, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(principal_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(auth, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_session_key, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(expansionroom, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_PacInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_pac_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(pac, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_pac_size, x_ndr_I_t());
	X_NDR_BUFFERS(logon_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_server, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(principal_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_auth_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(auth, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_auth_size, x_ndr_I_t());
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t netr_PacInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(pac, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_server, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(principal_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(auth, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_session_key, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(expansionroom, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_PacInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_pac_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(pac, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_pac_size, x_ndr_I_t());
	X_NDR_BUFFERS(logon_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_server, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(principal_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_auth_size = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(auth, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_auth_size, x_ndr_I_t());
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_PacInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(pac, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_domain, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_server, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(principal_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auth, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(user_session_key, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(expansionroom, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_GenericInfo2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_GenericInfo2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_length, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t netr_GenericInfo2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_GenericInfo2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	x_ndr_off_t __pos_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_length, x_ndr_I_t());
	return __bpos;
}

void netr_GenericInfo2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 5> x_ndr_traits_t<netr_ValidationInfoClass>::value_name_map = { {
	{ NetlogonValidationUasInfo, "NetlogonValidationUasInfo" },
	{ NetlogonValidationSamInfo, "NetlogonValidationSamInfo" },
	{ NetlogonValidationSamInfo2, "NetlogonValidationSamInfo2" },
	{ NetlogonValidationGenericInfo2, "NetlogonValidationGenericInfo2" },
	{ NetlogonValidationSamInfo4, "NetlogonValidationSamInfo4" },
} };


#if 0
TODO
void netr_Validation::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case NetlogonValidationSamInfo: construct(sam2); break;
		case NetlogonValidationSamInfo2: construct(sam3); break;
		case 4: construct(pac); break;
		case NetlogonValidationGenericInfo2: construct(generic); break;
		case NetlogonValidationSamInfo4: construct(sam6); break;
		default: break;
	}
}

void netr_Validation::__init(x_ndr_switch_t __level, const netr_Validation &other)
{
	switch (__level) {
		case NetlogonValidationSamInfo: construct(sam2, other.sam2); break;
		case NetlogonValidationSamInfo2: construct(sam3, other.sam3); break;
		case 4: construct(pac, other.pac); break;
		case NetlogonValidationGenericInfo2: construct(generic, other.generic); break;
		case NetlogonValidationSamInfo4: construct(sam6, other.sam6); break;
		default: break;
	}
}

void netr_Validation::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case NetlogonValidationSamInfo: destruct(sam2); break;
		case NetlogonValidationSamInfo2: destruct(sam3); break;
		case 4: destruct(pac); break;
		case NetlogonValidationGenericInfo2: destruct(generic); break;
		case NetlogonValidationSamInfo4: destruct(sam6); break;
		default: break;
	}
}

x_ndr_off_t netr_Validation::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NetlogonValidationSamInfo: {
			X_NDR_SCALARS(sam2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationSamInfo2: {
			X_NDR_SCALARS(sam3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(pac, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationGenericInfo2: {
			X_NDR_SCALARS(generic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationSamInfo4: {
			X_NDR_SCALARS(sam6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_Validation::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NetlogonValidationSamInfo: {
			X_NDR_SCALARS(sam2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationSamInfo2: {
			X_NDR_SCALARS(sam3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(pac, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationGenericInfo2: {
			X_NDR_SCALARS(generic, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationSamInfo4: {
			X_NDR_SCALARS(sam6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void netr_Validation::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case NetlogonValidationSamInfo: {
			X_NDR_OSTR(sam2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationSamInfo2: {
			X_NDR_OSTR(sam3, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_OSTR(pac, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationGenericInfo2: {
			X_NDR_OSTR(generic, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NetlogonValidationSamInfo4: {
			X_NDR_OSTR(sam6, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
}
#endif

x_ndr_off_t netr_Credential::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_Credential::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_Credential::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_Authenticator::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(cred, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(timestamp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_Authenticator::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(cred, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(timestamp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_Authenticator::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(cred, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(timestamp, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_DELETE_USER::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_DELETE_USER::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t netr_DELTA_DELETE_USER::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_DELETE_USER::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__0(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_DELETE_USER::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_USER_KEY16::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 size{length};
	X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pwd, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_USER_KEY16::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 size;
	X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pwd, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_USER_KEY16::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pwd, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_PasswordHistory::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint16 nt_length(get_size(nt_history));
	X_NDR_SCALARS(nt_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 nt_size{nt_length};
	X_NDR_SCALARS(nt_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 lm_length(get_size(lm_history));
	X_NDR_SCALARS(lm_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 lm_size{lm_length};
	X_NDR_SCALARS(lm_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_PasswordHistory::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint16 nt_length;
	X_NDR_SCALARS(nt_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 nt_size;
	X_NDR_SCALARS(nt_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 lm_length;
	X_NDR_SCALARS(lm_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 lm_size;
	X_NDR_SCALARS(lm_size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_PasswordHistory::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(nt_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lm_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(nt_history, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lm_history, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_USER_KEYS2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(lmpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ntpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_USER_KEYS2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(lmpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ntpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_USER_KEYS2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(lmpassword, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ntpassword, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(history, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_USER_KEY_UNION::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(keys2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_USER_KEY_UNION::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(keys2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_USER_KEY_UNION::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(keys2, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_USER_KEYS::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(keys, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_USER_KEYS::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(keys, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_USER_KEYS::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(version, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(keys, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_USER_PRIVATE_INFO::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(SensitiveDataFlag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(SensitiveData, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_USER_PRIVATE_INFO::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_DataLength = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(SensitiveData, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_DataLength, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t netr_USER_PRIVATE_INFO::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(SensitiveDataFlag, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(SensitiveData, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_USER_PRIVATE_INFO::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_DataLength = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(SensitiveData, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_DataLength, x_ndr_I_t());
	return __bpos;
}

void netr_USER_PRIVATE_INFO::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(SensitiveDataFlag, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SensitiveData, __ndr, x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_USER::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_expiry, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lmpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ntpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_password_present, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_password_present, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(country_code, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(code_page, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_private_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_USER::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(user_private_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_USER::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_expiry, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lmpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ntpassword, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_password_present, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_password_present, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(country_code, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(code_page, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(user_private_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_USER::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(user_private_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_USER::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(primary_gid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_directory, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_drive, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_script, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(workstations, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logon, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logoff, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_hours, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_password_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_expiry, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lmpassword, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ntpassword, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(nt_password_present, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lm_password_present, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_expired, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(comment, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(parameters, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(country_code, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(code_page, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(user_private_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SecurityInformation, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sdbuf, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(profile_path, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_DOMAIN::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(force_logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(min_password_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_history_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(min_password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_lockout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_to_chgpass, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_DOMAIN::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account_lockout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_DOMAIN::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(force_logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(min_password_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_history_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(min_password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_lockout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_to_chgpass, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_DOMAIN::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account_lockout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_DOMAIN::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(oem_information, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(force_logoff_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(min_password_length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_history_length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(max_password_age, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(min_password_age, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sequence_num, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_create_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SecurityInformation, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sdbuf, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_lockout, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_to_chgpass, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_GROUP::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(group_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_GROUP::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(group_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_GROUP::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(group_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_GROUP::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(group_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_GROUP::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(group_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SecurityInformation, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sdbuf, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_RENAME::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(OldName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(NewName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_RENAME::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(OldName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(NewName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_RENAME::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(OldName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(NewName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_RENAME::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(OldName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(NewName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_RENAME::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(OldName, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(NewName, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_GROUP_MEMBER::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(attribs, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_GROUP_MEMBER::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_num_rids = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_num_rids, x_ndr_I_t());
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(attribs, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_num_rids, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t netr_DELTA_GROUP_MEMBER::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(attribs, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_GROUP_MEMBER::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_num_rids = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_num_rids, x_ndr_I_t());
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(attribs, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_num_rids, x_ndr_I_t());
	return __bpos;
}

void netr_DELTA_GROUP_MEMBER::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(rids, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(attribs, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_ALIAS::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(alias_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_ALIAS::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(alias_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_ALIAS::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(alias_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_ALIAS::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(alias_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_ALIAS::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(alias_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SecurityInformation, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sdbuf, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_ALIAS_MEMBER::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_ALIAS_MEMBER::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_ALIAS_MEMBER::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_ALIAS_MEMBER::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(sids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_ALIAS_MEMBER::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sids, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_QUOTA_LIMITS::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(pagedpoollimit, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nonpagedpoollimit, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(minimumworkingsetsize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(maximumworkingsetsize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pagefilelimit, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(timelimit, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_QUOTA_LIMITS::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(pagedpoollimit, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nonpagedpoollimit, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(minimumworkingsetsize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(maximumworkingsetsize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pagefilelimit, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(timelimit, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_QUOTA_LIMITS::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(pagedpoollimit, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(nonpagedpoollimit, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(minimumworkingsetsize, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(maximumworkingsetsize, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pagefilelimit, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(timelimit, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_POLICY::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(maxlogsize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auditretentionperiod, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auditingmode, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint32 maxauditeventcount = 0;
	if (eventauditoptions && eventauditoptions->size() > 0) {
		maxauditeventcount = eventauditoptions->size() - 1;
	}
	X_NDR_SCALARS(maxauditeventcount, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(eventauditoptions, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(quota_limits, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(db_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_POLICY::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__0(eventauditoptions, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(primary_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t netr_DELTA_POLICY::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(maxlogsize, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auditretentionperiod, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(auditingmode, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint32_t maxauditeventcount;
	X_NDR_SCALARS(maxauditeventcount, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(eventauditoptions, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(quota_limits, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(db_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_POLICY::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__0(eventauditoptions, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(primary_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_PTR(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_POLICY::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(maxlogsize, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auditretentionperiod, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(auditingmode, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(eventauditoptions, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(primary_domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(quota_limits, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sequence_num, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(db_create_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SecurityInformation, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sdbuf, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_TRUSTED_DOMAIN::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(controller_names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_TRUSTED_DOMAIN::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__0(controller_names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t netr_DELTA_TRUSTED_DOMAIN::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(controller_names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(posix_offset, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_TRUSTED_DOMAIN::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__0(controller_names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_TRUSTED_DOMAIN::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(controller_names, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SecurityInformation, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sdbuf, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(posix_offset, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_ACCOUNT::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(privilege_control, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(privilege_attrib, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(privilege_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(quotalimits, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(system_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_ACCOUNT::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_privilege_entries = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(privilege_attrib, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_privilege_entries, x_ndr_I_t());
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(privilege_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_privilege_entries, x_ndr_I_t());
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t netr_DELTA_ACCOUNT::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(privilege_control, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(privilege_attrib, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(privilege_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(quotalimits, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(system_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_ACCOUNT::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_privilege_entries = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(privilege_attrib, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_privilege_entries, x_ndr_I_t());
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(privilege_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_privilege_entries, x_ndr_I_t());
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_ACCOUNT::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(privilege_control, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(privilege_attrib, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(privilege_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(quotalimits, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(system_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SecurityInformation, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sdbuf, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_CIPHER_VALUE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags); // len
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags); // maxlen
	X_NDR_SCALARS_UNIQUE_PTR(cipher_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_CIPHER_VALUE::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_len = __ndr.load_pos();
	x_ndr_off_t __pos_maxlen = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(cipher_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_len, x_ndr_I_t(), uint32, __pos_maxlen, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t netr_CIPHER_VALUE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags); // len
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags); // maxlen
	X_NDR_SCALARS_UNIQUE_PTR(cipher_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_CIPHER_VALUE::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_len = __ndr.load_pos();
	x_ndr_off_t __pos_maxlen = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS_LENGTH_IS__2(cipher_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_len, x_ndr_I_t(), uint32, __pos_maxlen, x_ndr_I_t());
	return __bpos;
}

void netr_CIPHER_VALUE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(cipher_data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_SECRET::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(current_cipher, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(current_cipher_set_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(old_cipher, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(old_cipher_set_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_SECRET::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(current_cipher, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(old_cipher, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_SECRET::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(current_cipher, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(current_cipher_set_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(old_cipher, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(old_cipher_set_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SecurityInformation, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_SECRET::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(current_cipher, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(old_cipher, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sdbuf, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_SECRET::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(current_cipher, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(current_cipher_set_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(old_cipher, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(old_cipher_set_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SecurityInformation, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sdbuf, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown6, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown7, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown8, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 22> x_ndr_traits_t<netr_DeltaEnum>::value_name_map = { {
	{ NETR_DELTA_DOMAIN, "NETR_DELTA_DOMAIN" },
	{ NETR_DELTA_GROUP, "NETR_DELTA_GROUP" },
	{ NETR_DELTA_DELETE_GROUP, "NETR_DELTA_DELETE_GROUP" },
	{ NETR_DELTA_RENAME_GROUP, "NETR_DELTA_RENAME_GROUP" },
	{ NETR_DELTA_USER, "NETR_DELTA_USER" },
	{ NETR_DELTA_DELETE_USER, "NETR_DELTA_DELETE_USER" },
	{ NETR_DELTA_RENAME_USER, "NETR_DELTA_RENAME_USER" },
	{ NETR_DELTA_GROUP_MEMBER, "NETR_DELTA_GROUP_MEMBER" },
	{ NETR_DELTA_ALIAS, "NETR_DELTA_ALIAS" },
	{ NETR_DELTA_DELETE_ALIAS, "NETR_DELTA_DELETE_ALIAS" },
	{ NETR_DELTA_RENAME_ALIAS, "NETR_DELTA_RENAME_ALIAS" },
	{ NETR_DELTA_ALIAS_MEMBER, "NETR_DELTA_ALIAS_MEMBER" },
	{ NETR_DELTA_POLICY, "NETR_DELTA_POLICY" },
	{ NETR_DELTA_TRUSTED_DOMAIN, "NETR_DELTA_TRUSTED_DOMAIN" },
	{ NETR_DELTA_DELETE_TRUST, "NETR_DELTA_DELETE_TRUST" },
	{ NETR_DELTA_ACCOUNT, "NETR_DELTA_ACCOUNT" },
	{ NETR_DELTA_DELETE_ACCOUNT, "NETR_DELTA_DELETE_ACCOUNT" },
	{ NETR_DELTA_SECRET, "NETR_DELTA_SECRET" },
	{ NETR_DELTA_DELETE_SECRET, "NETR_DELTA_DELETE_SECRET" },
	{ NETR_DELTA_DELETE_GROUP2, "NETR_DELTA_DELETE_GROUP2" },
	{ NETR_DELTA_DELETE_USER2, "NETR_DELTA_DELETE_USER2" },
	{ NETR_DELTA_MODIFY_COUNT, "NETR_DELTA_MODIFY_COUNT" },
} };


#if 0
void netr_DELTA_UNION::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case NETR_DELTA_DOMAIN: construct(domain); break;
		case NETR_DELTA_GROUP: construct(group); break;
		case NETR_DELTA_DELETE_GROUP: break;
		case NETR_DELTA_RENAME_GROUP: construct(rename_group); break;
		case NETR_DELTA_USER: construct(user); break;
		case NETR_DELTA_DELETE_USER: break;
		case NETR_DELTA_RENAME_USER: construct(rename_user); break;
		case NETR_DELTA_GROUP_MEMBER: construct(group_member); break;
		case NETR_DELTA_ALIAS: construct(alias); break;
		case NETR_DELTA_DELETE_ALIAS: break;
		case NETR_DELTA_RENAME_ALIAS: construct(rename_alias); break;
		case NETR_DELTA_ALIAS_MEMBER: construct(alias_member); break;
		case NETR_DELTA_POLICY: construct(policy); break;
		case NETR_DELTA_TRUSTED_DOMAIN: construct(trusted_domain); break;
		case NETR_DELTA_DELETE_TRUST: break;
		case NETR_DELTA_ACCOUNT: construct(account); break;
		case NETR_DELTA_DELETE_ACCOUNT: break;
		case NETR_DELTA_SECRET: construct(secret); break;
		case NETR_DELTA_DELETE_SECRET: break;
		case NETR_DELTA_DELETE_GROUP2: construct(delete_group); break;
		case NETR_DELTA_DELETE_USER2: construct(delete_user); break;
		case NETR_DELTA_MODIFY_COUNT: construct(modified_count); break;
		default: break;
	}
}

void netr_DELTA_UNION::__init(x_ndr_switch_t __level, const netr_DELTA_UNION &other)
{
	switch (__level) {
		case NETR_DELTA_DOMAIN: construct(domain, other.domain); break;
		case NETR_DELTA_GROUP: construct(group, other.group); break;
		case NETR_DELTA_DELETE_GROUP: break;
		case NETR_DELTA_RENAME_GROUP: construct(rename_group, other.rename_group); break;
		case NETR_DELTA_USER: construct(user, other.user); break;
		case NETR_DELTA_DELETE_USER: break;
		case NETR_DELTA_RENAME_USER: construct(rename_user, other.rename_user); break;
		case NETR_DELTA_GROUP_MEMBER: construct(group_member, other.group_member); break;
		case NETR_DELTA_ALIAS: construct(alias, other.alias); break;
		case NETR_DELTA_DELETE_ALIAS: break;
		case NETR_DELTA_RENAME_ALIAS: construct(rename_alias, other.rename_alias); break;
		case NETR_DELTA_ALIAS_MEMBER: construct(alias_member, other.alias_member); break;
		case NETR_DELTA_POLICY: construct(policy, other.policy); break;
		case NETR_DELTA_TRUSTED_DOMAIN: construct(trusted_domain, other.trusted_domain); break;
		case NETR_DELTA_DELETE_TRUST: break;
		case NETR_DELTA_ACCOUNT: construct(account, other.account); break;
		case NETR_DELTA_DELETE_ACCOUNT: break;
		case NETR_DELTA_SECRET: construct(secret, other.secret); break;
		case NETR_DELTA_DELETE_SECRET: break;
		case NETR_DELTA_DELETE_GROUP2: construct(delete_group, other.delete_group); break;
		case NETR_DELTA_DELETE_USER2: construct(delete_user, other.delete_user); break;
		case NETR_DELTA_MODIFY_COUNT: construct(modified_count, other.modified_count); break;
		default: break;
	}
}

void netr_DELTA_UNION::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case NETR_DELTA_DOMAIN: destruct(domain); break;
		case NETR_DELTA_GROUP: destruct(group); break;
		case NETR_DELTA_DELETE_GROUP: break;
		case NETR_DELTA_RENAME_GROUP: destruct(rename_group); break;
		case NETR_DELTA_USER: destruct(user); break;
		case NETR_DELTA_DELETE_USER: break;
		case NETR_DELTA_RENAME_USER: destruct(rename_user); break;
		case NETR_DELTA_GROUP_MEMBER: destruct(group_member); break;
		case NETR_DELTA_ALIAS: destruct(alias); break;
		case NETR_DELTA_DELETE_ALIAS: break;
		case NETR_DELTA_RENAME_ALIAS: destruct(rename_alias); break;
		case NETR_DELTA_ALIAS_MEMBER: destruct(alias_member); break;
		case NETR_DELTA_POLICY: destruct(policy); break;
		case NETR_DELTA_TRUSTED_DOMAIN: destruct(trusted_domain); break;
		case NETR_DELTA_DELETE_TRUST: break;
		case NETR_DELTA_ACCOUNT: destruct(account); break;
		case NETR_DELTA_DELETE_ACCOUNT: break;
		case NETR_DELTA_SECRET: destruct(secret); break;
		case NETR_DELTA_DELETE_SECRET: break;
		case NETR_DELTA_DELETE_GROUP2: destruct(delete_group); break;
		case NETR_DELTA_DELETE_USER2: destruct(delete_user); break;
		case NETR_DELTA_MODIFY_COUNT: destruct(modified_count); break;
		default: break;
	}
}

x_ndr_off_t netr_DELTA_UNION::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NETR_DELTA_DOMAIN: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP: {
			X_NDR_SCALARS(group, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP: {
		} break;
		case NETR_DELTA_RENAME_GROUP: {
			X_NDR_SCALARS(rename_group, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_USER: {
			X_NDR_SCALARS(user, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER: {
		} break;
		case NETR_DELTA_RENAME_USER: {
			X_NDR_SCALARS(rename_user, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP_MEMBER: {
			X_NDR_SCALARS(group_member, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS: {
			X_NDR_SCALARS(alias, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ALIAS: {
		} break;
		case NETR_DELTA_RENAME_ALIAS: {
			X_NDR_SCALARS(rename_alias, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS_MEMBER: {
			X_NDR_SCALARS(alias_member, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_POLICY: {
			X_NDR_SCALARS(policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_TRUSTED_DOMAIN: {
			X_NDR_SCALARS(trusted_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_TRUST: {
		} break;
		case NETR_DELTA_ACCOUNT: {
			X_NDR_SCALARS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ACCOUNT: {
		} break;
		case NETR_DELTA_SECRET: {
			X_NDR_SCALARS(secret, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_SECRET: {
		} break;
		case NETR_DELTA_DELETE_GROUP2: {
			X_NDR_SCALARS(delete_group, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER2: {
			X_NDR_SCALARS(delete_user, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_MODIFY_COUNT: {
			X_NDR_SCALARS(modified_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_DELTA_UNION::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NETR_DELTA_DOMAIN: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP: {
			X_NDR_SCALARS(group, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP: {
		} break;
		case NETR_DELTA_RENAME_GROUP: {
			X_NDR_SCALARS(rename_group, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_USER: {
			X_NDR_SCALARS(user, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER: {
		} break;
		case NETR_DELTA_RENAME_USER: {
			X_NDR_SCALARS(rename_user, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP_MEMBER: {
			X_NDR_SCALARS(group_member, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS: {
			X_NDR_SCALARS(alias, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ALIAS: {
		} break;
		case NETR_DELTA_RENAME_ALIAS: {
			X_NDR_SCALARS(rename_alias, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS_MEMBER: {
			X_NDR_SCALARS(alias_member, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_POLICY: {
			X_NDR_SCALARS(policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_TRUSTED_DOMAIN: {
			X_NDR_SCALARS(trusted_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_TRUST: {
		} break;
		case NETR_DELTA_ACCOUNT: {
			X_NDR_SCALARS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ACCOUNT: {
		} break;
		case NETR_DELTA_SECRET: {
			X_NDR_SCALARS(secret, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_SECRET: {
		} break;
		case NETR_DELTA_DELETE_GROUP2: {
			X_NDR_SCALARS(delete_group, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER2: {
			X_NDR_SCALARS(delete_user, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_MODIFY_COUNT: {
			X_NDR_SCALARS(modified_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void netr_DELTA_UNION::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case NETR_DELTA_DOMAIN: {
			X_NDR_OSTR(domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP: {
			X_NDR_OSTR(group, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP: {
		} break;
		case NETR_DELTA_RENAME_GROUP: {
			X_NDR_OSTR(rename_group, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_USER: {
			X_NDR_OSTR(user, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER: {
		} break;
		case NETR_DELTA_RENAME_USER: {
			X_NDR_OSTR(rename_user, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP_MEMBER: {
			X_NDR_OSTR(group_member, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS: {
			X_NDR_OSTR(alias, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ALIAS: {
		} break;
		case NETR_DELTA_RENAME_ALIAS: {
			X_NDR_OSTR(rename_alias, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS_MEMBER: {
			X_NDR_OSTR(alias_member, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_POLICY: {
			X_NDR_OSTR(policy, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_TRUSTED_DOMAIN: {
			X_NDR_OSTR(trusted_domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_TRUST: {
		} break;
		case NETR_DELTA_ACCOUNT: {
			X_NDR_OSTR(account, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ACCOUNT: {
		} break;
		case NETR_DELTA_SECRET: {
			X_NDR_OSTR(secret, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_SECRET: {
		} break;
		case NETR_DELTA_DELETE_GROUP2: {
			X_NDR_OSTR(delete_group, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER2: {
			X_NDR_OSTR(delete_user, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_MODIFY_COUNT: {
			X_NDR_OSTR(modified_count, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
}


void netr_DELTA_ID_UNION::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case NETR_DELTA_DOMAIN: construct(rid); break;
		case NETR_DELTA_GROUP: construct(rid); break;
		case NETR_DELTA_DELETE_GROUP: construct(rid); break;
		case NETR_DELTA_RENAME_GROUP: construct(rid); break;
		case NETR_DELTA_USER: construct(rid); break;
		case NETR_DELTA_DELETE_USER: construct(rid); break;
		case NETR_DELTA_RENAME_USER: construct(rid); break;
		case NETR_DELTA_GROUP_MEMBER: construct(rid); break;
		case NETR_DELTA_ALIAS: construct(rid); break;
		case NETR_DELTA_DELETE_ALIAS: construct(rid); break;
		case NETR_DELTA_RENAME_ALIAS: construct(rid); break;
		case NETR_DELTA_ALIAS_MEMBER: construct(rid); break;
		case NETR_DELTA_POLICY: construct(sid); break;
		case NETR_DELTA_TRUSTED_DOMAIN: construct(sid); break;
		case NETR_DELTA_DELETE_TRUST: construct(sid); break;
		case NETR_DELTA_ACCOUNT: construct(sid); break;
		case NETR_DELTA_DELETE_ACCOUNT: construct(sid); break;
		case NETR_DELTA_SECRET: construct(name); break;
		case NETR_DELTA_DELETE_SECRET: construct(name); break;
		case NETR_DELTA_DELETE_GROUP2: construct(rid); break;
		case NETR_DELTA_DELETE_USER2: construct(rid); break;
		case NETR_DELTA_MODIFY_COUNT: break;
		default: break;
	}
}

void netr_DELTA_ID_UNION::__init(x_ndr_switch_t __level, const netr_DELTA_ID_UNION &other)
{
	switch (__level) {
		case NETR_DELTA_DOMAIN: construct(rid, other.rid); break;
		case NETR_DELTA_GROUP: construct(rid, other.rid); break;
		case NETR_DELTA_DELETE_GROUP: construct(rid, other.rid); break;
		case NETR_DELTA_RENAME_GROUP: construct(rid, other.rid); break;
		case NETR_DELTA_USER: construct(rid, other.rid); break;
		case NETR_DELTA_DELETE_USER: construct(rid, other.rid); break;
		case NETR_DELTA_RENAME_USER: construct(rid, other.rid); break;
		case NETR_DELTA_GROUP_MEMBER: construct(rid, other.rid); break;
		case NETR_DELTA_ALIAS: construct(rid, other.rid); break;
		case NETR_DELTA_DELETE_ALIAS: construct(rid, other.rid); break;
		case NETR_DELTA_RENAME_ALIAS: construct(rid, other.rid); break;
		case NETR_DELTA_ALIAS_MEMBER: construct(rid, other.rid); break;
		case NETR_DELTA_POLICY: construct(sid, other.sid); break;
		case NETR_DELTA_TRUSTED_DOMAIN: construct(sid, other.sid); break;
		case NETR_DELTA_DELETE_TRUST: construct(sid, other.sid); break;
		case NETR_DELTA_ACCOUNT: construct(sid, other.sid); break;
		case NETR_DELTA_DELETE_ACCOUNT: construct(sid, other.sid); break;
		case NETR_DELTA_SECRET: construct(name, other.name); break;
		case NETR_DELTA_DELETE_SECRET: construct(name, other.name); break;
		case NETR_DELTA_DELETE_GROUP2: construct(rid, other.rid); break;
		case NETR_DELTA_DELETE_USER2: construct(rid, other.rid); break;
		case NETR_DELTA_MODIFY_COUNT: break;
		default: break;
	}
}

void netr_DELTA_ID_UNION::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case NETR_DELTA_DOMAIN: destruct(rid); break;
		case NETR_DELTA_GROUP: destruct(rid); break;
		case NETR_DELTA_DELETE_GROUP: destruct(rid); break;
		case NETR_DELTA_RENAME_GROUP: destruct(rid); break;
		case NETR_DELTA_USER: destruct(rid); break;
		case NETR_DELTA_DELETE_USER: destruct(rid); break;
		case NETR_DELTA_RENAME_USER: destruct(rid); break;
		case NETR_DELTA_GROUP_MEMBER: destruct(rid); break;
		case NETR_DELTA_ALIAS: destruct(rid); break;
		case NETR_DELTA_DELETE_ALIAS: destruct(rid); break;
		case NETR_DELTA_RENAME_ALIAS: destruct(rid); break;
		case NETR_DELTA_ALIAS_MEMBER: destruct(rid); break;
		case NETR_DELTA_POLICY: destruct(sid); break;
		case NETR_DELTA_TRUSTED_DOMAIN: destruct(sid); break;
		case NETR_DELTA_DELETE_TRUST: destruct(sid); break;
		case NETR_DELTA_ACCOUNT: destruct(sid); break;
		case NETR_DELTA_DELETE_ACCOUNT: destruct(sid); break;
		case NETR_DELTA_SECRET: destruct(name); break;
		case NETR_DELTA_DELETE_SECRET: destruct(name); break;
		case NETR_DELTA_DELETE_GROUP2: destruct(rid); break;
		case NETR_DELTA_DELETE_USER2: destruct(rid); break;
		case NETR_DELTA_MODIFY_COUNT: break;
		default: break;
	}
}

x_ndr_off_t netr_DELTA_ID_UNION::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NETR_DELTA_DOMAIN: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_GROUP: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_USER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_USER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP_MEMBER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ALIAS: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_ALIAS: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS_MEMBER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_POLICY: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_TRUSTED_DOMAIN: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_TRUST: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ACCOUNT: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ACCOUNT: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_SECRET: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_SECRET: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP2: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER2: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_MODIFY_COUNT: {
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_DELTA_ID_UNION::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NETR_DELTA_DOMAIN: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_GROUP: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_USER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_USER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP_MEMBER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ALIAS: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_ALIAS: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS_MEMBER: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_POLICY: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_TRUSTED_DOMAIN: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_TRUST: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ACCOUNT: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ACCOUNT: {
			X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_SECRET: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_SECRET: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP2: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER2: {
			X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_MODIFY_COUNT: {
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void netr_DELTA_ID_UNION::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case NETR_DELTA_DOMAIN: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_GROUP: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_USER: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_USER: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_GROUP_MEMBER: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ALIAS: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_RENAME_ALIAS: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ALIAS_MEMBER: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_POLICY: {
			X_NDR_OSTR(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_TRUSTED_DOMAIN: {
			X_NDR_OSTR(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_TRUST: {
			X_NDR_OSTR(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_ACCOUNT: {
			X_NDR_OSTR(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_ACCOUNT: {
			X_NDR_OSTR(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_SECRET: {
			X_NDR_OSTR(name, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_SECRET: {
			X_NDR_OSTR(name, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_GROUP2: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_DELETE_USER2: {
			X_NDR_OSTR(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_DELTA_MODIFY_COUNT: {
		} break;
		default: {
		} break;
	}
}

void netr_DELTA_ENUM::set_delta_type(netr_DeltaEnum v)
{
	delta_id_union.__uninit(x_ndr_switch_t(delta_type));
	delta_union.__uninit(x_ndr_switch_t(delta_type));
	delta_type = v;
	delta_id_union.__init(x_ndr_switch_t(delta_type));
	delta_union.__init(x_ndr_switch_t(delta_type));
}
netr_DELTA_ENUM::netr_DELTA_ENUM()
	: delta_type((netr_DeltaEnum)NETR_DELTA_DOMAIN)
{
	delta_id_union.__init(x_ndr_switch_t(delta_type));
	delta_union.__init(x_ndr_switch_t(delta_type));
}

netr_DELTA_ENUM::~netr_DELTA_ENUM()
{
	delta_id_union.__uninit(delta_type);
	delta_union.__uninit(delta_type);
}

netr_DELTA_ENUM::netr_DELTA_ENUM(const netr_DELTA_ENUM &other)
	: delta_type(other.delta_type)
{
	delta_id_union.__init(x_ndr_switch_t(delta_type), other.delta_id_union);
	delta_union.__init(x_ndr_switch_t(delta_type), other.delta_union);
}

netr_DELTA_ENUM &netr_DELTA_ENUM::operator=(const netr_DELTA_ENUM &other)
{
	delta_id_union.__uninit(x_ndr_switch_t(delta_type));
	delta_union.__uninit(x_ndr_switch_t(delta_type));
	delta_type = other.delta_type;
	delta_id_union.__init(x_ndr_switch_t(delta_type), other.delta_id_union);
	delta_union.__init(x_ndr_switch_t(delta_type), other.delta_union);
	return *this;
}

x_ndr_off_t netr_DELTA_ENUM::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(delta_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(delta_id_union, __ndr, __bpos, __epos, __flags, delta_type);
	X_NDR_SCALARS(delta_union, __ndr, __bpos, __epos, __flags, delta_type);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_ENUM::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(delta_id_union, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(delta_union, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_ENUM::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SWITCH(netr_DeltaEnum, delta_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(delta_id_union, __ndr, __bpos, __epos, __flags, delta_type);
	X_NDR_SCALARS(delta_union, __ndr, __bpos, __epos, __flags, delta_type);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_ENUM::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(delta_id_union, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(delta_union, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_ENUM::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(delta_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(delta_id_union, __ndr, __flags, delta_type);
	X_NDR_OSTR_NEXT(delta_union, __ndr, __flags, delta_type);
	(__ndr) << leave;
}



x_ndr_off_t netr_DELTA_ENUM_ARRAY::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(delta_enum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DELTA_ENUM_ARRAY::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(delta_enum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DELTA_ENUM_ARRAY::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(delta_enum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DELTA_ENUM_ARRAY::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(delta_enum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DELTA_ENUM_ARRAY::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(delta_enum, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_UAS_INFO_0::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(computer_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(timecreated, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(serial_number, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_UAS_INFO_0::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(computer_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(timecreated, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(serial_number, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_UAS_INFO_0::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(computer_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(timecreated, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(serial_number, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_AccountBuffer::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(blob, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_AccountBuffer::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(blob, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_AccountBuffer::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(blob, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 8> x_ndr_traits_t<netr_InfoFlags>::value_name_map = { {
		{ NETLOGON_REPLICATION_NEEDED, "NETLOGON_REPLICATION_NEEDED" },
		{ NETLOGON_REPLICATION_IN_PROGRESS, "NETLOGON_REPLICATION_IN_PROGRESS" },
		{ NETLOGON_FULL_SYNC_REPLICATION, "NETLOGON_FULL_SYNC_REPLICATION" },
		{ NETLOGON_REDO_NEEDED, "NETLOGON_REDO_NEEDED" },
		{ NETLOGON_HAS_IP, "NETLOGON_HAS_IP" },
		{ NETLOGON_HAS_TIMESERV, "NETLOGON_HAS_TIMESERV" },
		{ NETLOGON_DNS_UPDATE_FAILURE, "NETLOGON_DNS_UPDATE_FAILURE" },
		{ NETLOGON_VERIFY_STATUS_RETURNED, "NETLOGON_VERIFY_STATUS_RETURNED" },
} };

x_ndr_off_t netr_NETLOGON_INFO_1::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pdc_connection_status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_NETLOGON_INFO_1::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pdc_connection_status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_NETLOGON_INFO_1::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pdc_connection_status, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_NETLOGON_INFO_2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pdc_connection_status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trusted_dc_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(tc_connection_status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_NETLOGON_INFO_2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(trusted_dc_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_NETLOGON_INFO_2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pdc_connection_status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trusted_dc_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(tc_connection_status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_NETLOGON_INFO_2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(trusted_dc_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_NETLOGON_INFO_2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pdc_connection_status, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trusted_dc_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(tc_connection_status, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_NETLOGON_INFO_3::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_attempts, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_NETLOGON_INFO_3::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_attempts, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_NETLOGON_INFO_3::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_attempts, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown5, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_NETLOGON_INFO_4::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(trusted_dc_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trusted_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_NETLOGON_INFO_4::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(trusted_dc_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(trusted_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_NETLOGON_INFO_4::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(trusted_dc_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trusted_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_NETLOGON_INFO_4::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(trusted_dc_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(trusted_domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_NETLOGON_INFO_4::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(trusted_dc_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trusted_domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void netr_CONTROL_QUERY_INFORMATION::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: construct(info1); break;
		case 2: construct(info2); break;
		case 3: construct(info3); break;
		case 4: construct(info4); break;
		default: break;
	}
}

void netr_CONTROL_QUERY_INFORMATION::__init(x_ndr_switch_t __level, const netr_CONTROL_QUERY_INFORMATION &other)
{
	switch (__level) {
		case 1: construct(info1, other.info1); break;
		case 2: construct(info2, other.info2); break;
		case 3: construct(info3, other.info3); break;
		case 4: construct(info4, other.info4); break;
		default: break;
	}
}

void netr_CONTROL_QUERY_INFORMATION::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: destruct(info1); break;
		case 2: destruct(info2); break;
		case 3: destruct(info3); break;
		case 4: destruct(info4); break;
		default: break;
	}
}

x_ndr_off_t netr_CONTROL_QUERY_INFORMATION::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(info2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(info4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_CONTROL_QUERY_INFORMATION::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(info2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(info4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void netr_CONTROL_QUERY_INFORMATION::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(info1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_OSTR(info2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_OSTR(info3, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_OSTR(info4, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
}

const std::array<std::pair<uint32, const char *>, 16> x_ndr_traits_t<netr_LogonControlCode>::value_name_map = { {
	{ NETLOGON_CONTROL_QUERY, "NETLOGON_CONTROL_QUERY" },
	{ NETLOGON_CONTROL_REPLICATE, "NETLOGON_CONTROL_REPLICATE" },
	{ NETLOGON_CONTROL_SYNCHRONIZE, "NETLOGON_CONTROL_SYNCHRONIZE" },
	{ NETLOGON_CONTROL_PDC_REPLICATE, "NETLOGON_CONTROL_PDC_REPLICATE" },
	{ NETLOGON_CONTROL_REDISCOVER, "NETLOGON_CONTROL_REDISCOVER" },
	{ NETLOGON_CONTROL_TC_QUERY, "NETLOGON_CONTROL_TC_QUERY" },
	{ NETLOGON_CONTROL_TRANSPORT_NOTIFY, "NETLOGON_CONTROL_TRANSPORT_NOTIFY" },
	{ NETLOGON_CONTROL_FIND_USER, "NETLOGON_CONTROL_FIND_USER" },
	{ NETLOGON_CONTROL_CHANGE_PASSWORD, "NETLOGON_CONTROL_CHANGE_PASSWORD" },
	{ NETLOGON_CONTROL_TC_VERIFY, "NETLOGON_CONTROL_TC_VERIFY" },
	{ NETLOGON_CONTROL_FORCE_DNS_REG, "NETLOGON_CONTROL_FORCE_DNS_REG" },
	{ NETLOGON_CONTROL_QUERY_DNS_REG, "NETLOGON_CONTROL_QUERY_DNS_REG" },
	{ NETLOGON_CONTROL_BACKUP_CHANGE_LOG, "NETLOGON_CONTROL_BACKUP_CHANGE_LOG" },
	{ NETLOGON_CONTROL_TRUNCATE_LOG, "NETLOGON_CONTROL_TRUNCATE_LOG" },
	{ NETLOGON_CONTROL_SET_DBFLAG, "NETLOGON_CONTROL_SET_DBFLAG" },
	{ NETLOGON_CONTROL_BREAKPOINT, "NETLOGON_CONTROL_BREAKPOINT" },
} };



void netr_CONTROL_DATA_INFORMATION::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case NETLOGON_CONTROL_REDISCOVER: construct(domain); break;
		case NETLOGON_CONTROL_TC_QUERY: construct(domain); break;
		case NETLOGON_CONTROL_TRANSPORT_NOTIFY: construct(domain); break;
		case NETLOGON_CONTROL_CHANGE_PASSWORD: construct(domain); break;
		case NETLOGON_CONTROL_TC_VERIFY: construct(domain); break;
		case NETLOGON_CONTROL_FIND_USER: construct(user); break;
		case NETLOGON_CONTROL_SET_DBFLAG: construct(debug_level); break;
		default: break;
	}
}

void netr_CONTROL_DATA_INFORMATION::__init(x_ndr_switch_t __level, const netr_CONTROL_DATA_INFORMATION &other)
{
	switch (__level) {
		case NETLOGON_CONTROL_REDISCOVER: construct(domain, other.domain); break;
		case NETLOGON_CONTROL_TC_QUERY: construct(domain, other.domain); break;
		case NETLOGON_CONTROL_TRANSPORT_NOTIFY: construct(domain, other.domain); break;
		case NETLOGON_CONTROL_CHANGE_PASSWORD: construct(domain, other.domain); break;
		case NETLOGON_CONTROL_TC_VERIFY: construct(domain, other.domain); break;
		case NETLOGON_CONTROL_FIND_USER: construct(user, other.user); break;
		case NETLOGON_CONTROL_SET_DBFLAG: construct(debug_level, other.debug_level); break;
		default: break;
	}
}

void netr_CONTROL_DATA_INFORMATION::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case NETLOGON_CONTROL_REDISCOVER: destruct(domain); break;
		case NETLOGON_CONTROL_TC_QUERY: destruct(domain); break;
		case NETLOGON_CONTROL_TRANSPORT_NOTIFY: destruct(domain); break;
		case NETLOGON_CONTROL_CHANGE_PASSWORD: destruct(domain); break;
		case NETLOGON_CONTROL_TC_VERIFY: destruct(domain); break;
		case NETLOGON_CONTROL_FIND_USER: destruct(user); break;
		case NETLOGON_CONTROL_SET_DBFLAG: destruct(debug_level); break;
		default: break;
	}
}

x_ndr_off_t netr_CONTROL_DATA_INFORMATION::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NETLOGON_CONTROL_REDISCOVER: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TC_QUERY: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TRANSPORT_NOTIFY: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_CHANGE_PASSWORD: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TC_VERIFY: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_FIND_USER: {
			X_NDR_SCALARS(user, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_SET_DBFLAG: {
			X_NDR_SCALARS(debug_level, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_CONTROL_DATA_INFORMATION::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NETLOGON_CONTROL_REDISCOVER: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TC_QUERY: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TRANSPORT_NOTIFY: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_CHANGE_PASSWORD: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TC_VERIFY: {
			X_NDR_SCALARS(domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_FIND_USER: {
			X_NDR_SCALARS(user, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_SET_DBFLAG: {
			X_NDR_SCALARS(debug_level, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void netr_CONTROL_DATA_INFORMATION::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case NETLOGON_CONTROL_REDISCOVER: {
			X_NDR_OSTR(domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TC_QUERY: {
			X_NDR_OSTR(domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TRANSPORT_NOTIFY: {
			X_NDR_OSTR(domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_CHANGE_PASSWORD: {
			X_NDR_OSTR(domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_TC_VERIFY: {
			X_NDR_OSTR(domain, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_FIND_USER: {
			X_NDR_OSTR(user, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETLOGON_CONTROL_SET_DBFLAG: {
			X_NDR_OSTR(debug_level, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
}

const std::array<std::pair<uint32, const char *>, 26> x_ndr_traits_t<netr_NegotiateFlags>::value_name_map = { {
		{ NETLOGON_NEG_ACCOUNT_LOCKOUT, "NETLOGON_NEG_ACCOUNT_LOCKOUT" },
		{ NETLOGON_NEG_PERSISTENT_SAMREPL, "NETLOGON_NEG_PERSISTENT_SAMREPL" },
		{ NETLOGON_NEG_ARCFOUR, "NETLOGON_NEG_ARCFOUR" },
		{ NETLOGON_NEG_PROMOTION_COUNT, "NETLOGON_NEG_PROMOTION_COUNT" },
		{ NETLOGON_NEG_CHANGELOG_BDC, "NETLOGON_NEG_CHANGELOG_BDC" },
		{ NETLOGON_NEG_FULL_SYNC_REPL, "NETLOGON_NEG_FULL_SYNC_REPL" },
		{ NETLOGON_NEG_MULTIPLE_SIDS, "NETLOGON_NEG_MULTIPLE_SIDS" },
		{ NETLOGON_NEG_REDO, "NETLOGON_NEG_REDO" },
		{ NETLOGON_NEG_PASSWORD_CHANGE_REFUSAL, "NETLOGON_NEG_PASSWORD_CHANGE_REFUSAL" },
		{ NETLOGON_NEG_SEND_PASSWORD_INFO_PDC, "NETLOGON_NEG_SEND_PASSWORD_INFO_PDC" },
		{ NETLOGON_NEG_GENERIC_PASSTHROUGH, "NETLOGON_NEG_GENERIC_PASSTHROUGH" },
		{ NETLOGON_NEG_CONCURRENT_RPC, "NETLOGON_NEG_CONCURRENT_RPC" },
		{ NETLOGON_NEG_AVOID_ACCOUNT_DB_REPL, "NETLOGON_NEG_AVOID_ACCOUNT_DB_REPL" },
		{ NETLOGON_NEG_AVOID_SECURITYAUTH_DB_REPL, "NETLOGON_NEG_AVOID_SECURITYAUTH_DB_REPL" },
		{ NETLOGON_NEG_STRONG_KEYS, "NETLOGON_NEG_STRONG_KEYS" },
		{ NETLOGON_NEG_TRANSITIVE_TRUSTS, "NETLOGON_NEG_TRANSITIVE_TRUSTS" },
		{ NETLOGON_NEG_DNS_DOMAIN_TRUSTS, "NETLOGON_NEG_DNS_DOMAIN_TRUSTS" },
		{ NETLOGON_NEG_PASSWORD_SET2, "NETLOGON_NEG_PASSWORD_SET2" },
		{ NETLOGON_NEG_GETDOMAININFO, "NETLOGON_NEG_GETDOMAININFO" },
		{ NETLOGON_NEG_CROSS_FOREST_TRUSTS, "NETLOGON_NEG_CROSS_FOREST_TRUSTS" },
		{ NETLOGON_NEG_NEUTRALIZE_NT4_EMULATION, "NETLOGON_NEG_NEUTRALIZE_NT4_EMULATION" },
		{ NETLOGON_NEG_RODC_PASSTHROUGH, "NETLOGON_NEG_RODC_PASSTHROUGH" },
		{ NETLOGON_NEG_SUPPORTS_AES_SHA2, "NETLOGON_NEG_SUPPORTS_AES_SHA2" },
		{ NETLOGON_NEG_SUPPORTS_AES, "NETLOGON_NEG_SUPPORTS_AES" },
		{ NETLOGON_NEG_AUTHENTICATED_RPC_LSASS, "NETLOGON_NEG_AUTHENTICATED_RPC_LSASS" },
		{ NETLOGON_NEG_AUTHENTICATED_RPC, "NETLOGON_NEG_AUTHENTICATED_RPC" },
} };
const std::array<std::pair<uint16, const char *>, 9> x_ndr_traits_t<SyncStateEnum>::value_name_map = { {
	{ SYNCSTATE_NORMAL_STATE, "SYNCSTATE_NORMAL_STATE" },
	{ SYNCSTATE_DOMAIN_STATE, "SYNCSTATE_DOMAIN_STATE" },
	{ SYNCSTATE_GROUP_STATE, "SYNCSTATE_GROUP_STATE" },
	{ SYNCSTATE_UAS_BUILT_IN_GROUP_STATE, "SYNCSTATE_UAS_BUILT_IN_GROUP_STATE" },
	{ SYNCSTATE_USER_STATE, "SYNCSTATE_USER_STATE" },
	{ SYNCSTATE_GROUP_MEMBER_STATE, "SYNCSTATE_GROUP_MEMBER_STATE" },
	{ SYNCSTATE_ALIAS_STATE, "SYNCSTATE_ALIAS_STATE" },
	{ SYNCSTATE_ALIAS_MEMBER_STATE, "SYNCSTATE_ALIAS_MEMBER_STATE" },
	{ SYNCSTATE_SAM_DONE_STATE, "SYNCSTATE_SAM_DONE_STATE" },
} };


const std::array<std::pair<uint16, const char *>, 5> x_ndr_traits_t<netr_ChangeLogFlags>::value_name_map = { {
		{ NETR_CHANGELOG_IMMEDIATE_REPL_REQUIRED, "NETR_CHANGELOG_IMMEDIATE_REPL_REQUIRED" },
		{ NETR_CHANGELOG_CHANGED_PASSWORD, "NETR_CHANGELOG_CHANGED_PASSWORD" },
		{ NETR_CHANGELOG_SID_INCLUDED, "NETR_CHANGELOG_SID_INCLUDED" },
		{ NETR_CHANGELOG_NAME_INCLUDED, "NETR_CHANGELOG_NAME_INCLUDED" },
		{ NETR_CHANGELOG_FIRST_PROMOTION_OBJ, "NETR_CHANGELOG_FIRST_PROMOTION_OBJ" },
} };

void netr_ChangeLogObject::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case NETR_CHANGELOG_SID_INCLUDED: construct(object_sid); break;
		case NETR_CHANGELOG_NAME_INCLUDED: construct(object_name); break;
		default: break;
	}
}

void netr_ChangeLogObject::__init(x_ndr_switch_t __level, const netr_ChangeLogObject &other)
{
	switch (__level) {
		case NETR_CHANGELOG_SID_INCLUDED: construct(object_sid, other.object_sid); break;
		case NETR_CHANGELOG_NAME_INCLUDED: construct(object_name, other.object_name); break;
		default: break;
	}
}

void netr_ChangeLogObject::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case NETR_CHANGELOG_SID_INCLUDED: destruct(object_sid); break;
		case NETR_CHANGELOG_NAME_INCLUDED: destruct(object_name); break;
		default: break;
	}
}

x_ndr_off_t netr_ChangeLogObject::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NETR_CHANGELOG_SID_INCLUDED: {
			X_NDR_SCALARS(object_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_CHANGELOG_NAME_INCLUDED: {
			X_NDR_SCALARS(object_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_ChangeLogObject::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NETR_CHANGELOG_SID_INCLUDED: {
			X_NDR_SCALARS(object_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_CHANGELOG_NAME_INCLUDED: {
			X_NDR_SCALARS(object_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void netr_ChangeLogObject::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case NETR_CHANGELOG_SID_INCLUDED: {
			X_NDR_OSTR(object_sid, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case NETR_CHANGELOG_NAME_INCLUDED: {
			X_NDR_OSTR(object_name, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
}

void netr_ChangeLogEntry::set_flags(netr_ChangeLogFlags v)
{
	object.__uninit(x_ndr_switch_t(flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED)));
	flags = v;
	object.__init(x_ndr_switch_t(flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED)));
}
netr_ChangeLogEntry::netr_ChangeLogEntry()
	: flags((netr_ChangeLogFlags)NETR_CHANGELOG_SID_INCLUDED)
{
	object.__init(x_ndr_switch_t(flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED)));
}

netr_ChangeLogEntry::~netr_ChangeLogEntry()
{
	object.__uninit(flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED));
}

netr_ChangeLogEntry::netr_ChangeLogEntry(const netr_ChangeLogEntry &other)
	: flags(other.flags)
{
	object.__init(x_ndr_switch_t(flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED)), other.object);
}

netr_ChangeLogEntry &netr_ChangeLogEntry::operator=(const netr_ChangeLogEntry &other)
{
	object.__uninit(x_ndr_switch_t(flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED)));
	flags = other.flags;
	object.__init(x_ndr_switch_t(flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED)), other.object);
	return *this;
}

x_ndr_off_t netr_ChangeLogEntry::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(serial_number1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(serial_number2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(object_rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(db_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(delta_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(object, __ndr, __bpos, __epos, __flags, flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED));
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_ChangeLogEntry::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(object, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_ChangeLogEntry::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(serial_number1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(serial_number2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(object_rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SWITCH(netr_ChangeLogFlags, flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(db_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(delta_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(object, __ndr, __bpos, __epos, __flags, flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED));
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_ChangeLogEntry::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(object, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_ChangeLogEntry::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(serial_number1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(serial_number2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(object_rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(db_index, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(delta_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(object, __ndr, __flags, flags&(NETR_CHANGELOG_SID_INCLUDED|NETR_CHANGELOG_NAME_INCLUDED));
	(__ndr) << leave;
}



x_ndr_off_t netr_Blob::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_Blob::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_Blob::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_Blob::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_Blob::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 20> x_ndr_traits_t<netr_DsRGetDCName_flags>::value_name_map = { {
		{ DS_FORCE_REDISCOVERY, "DS_FORCE_REDISCOVERY" },
		{ DS_DIRECTORY_SERVICE_REQUIRED, "DS_DIRECTORY_SERVICE_REQUIRED" },
		{ DS_DIRECTORY_SERVICE_PREFERRED, "DS_DIRECTORY_SERVICE_PREFERRED" },
		{ DS_GC_SERVER_REQUIRED, "DS_GC_SERVER_REQUIRED" },
		{ DS_PDC_REQUIRED, "DS_PDC_REQUIRED" },
		{ DS_BACKGROUND_ONLY, "DS_BACKGROUND_ONLY" },
		{ DS_IP_REQUIRED, "DS_IP_REQUIRED" },
		{ DS_KDC_REQUIRED, "DS_KDC_REQUIRED" },
		{ DS_TIMESERV_REQUIRED, "DS_TIMESERV_REQUIRED" },
		{ DS_WRITABLE_REQUIRED, "DS_WRITABLE_REQUIRED" },
		{ DS_GOOD_TIMESERV_PREFERRED, "DS_GOOD_TIMESERV_PREFERRED" },
		{ DS_AVOID_SELF, "DS_AVOID_SELF" },
		{ DS_ONLY_LDAP_NEEDED, "DS_ONLY_LDAP_NEEDED" },
		{ DS_IS_FLAT_NAME, "DS_IS_FLAT_NAME" },
		{ DS_IS_DNS_NAME, "DS_IS_DNS_NAME" },
		{ DS_TRY_NEXTCLOSEST_SITE, "DS_TRY_NEXTCLOSEST_SITE" },
		{ DS_DIRECTORY_SERVICE_6_REQUIRED, "DS_DIRECTORY_SERVICE_6_REQUIRED" },
		{ DS_WEB_SERVICE_REQUIRED, "DS_WEB_SERVICE_REQUIRED" },
		{ DS_RETURN_DNS_NAME, "DS_RETURN_DNS_NAME" },
		{ DS_RETURN_FLAT_NAME, "DS_RETURN_FLAT_NAME" },
} };
const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<netr_DsRGetDCNameInfo_AddressType>::value_name_map = { {
	{ DS_ADDRESS_TYPE_INET, "DS_ADDRESS_TYPE_INET" },
	{ DS_ADDRESS_TYPE_NETBIOS, "DS_ADDRESS_TYPE_NETBIOS" },
} };


const std::array<std::pair<uint32, const char *>, 17> x_ndr_traits_t<netr_DsR_DcFlags>::value_name_map = { {
		{ DS_SERVER_PDC, "DS_SERVER_PDC" },
		{ DS_SERVER_GC, "DS_SERVER_GC" },
		{ DS_SERVER_LDAP, "DS_SERVER_LDAP" },
		{ DS_SERVER_DS, "DS_SERVER_DS" },
		{ DS_SERVER_KDC, "DS_SERVER_KDC" },
		{ DS_SERVER_TIMESERV, "DS_SERVER_TIMESERV" },
		{ DS_SERVER_CLOSEST, "DS_SERVER_CLOSEST" },
		{ DS_SERVER_WRITABLE, "DS_SERVER_WRITABLE" },
		{ DS_SERVER_GOOD_TIMESERV, "DS_SERVER_GOOD_TIMESERV" },
		{ DS_SERVER_NDNC, "DS_SERVER_NDNC" },
		{ DS_SERVER_SELECT_SECRET_DOMAIN_6, "DS_SERVER_SELECT_SECRET_DOMAIN_6" },
		{ DS_SERVER_FULL_SECRET_DOMAIN_6, "DS_SERVER_FULL_SECRET_DOMAIN_6" },
		{ DS_SERVER_WEBSERV, "DS_SERVER_WEBSERV" },
		{ DS_SERVER_DS_8, "DS_SERVER_DS_8" },
		{ DS_DNS_CONTROLLER, "DS_DNS_CONTROLLER" },
		{ DS_DNS_DOMAIN, "DS_DNS_DOMAIN" },
		{ DS_DNS_FOREST_ROOT, "DS_DNS_FOREST_ROOT" },
} };

x_ndr_off_t netr_DsRGetDCNameInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(dc_unc, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dc_address, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dc_address_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_guid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(forest_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dc_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dc_site_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(client_site_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DsRGetDCNameInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(dc_unc, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dc_address, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(forest_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dc_site_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(client_site_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DsRGetDCNameInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(dc_unc, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dc_address, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dc_address_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_guid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(forest_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dc_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dc_site_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(client_site_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DsRGetDCNameInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(dc_unc, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dc_address, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(forest_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dc_site_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(client_site_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DsRGetDCNameInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(dc_unc, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dc_address, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dc_address_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_guid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(forest_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dc_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dc_site_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(client_site_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_Capabilities::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(server_capabilities, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_Capabilities::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(server_capabilities, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void netr_Capabilities::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(server_capabilities, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}

const std::array<std::pair<uint32, const char *>, 8> x_ndr_traits_t<netr_TrustFlags>::value_name_map = { {
		{ NETR_TRUST_FLAG_IN_FOREST, "NETR_TRUST_FLAG_IN_FOREST" },
		{ NETR_TRUST_FLAG_OUTBOUND, "NETR_TRUST_FLAG_OUTBOUND" },
		{ NETR_TRUST_FLAG_TREEROOT, "NETR_TRUST_FLAG_TREEROOT" },
		{ NETR_TRUST_FLAG_PRIMARY, "NETR_TRUST_FLAG_PRIMARY" },
		{ NETR_TRUST_FLAG_NATIVE, "NETR_TRUST_FLAG_NATIVE" },
		{ NETR_TRUST_FLAG_INBOUND, "NETR_TRUST_FLAG_INBOUND" },
		{ NETR_TRUST_FLAG_MIT_KRB5, "NETR_TRUST_FLAG_MIT_KRB5" },
		{ NETR_TRUST_FLAG_AES, "NETR_TRUST_FLAG_AES" },
} };
const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<netr_WorkstationFlags>::value_name_map = { {
		{ NETR_WS_FLAG_HANDLES_INBOUND_TRUSTS, "NETR_WS_FLAG_HANDLES_INBOUND_TRUSTS" },
		{ NETR_WS_FLAG_HANDLES_SPN_UPDATE, "NETR_WS_FLAG_HANDLES_SPN_UPDATE" },
} };
const std::array<std::pair<uint16, const char *>, 13> x_ndr_traits_t<netr_SuiteMask>::value_name_map = { {
		{ NETR_VER_SUITE_BACKOFFICE, "NETR_VER_SUITE_BACKOFFICE" },
		{ NETR_VER_SUITE_BLADE, "NETR_VER_SUITE_BLADE" },
		{ NETR_VER_SUITE_COMPUTE_SERVER, "NETR_VER_SUITE_COMPUTE_SERVER" },
		{ NETR_VER_SUITE_DATACENTER, "NETR_VER_SUITE_DATACENTER" },
		{ NETR_VER_SUITE_ENTERPRISE, "NETR_VER_SUITE_ENTERPRISE" },
		{ NETR_VER_SUITE_EMBEDDEDNT, "NETR_VER_SUITE_EMBEDDEDNT" },
		{ NETR_VER_SUITE_PERSONAL, "NETR_VER_SUITE_PERSONAL" },
		{ NETR_VER_SUITE_SINGLEUSERTS, "NETR_VER_SUITE_SINGLEUSERTS" },
		{ NETR_VER_SUITE_SMALLBUSINESS, "NETR_VER_SUITE_SMALLBUSINESS" },
		{ NETR_VER_SUITE_SMALLBUSINESS_RESTRICTED, "NETR_VER_SUITE_SMALLBUSINESS_RESTRICTED" },
		{ NETR_VER_SUITE_STORAGE_SERVER, "NETR_VER_SUITE_STORAGE_SERVER" },
		{ NETR_VER_SUITE_TERMINAL, "NETR_VER_SUITE_TERMINAL" },
		{ NETR_VER_SUITE_WH_SERVER, "NETR_VER_SUITE_WH_SERVER" },
} };
const std::array<std::pair<uint8, const char *>, 3> x_ndr_traits_t<netr_ProductType>::value_name_map = { {
		{ NETR_VER_NT_DOMAIN_CONTROLLER, "NETR_VER_NT_DOMAIN_CONTROLLER" },
		{ NETR_VER_NT_SERVER, "NETR_VER_NT_SERVER" },
		{ NETR_VER_NT_WORKSTATION, "NETR_VER_NT_WORKSTATION" },
} };

x_ndr_off_t netr_LsaPolicyInformation::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_LsaPolicyInformation::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_LsaPolicyInformation::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_LsaPolicyInformation::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_LsaPolicyInformation::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(policy, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_trust_extension::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 length{8};
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint32 dummy{0};
	X_NDR_SCALARS(dummy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint32 size{8};
	X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parent_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_trust_extension::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 length;
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint32 dummy;
	X_NDR_SCALARS(dummy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint32 size;
	X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parent_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_trust_extension::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(parent_index, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_trust_extension_container::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 size{length};
	X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_trust_extension_container::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_trust_extension_container::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint16 size;
	X_NDR_SCALARS(size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_trust_extension_container::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_trust_extension_container::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_OneDomainInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_forestname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_guid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_extension, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_OneDomainInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_forestname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(trust_extension, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_OneDomainInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_forestname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_guid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_extension, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_OneDomainInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_domainname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_forestname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(domain_sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(trust_extension, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_OneDomainInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domainname, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_domainname, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_forestname, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_guid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_extension, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_string2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_string3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_string4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_long1, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_long2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_long3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_long4, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DomainInformation::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(primary_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trusted_domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lsa_policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_hostname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstation_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(supported_enc_types, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DomainInformation::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(primary_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(trusted_domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(lsa_policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_hostname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DomainInformation::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(primary_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trusted_domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lsa_policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_hostname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_string4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstation_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(supported_enc_types, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dummy_long4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DomainInformation::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(primary_domain, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(trusted_domains, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(lsa_policy, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_hostname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dummy_string4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DomainInformation::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(primary_domain, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trusted_domains, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lsa_policy, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_hostname, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_string2, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_string3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_string4, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(workstation_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(supported_enc_types, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_long3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dummy_long4, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void netr_DomainInfo::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: construct(domain_info); break;
		case 2: construct(lsa_policy_info); break;
	}
}

void netr_DomainInfo::__init(x_ndr_switch_t __level, const netr_DomainInfo &other)
{
	switch (__level) {
		case 1: construct(domain_info, other.domain_info); break;
		case 2: construct(lsa_policy_info, other.lsa_policy_info); break;
	}
}

void netr_DomainInfo::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: destruct(domain_info); break;
		case 2: destruct(lsa_policy_info); break;
	}
}

x_ndr_off_t netr_DomainInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(domain_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(lsa_policy_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t netr_DomainInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(domain_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(lsa_policy_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void netr_DomainInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(domain_info, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_OSTR(lsa_policy_info, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t NL_PASSWORD_VERSION::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(ReservedField, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(PasswordVersionNumber, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(PasswordVersionPresent, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t NL_PASSWORD_VERSION::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(ReservedField, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(PasswordVersionNumber, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(PasswordVersionPresent, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void NL_PASSWORD_VERSION::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ReservedField, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(PasswordVersionNumber, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(PasswordVersionPresent, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_CryptPassword::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t netr_CryptPassword::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void netr_CryptPassword::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(length, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DsRAddressToSitenamesWCtr::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sitename, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DsRAddressToSitenamesWCtr::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(sitename, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DsRAddressToSitenamesWCtr::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sitename, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DsRAddressToSitenamesWCtr::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(sitename, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DsRAddressToSitenamesWCtr::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sitename, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DsRAddress::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(buffer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DsRAddress::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(buffer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DsRAddress::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(buffer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DsRAddress::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(buffer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DsRAddress::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(buffer, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DomainTrust::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parent_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(guid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DomainTrust::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DomainTrust::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parent_index, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(trust_attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(guid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DomainTrust::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(netbios_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(dns_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(sid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DomainTrust::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(netbios_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(parent_index, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(trust_attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(guid, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DomainTrustList::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(array, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DomainTrustList::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(array, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DomainTrustList::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(array, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DomainTrustList::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(array, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DomainTrustList::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(array, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_DsRAddressToSitenamesExWCtr::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sitename, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(subnetname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_DsRAddressToSitenamesExWCtr::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(sitename, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(subnetname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_DsRAddressToSitenamesExWCtr::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sitename, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(subnetname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_DsRAddressToSitenamesExWCtr::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(sitename, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(subnetname, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_DsRAddressToSitenamesExWCtr::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sitename, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(subnetname, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t DcSitesCtr::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sites, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t DcSitesCtr::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(sites, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t DcSitesCtr::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sites, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t DcSitesCtr::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(sites, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void DcSitesCtr::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sites, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t netr_TrustInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(entry_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t netr_TrustInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t netr_TrustInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(entry_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t netr_TrustInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void netr_TrustInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(entry_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(entries, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 7> x_ndr_traits_t<netr_DnsType>::value_name_map = { {
	{ NlDnsLdapAtSite, "NlDnsLdapAtSite" },
	{ NlDnsGcAtSite, "NlDnsGcAtSite" },
	{ NlDnsDsaCname, "NlDnsDsaCname" },
	{ NlDnsKdcAtSite, "NlDnsKdcAtSite" },
	{ NlDnsDcAtSite, "NlDnsDcAtSite" },
	{ NlDnsRfc1510KdcAtSite, "NlDnsRfc1510KdcAtSite" },
	{ NlDnsGenericGcAtSite, "NlDnsGenericGcAtSite" },
} };


const std::array<std::pair<uint16, const char *>, 7> x_ndr_traits_t<netr_DnsDomainInfoType>::value_name_map = { {
	{ NlDnsInfoTypeNone, "NlDnsInfoTypeNone" },
	{ NlDnsDomainName, "NlDnsDomainName" },
	{ NlDnsDomainNameAlias, "NlDnsDomainNameAlias" },
	{ NlDnsForestName, "NlDnsForestName" },
	{ NlDnsForestNameAlias, "NlDnsForestNameAlias" },
	{ NlDnsNdncDomainName, "NlDnsNdncDomainName" },
	{ NlDnsRecordName, "NlDnsRecordName" },
} };



x_ndr_off_t NL_DNS_NAME_INFO::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domain_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domain_info_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(priority, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(weight, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(port, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_register, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t NL_DNS_NAME_INFO::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(dns_domain_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t NL_DNS_NAME_INFO::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domain_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_domain_info_type, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(priority, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(weight, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(port, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(dns_register, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t NL_DNS_NAME_INFO::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(dns_domain_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void NL_DNS_NAME_INFO::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_domain_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_domain_info_type, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(priority, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(weight, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(port, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(dns_register, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(status, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t NL_DNS_NAME_INFO_ARRAY::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t NL_DNS_NAME_INFO_ARRAY::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t NL_DNS_NAME_INFO_ARRAY::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t NL_DNS_NAME_INFO_ARRAY::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(names, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void NL_DNS_NAME_INFO_ARRAY::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(names, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}
#endif


// }
}
