/* ndr parser auto-generated by pidl */
	
#include "include/librpc/samr.hxx"
#include "include/librpc/ndr_smb.hxx"


namespace idl {

// namespace samr {
const std::array<std::pair<uint32, const char *>, 22> x_ndr_traits_t<samr_AcctFlags>::value_name_map = { {
		{ ACB_DISABLED, "ACB_DISABLED" },
		{ ACB_HOMDIRREQ, "ACB_HOMDIRREQ" },
		{ ACB_PWNOTREQ, "ACB_PWNOTREQ" },
		{ ACB_TEMPDUP, "ACB_TEMPDUP" },
		{ ACB_NORMAL, "ACB_NORMAL" },
		{ ACB_MNS, "ACB_MNS" },
		{ ACB_DOMTRUST, "ACB_DOMTRUST" },
		{ ACB_WSTRUST, "ACB_WSTRUST" },
		{ ACB_SVRTRUST, "ACB_SVRTRUST" },
		{ ACB_PWNOEXP, "ACB_PWNOEXP" },
		{ ACB_AUTOLOCK, "ACB_AUTOLOCK" },
		{ ACB_ENC_TXT_PWD_ALLOWED, "ACB_ENC_TXT_PWD_ALLOWED" },
		{ ACB_SMARTCARD_REQUIRED, "ACB_SMARTCARD_REQUIRED" },
		{ ACB_TRUSTED_FOR_DELEGATION, "ACB_TRUSTED_FOR_DELEGATION" },
		{ ACB_NOT_DELEGATED, "ACB_NOT_DELEGATED" },
		{ ACB_USE_DES_KEY_ONLY, "ACB_USE_DES_KEY_ONLY" },
		{ ACB_DONT_REQUIRE_PREAUTH, "ACB_DONT_REQUIRE_PREAUTH" },
		{ ACB_PW_EXPIRED, "ACB_PW_EXPIRED" },
		{ ACB_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION, "ACB_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION" },
		{ ACB_NO_AUTH_DATA_REQD, "ACB_NO_AUTH_DATA_REQD" },
		{ ACB_PARTIAL_SECRETS_ACCOUNT, "ACB_PARTIAL_SECRETS_ACCOUNT" },
		{ ACB_USE_AES_KEYS, "ACB_USE_AES_KEYS" },
} };
const std::array<std::pair<uint32, const char *>, 6> x_ndr_traits_t<samr_ConnectAccessMask>::value_name_map = { {
		{ SAMR_ACCESS_CONNECT_TO_SERVER, "SAMR_ACCESS_CONNECT_TO_SERVER" },
		{ SAMR_ACCESS_SHUTDOWN_SERVER, "SAMR_ACCESS_SHUTDOWN_SERVER" },
		{ SAMR_ACCESS_INITIALIZE_SERVER, "SAMR_ACCESS_INITIALIZE_SERVER" },
		{ SAMR_ACCESS_CREATE_DOMAIN, "SAMR_ACCESS_CREATE_DOMAIN" },
		{ SAMR_ACCESS_ENUM_DOMAINS, "SAMR_ACCESS_ENUM_DOMAINS" },
		{ SAMR_ACCESS_LOOKUP_DOMAIN, "SAMR_ACCESS_LOOKUP_DOMAIN" },
} };
const std::array<std::pair<uint32, const char *>, 11> x_ndr_traits_t<samr_UserAccessMask>::value_name_map = { {
		{ SAMR_USER_ACCESS_GET_NAME_ETC, "SAMR_USER_ACCESS_GET_NAME_ETC" },
		{ SAMR_USER_ACCESS_GET_LOCALE, "SAMR_USER_ACCESS_GET_LOCALE" },
		{ SAMR_USER_ACCESS_SET_LOC_COM, "SAMR_USER_ACCESS_SET_LOC_COM" },
		{ SAMR_USER_ACCESS_GET_LOGONINFO, "SAMR_USER_ACCESS_GET_LOGONINFO" },
		{ SAMR_USER_ACCESS_GET_ATTRIBUTES, "SAMR_USER_ACCESS_GET_ATTRIBUTES" },
		{ SAMR_USER_ACCESS_SET_ATTRIBUTES, "SAMR_USER_ACCESS_SET_ATTRIBUTES" },
		{ SAMR_USER_ACCESS_CHANGE_PASSWORD, "SAMR_USER_ACCESS_CHANGE_PASSWORD" },
		{ SAMR_USER_ACCESS_SET_PASSWORD, "SAMR_USER_ACCESS_SET_PASSWORD" },
		{ SAMR_USER_ACCESS_GET_GROUPS, "SAMR_USER_ACCESS_GET_GROUPS" },
		{ SAMR_USER_ACCESS_GET_GROUP_MEMBERSHIP, "SAMR_USER_ACCESS_GET_GROUP_MEMBERSHIP" },
		{ SAMR_USER_ACCESS_CHANGE_GROUP_MEMBERSHIP, "SAMR_USER_ACCESS_CHANGE_GROUP_MEMBERSHIP" },
} };
const std::array<std::pair<uint32, const char *>, 11> x_ndr_traits_t<samr_DomainAccessMask>::value_name_map = { {
		{ SAMR_DOMAIN_ACCESS_LOOKUP_INFO_1, "SAMR_DOMAIN_ACCESS_LOOKUP_INFO_1" },
		{ SAMR_DOMAIN_ACCESS_SET_INFO_1, "SAMR_DOMAIN_ACCESS_SET_INFO_1" },
		{ SAMR_DOMAIN_ACCESS_LOOKUP_INFO_2, "SAMR_DOMAIN_ACCESS_LOOKUP_INFO_2" },
		{ SAMR_DOMAIN_ACCESS_SET_INFO_2, "SAMR_DOMAIN_ACCESS_SET_INFO_2" },
		{ SAMR_DOMAIN_ACCESS_CREATE_USER, "SAMR_DOMAIN_ACCESS_CREATE_USER" },
		{ SAMR_DOMAIN_ACCESS_CREATE_GROUP, "SAMR_DOMAIN_ACCESS_CREATE_GROUP" },
		{ SAMR_DOMAIN_ACCESS_CREATE_ALIAS, "SAMR_DOMAIN_ACCESS_CREATE_ALIAS" },
		{ SAMR_DOMAIN_ACCESS_LOOKUP_ALIAS, "SAMR_DOMAIN_ACCESS_LOOKUP_ALIAS" },
		{ SAMR_DOMAIN_ACCESS_ENUM_ACCOUNTS, "SAMR_DOMAIN_ACCESS_ENUM_ACCOUNTS" },
		{ SAMR_DOMAIN_ACCESS_OPEN_ACCOUNT, "SAMR_DOMAIN_ACCESS_OPEN_ACCOUNT" },
		{ SAMR_DOMAIN_ACCESS_SET_INFO_3, "SAMR_DOMAIN_ACCESS_SET_INFO_3" },
} };
const std::array<std::pair<uint32, const char *>, 5> x_ndr_traits_t<samr_GroupAccessMask>::value_name_map = { {
		{ SAMR_GROUP_ACCESS_LOOKUP_INFO, "SAMR_GROUP_ACCESS_LOOKUP_INFO" },
		{ SAMR_GROUP_ACCESS_SET_INFO, "SAMR_GROUP_ACCESS_SET_INFO" },
		{ SAMR_GROUP_ACCESS_ADD_MEMBER, "SAMR_GROUP_ACCESS_ADD_MEMBER" },
		{ SAMR_GROUP_ACCESS_REMOVE_MEMBER, "SAMR_GROUP_ACCESS_REMOVE_MEMBER" },
		{ SAMR_GROUP_ACCESS_GET_MEMBERS, "SAMR_GROUP_ACCESS_GET_MEMBERS" },
} };
const std::array<std::pair<uint32, const char *>, 5> x_ndr_traits_t<samr_AliasAccessMask>::value_name_map = { {
		{ SAMR_ALIAS_ACCESS_ADD_MEMBER, "SAMR_ALIAS_ACCESS_ADD_MEMBER" },
		{ SAMR_ALIAS_ACCESS_REMOVE_MEMBER, "SAMR_ALIAS_ACCESS_REMOVE_MEMBER" },
		{ SAMR_ALIAS_ACCESS_GET_MEMBERS, "SAMR_ALIAS_ACCESS_GET_MEMBERS" },
		{ SAMR_ALIAS_ACCESS_LOOKUP_INFO, "SAMR_ALIAS_ACCESS_LOOKUP_INFO" },
		{ SAMR_ALIAS_ACCESS_SET_INFO, "SAMR_ALIAS_ACCESS_SET_INFO" },
} };

x_ndr_off_t samr_SamEntry::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_SamEntry::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_SamEntry::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_SamEntry::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_SamEntry::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(idx, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_SamArray::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_SamArray::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_SamArray::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_SamArray::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void samr_SamArray::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(entries, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 13> x_ndr_traits_t<samr_DomainInfoClass>::value_name_map = { {
	{ DomainPasswordInformation, "DomainPasswordInformation" },
	{ DomainGeneralInformation, "DomainGeneralInformation" },
	{ DomainLogoffInformation, "DomainLogoffInformation" },
	{ DomainOemInformation, "DomainOemInformation" },
	{ DomainNameInformation, "DomainNameInformation" },
	{ DomainReplicationInformation, "DomainReplicationInformation" },
	{ DomainServerRoleInformation, "DomainServerRoleInformation" },
	{ DomainModifiedInformation, "DomainModifiedInformation" },
	{ DomainStateInformation, "DomainStateInformation" },
	{ DomainUasInformation, "DomainUasInformation" },
	{ DomainGeneralInformation2, "DomainGeneralInformation2" },
	{ DomainLockoutInformation, "DomainLockoutInformation" },
	{ DomainModifiedInformation2, "DomainModifiedInformation2" },
} };


const std::array<std::pair<uint32, const char *>, 4> x_ndr_traits_t<samr_Role>::value_name_map = { {
	{ SAMR_ROLE_STANDALONE, "SAMR_ROLE_STANDALONE" },
	{ SAMR_ROLE_DOMAIN_MEMBER, "SAMR_ROLE_DOMAIN_MEMBER" },
	{ SAMR_ROLE_DOMAIN_BDC, "SAMR_ROLE_DOMAIN_BDC" },
	{ SAMR_ROLE_DOMAIN_PDC, "SAMR_ROLE_DOMAIN_PDC" },
} };


const std::array<std::pair<uint32, const char *>, 6> x_ndr_traits_t<samr_PasswordProperties>::value_name_map = { {
		{ DOMAIN_PASSWORD_COMPLEX, "DOMAIN_PASSWORD_COMPLEX" },
		{ DOMAIN_PASSWORD_NO_ANON_CHANGE, "DOMAIN_PASSWORD_NO_ANON_CHANGE" },
		{ DOMAIN_PASSWORD_NO_CLEAR_CHANGE, "DOMAIN_PASSWORD_NO_CLEAR_CHANGE" },
		{ DOMAIN_PASSWORD_LOCKOUT_ADMINS, "DOMAIN_PASSWORD_LOCKOUT_ADMINS" },
		{ DOMAIN_PASSWORD_STORE_CLEARTEXT, "DOMAIN_PASSWORD_STORE_CLEARTEXT" },
		{ DOMAIN_REFUSE_PASSWORD_CHANGE, "DOMAIN_REFUSE_PASSWORD_CHANGE" },
} };
const std::array<std::pair<uint32, const char *>, 2> x_ndr_traits_t<samr_DomainServerState>::value_name_map = { {
	{ DOMAIN_SERVER_ENABLED, "DOMAIN_SERVER_ENABLED" },
	{ DOMAIN_SERVER_DISABLED, "DOMAIN_SERVER_DISABLED" },
} };



x_ndr_off_t samr_DomInfo1::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(min_password_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_history_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_properties, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(min_password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_DomInfo1::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(min_password_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_history_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_properties, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(max_password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(min_password_age, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_DomInfo1::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(min_password_length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_history_length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_properties, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(max_password_age, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(min_password_age, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomGeneralInformation::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(force_logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_server_state, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(role, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_users, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_aliases, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DomGeneralInformation::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(primary, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DomGeneralInformation::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(force_logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_server_state, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(role, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_users, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_groups, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_aliases, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DomGeneralInformation::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(primary, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DomGeneralInformation::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(force_logoff_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(oem_information, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(primary, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(sequence_num, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_server_state, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(role, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown3, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(num_users, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(num_groups, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(num_aliases, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomInfo3::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(force_logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_DomInfo3::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(force_logoff_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_DomInfo3::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(force_logoff_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomOEMInformation::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DomOEMInformation::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DomOEMInformation::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DomOEMInformation::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(oem_information, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DomOEMInformation::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(oem_information, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomInfo5::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DomInfo5::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DomInfo5::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DomInfo5::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(domain_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DomInfo5::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domain_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomInfo6::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(primary, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DomInfo6::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(primary, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DomInfo6::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(primary, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DomInfo6::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(primary, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DomInfo6::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(primary, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomInfo7::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(role, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_DomInfo7::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(role, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_DomInfo7::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(role, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomInfo8::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_DomInfo8::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_DomInfo8::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sequence_num, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_create_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomInfo9::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_server_state, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_DomInfo9::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(domain_server_state, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_DomInfo9::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(domain_server_state, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomGeneralInformation2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(general, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_duration, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_window, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_threshold, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DomGeneralInformation2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(general, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DomGeneralInformation2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(general, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_duration, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_window, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_threshold, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DomGeneralInformation2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(general, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DomGeneralInformation2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(general, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lockout_duration, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lockout_window, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lockout_threshold, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomInfo12::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(lockout_duration, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_window, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_threshold, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_DomInfo12::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(lockout_duration, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_window, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_threshold, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_DomInfo12::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(lockout_duration, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lockout_window, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lockout_threshold, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DomInfo13::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(modified_count_at_last_promotion, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_DomInfo13::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(sequence_num, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(domain_create_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(modified_count_at_last_promotion, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_DomInfo13::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(sequence_num, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(domain_create_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(modified_count_at_last_promotion, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void samr_DomainInfo::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: construct(info1); break;
		case 2: construct(general); break;
		case 3: construct(info3); break;
		case 4: construct(oem); break;
		case 5: construct(info5); break;
		case 6: construct(info6); break;
		case 7: construct(info7); break;
		case 8: construct(info8); break;
		case 9: construct(info9); break;
		case 11: construct(general2); break;
		case 12: construct(info12); break;
		case 13: construct(info13); break;
	}
}

void samr_DomainInfo::__init(x_ndr_switch_t __level, const samr_DomainInfo &other)
{
	switch (__level) {
		case 1: construct(info1, other.info1); break;
		case 2: construct(general, other.general); break;
		case 3: construct(info3, other.info3); break;
		case 4: construct(oem, other.oem); break;
		case 5: construct(info5, other.info5); break;
		case 6: construct(info6, other.info6); break;
		case 7: construct(info7, other.info7); break;
		case 8: construct(info8, other.info8); break;
		case 9: construct(info9, other.info9); break;
		case 11: construct(general2, other.general2); break;
		case 12: construct(info12, other.info12); break;
		case 13: construct(info13, other.info13); break;
	}
}

void samr_DomainInfo::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: destruct(info1); break;
		case 2: destruct(general); break;
		case 3: destruct(info3); break;
		case 4: destruct(oem); break;
		case 5: destruct(info5); break;
		case 6: destruct(info6); break;
		case 7: destruct(info7); break;
		case 8: destruct(info8); break;
		case 9: destruct(info9); break;
		case 11: destruct(general2); break;
		case 12: destruct(info12); break;
		case 13: destruct(info13); break;
	}
}

x_ndr_off_t samr_DomainInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(general, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(oem, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_SCALARS(info5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 6: {
			X_NDR_SCALARS(info6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 7: {
			X_NDR_SCALARS(info7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 8: {
			X_NDR_SCALARS(info8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 9: {
			X_NDR_SCALARS(info9, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 11: {
			X_NDR_SCALARS(general2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 12: {
			X_NDR_SCALARS(info12, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 13: {
			X_NDR_SCALARS(info13, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t samr_DomainInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(general, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(oem, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_SCALARS(info5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 6: {
			X_NDR_SCALARS(info6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 7: {
			X_NDR_SCALARS(info7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 8: {
			X_NDR_SCALARS(info8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 9: {
			X_NDR_SCALARS(info9, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 11: {
			X_NDR_SCALARS(general2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 12: {
			X_NDR_SCALARS(info12, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 13: {
			X_NDR_SCALARS(info13, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void samr_DomainInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(info1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_OSTR(general, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_OSTR(info3, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_OSTR(oem, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_OSTR(info5, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 6: {
			X_NDR_OSTR(info6, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 7: {
			X_NDR_OSTR(info7, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 8: {
			X_NDR_OSTR(info8, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 9: {
			X_NDR_OSTR(info9, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 11: {
			X_NDR_OSTR(general2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 12: {
			X_NDR_OSTR(info12, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 13: {
			X_NDR_OSTR(info13, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t samr_Ids::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(ids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_Ids::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(ids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_Ids::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(ids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_Ids::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(ids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void samr_Ids::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(ids, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 7> x_ndr_traits_t<samr_GroupAttrs>::value_name_map = { {
		{ SE_GROUP_MANDATORY, "SE_GROUP_MANDATORY" },
		{ SE_GROUP_ENABLED_BY_DEFAULT, "SE_GROUP_ENABLED_BY_DEFAULT" },
		{ SE_GROUP_ENABLED, "SE_GROUP_ENABLED" },
		{ SE_GROUP_OWNER, "SE_GROUP_OWNER" },
		{ SE_GROUP_USE_FOR_DENY_ONLY, "SE_GROUP_USE_FOR_DENY_ONLY" },
		{ SE_GROUP_RESOURCE, "SE_GROUP_RESOURCE" },
		{ SE_GROUP_LOGON_ID, "SE_GROUP_LOGON_ID" },
} };

x_ndr_off_t samr_GroupInfoAll::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_members, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_GroupInfoAll::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_GroupInfoAll::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_members, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_GroupInfoAll::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_GroupInfoAll::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(num_members, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_GroupInfoAttributes::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_GroupInfoAttributes::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_GroupInfoAttributes::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_GroupInfoDescription::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_GroupInfoDescription::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_GroupInfoDescription::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_GroupInfoDescription::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_GroupInfoDescription::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 5> x_ndr_traits_t<samr_GroupInfoEnum>::value_name_map = { {
	{ GROUPINFOALL, "GROUPINFOALL" },
	{ GROUPINFONAME, "GROUPINFONAME" },
	{ GROUPINFOATTRIBUTES, "GROUPINFOATTRIBUTES" },
	{ GROUPINFODESCRIPTION, "GROUPINFODESCRIPTION" },
	{ GROUPINFOALL2, "GROUPINFOALL2" },
} };



void samr_GroupInfo::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case GROUPINFOALL: construct(all); break;
		case GROUPINFONAME: construct(name); break;
		case GROUPINFOATTRIBUTES: construct(attributes); break;
		case GROUPINFODESCRIPTION: construct(description); break;
		case GROUPINFOALL2: construct(all2); break;
	}
}

void samr_GroupInfo::__init(x_ndr_switch_t __level, const samr_GroupInfo &other)
{
	switch (__level) {
		case GROUPINFOALL: construct(all, other.all); break;
		case GROUPINFONAME: construct(name, other.name); break;
		case GROUPINFOATTRIBUTES: construct(attributes, other.attributes); break;
		case GROUPINFODESCRIPTION: construct(description, other.description); break;
		case GROUPINFOALL2: construct(all2, other.all2); break;
	}
}

void samr_GroupInfo::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case GROUPINFOALL: destruct(all); break;
		case GROUPINFONAME: destruct(name); break;
		case GROUPINFOATTRIBUTES: destruct(attributes); break;
		case GROUPINFODESCRIPTION: destruct(description); break;
		case GROUPINFOALL2: destruct(all2); break;
	}
}

x_ndr_off_t samr_GroupInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case GROUPINFOALL: {
			X_NDR_SCALARS(all, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFONAME: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFOATTRIBUTES: {
			X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFODESCRIPTION: {
			X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFOALL2: {
			X_NDR_SCALARS(all2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t samr_GroupInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case GROUPINFOALL: {
			X_NDR_SCALARS(all, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFONAME: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFOATTRIBUTES: {
			X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFODESCRIPTION: {
			X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFOALL2: {
			X_NDR_SCALARS(all2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void samr_GroupInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case GROUPINFOALL: {
			X_NDR_OSTR(all, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFONAME: {
			X_NDR_OSTR(name, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFOATTRIBUTES: {
			X_NDR_OSTR(attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFODESCRIPTION: {
			X_NDR_OSTR(description, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case GROUPINFOALL2: {
			X_NDR_OSTR(all2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t samr_RidAttrArray::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_RidAttrArray::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_RidAttrArray::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_UNIQUE_PTR(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_RidAttrArray::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void samr_RidAttrArray::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(rids, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_AliasInfoAll::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_members, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_AliasInfoAll::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_AliasInfoAll::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(num_members, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_AliasInfoAll::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_AliasInfoAll::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(num_members, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint16, const char *>, 3> x_ndr_traits_t<samr_AliasInfoEnum>::value_name_map = { {
	{ ALIASINFOALL, "ALIASINFOALL" },
	{ ALIASINFONAME, "ALIASINFONAME" },
	{ ALIASINFODESCRIPTION, "ALIASINFODESCRIPTION" },
} };



void samr_AliasInfo::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case ALIASINFOALL: construct(all); break;
		case ALIASINFONAME: construct(name); break;
		case ALIASINFODESCRIPTION: construct(description); break;
	}
}

void samr_AliasInfo::__init(x_ndr_switch_t __level, const samr_AliasInfo &other)
{
	switch (__level) {
		case ALIASINFOALL: construct(all, other.all); break;
		case ALIASINFONAME: construct(name, other.name); break;
		case ALIASINFODESCRIPTION: construct(description, other.description); break;
	}
}

void samr_AliasInfo::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case ALIASINFOALL: destruct(all); break;
		case ALIASINFONAME: destruct(name); break;
		case ALIASINFODESCRIPTION: destruct(description); break;
	}
}

x_ndr_off_t samr_AliasInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case ALIASINFOALL: {
			X_NDR_SCALARS(all, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case ALIASINFONAME: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case ALIASINFODESCRIPTION: {
			X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t samr_AliasInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case ALIASINFOALL: {
			X_NDR_SCALARS(all, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case ALIASINFONAME: {
			X_NDR_SCALARS(name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case ALIASINFODESCRIPTION: {
			X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void samr_AliasInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case ALIASINFOALL: {
			X_NDR_OSTR(all, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case ALIASINFONAME: {
			X_NDR_OSTR(name, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case ALIASINFODESCRIPTION: {
			X_NDR_OSTR(description, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}

const std::array<std::pair<uint16, const char *>, 23> x_ndr_traits_t<samr_UserInfoLevel>::value_name_map = { {
	{ UserGeneralInformation, "UserGeneralInformation" },
	{ UserPreferencesInformation, "UserPreferencesInformation" },
	{ UserLogonInformation, "UserLogonInformation" },
	{ UserLogonHoursInformation, "UserLogonHoursInformation" },
	{ UserAccountInformation, "UserAccountInformation" },
	{ UserNameInformation, "UserNameInformation" },
	{ UserAccountNameInformation, "UserAccountNameInformation" },
	{ UserFullNameInformation, "UserFullNameInformation" },
	{ UserPrimaryGroupInformation, "UserPrimaryGroupInformation" },
	{ UserHomeInformation, "UserHomeInformation" },
	{ UserScriptInformation, "UserScriptInformation" },
	{ UserProfileInformation, "UserProfileInformation" },
	{ UserAdminCommentInformation, "UserAdminCommentInformation" },
	{ UserWorkStationsInformation, "UserWorkStationsInformation" },
	{ UserControlInformation, "UserControlInformation" },
	{ UserExpiresInformation, "UserExpiresInformation" },
	{ UserInternal1Information, "UserInternal1Information" },
	{ UserParametersInformation, "UserParametersInformation" },
	{ UserAllInformation, "UserAllInformation" },
	{ UserInternal4Information, "UserInternal4Information" },
	{ UserInternal5Information, "UserInternal5Information" },
	{ UserInternal4InformationNew, "UserInternal4InformationNew" },
	{ UserInternal5InformationNew, "UserInternal5InformationNew" },
} };



x_ndr_off_t samr_UserInfo1::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo1::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo1::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo1::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo1::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(primary_gid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(comment, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(country_code, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(code_page, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(country_code, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(code_page, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(reserved, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(comment, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(reserved, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(country_code, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(code_page, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo3::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(allow_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(force_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo3::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo3::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(allow_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(force_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo3::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo3::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(primary_gid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_directory, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_drive, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_script, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(profile_path, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(workstations, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logon, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logoff, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(allow_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(force_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_hours, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_password_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo4::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo4::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo4::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo4::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo4::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(logon_hours, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo5::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_expiry, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo5::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo5::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_expiry, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo5::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo5::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(primary_gid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_directory, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_drive, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_script, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(profile_path, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(workstations, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logon, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logoff, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_hours, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_password_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_expiry, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo6::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo6::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo6::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo6::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo6::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo7::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo7::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo7::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo7::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo7::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo8::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo8::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo8::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo8::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo8::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo9::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_UserInfo9::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_UserInfo9::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(primary_gid, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo10::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo10::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo10::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo10::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo10::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(home_directory, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_drive, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo11::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo11::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo11::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo11::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo11::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(logon_script, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo12::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo12::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo12::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo12::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo12::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(profile_path, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo13::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo13::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo13::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo13::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo13::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo14::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo14::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo14::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo14::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo14::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(workstations, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo16::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_UserInfo16::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_UserInfo16::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo17::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(acct_expiry, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_UserInfo17::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(acct_expiry, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_UserInfo17::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(acct_expiry, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_Password::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_Password::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_Password::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(hash, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo18::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(nt_pwd, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_pwd, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_pwd_active, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_pwd_active, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_UserInfo18::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(nt_pwd, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_pwd, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_pwd_active, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_pwd_active, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_UserInfo18::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(nt_pwd, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lm_pwd, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(nt_pwd_active, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lm_pwd_active, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_expired, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo20::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo20::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo20::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo20::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo20::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(parameters, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 30> x_ndr_traits_t<samr_FieldsPresent>::value_name_map = { {
		{ SAMR_FIELD_ACCOUNT_NAME, "SAMR_FIELD_ACCOUNT_NAME" },
		{ SAMR_FIELD_FULL_NAME, "SAMR_FIELD_FULL_NAME" },
		{ SAMR_FIELD_RID, "SAMR_FIELD_RID" },
		{ SAMR_FIELD_PRIMARY_GID, "SAMR_FIELD_PRIMARY_GID" },
		{ SAMR_FIELD_DESCRIPTION, "SAMR_FIELD_DESCRIPTION" },
		{ SAMR_FIELD_COMMENT, "SAMR_FIELD_COMMENT" },
		{ SAMR_FIELD_HOME_DIRECTORY, "SAMR_FIELD_HOME_DIRECTORY" },
		{ SAMR_FIELD_HOME_DRIVE, "SAMR_FIELD_HOME_DRIVE" },
		{ SAMR_FIELD_LOGON_SCRIPT, "SAMR_FIELD_LOGON_SCRIPT" },
		{ SAMR_FIELD_PROFILE_PATH, "SAMR_FIELD_PROFILE_PATH" },
		{ SAMR_FIELD_WORKSTATIONS, "SAMR_FIELD_WORKSTATIONS" },
		{ SAMR_FIELD_LAST_LOGON, "SAMR_FIELD_LAST_LOGON" },
		{ SAMR_FIELD_LAST_LOGOFF, "SAMR_FIELD_LAST_LOGOFF" },
		{ SAMR_FIELD_LOGON_HOURS, "SAMR_FIELD_LOGON_HOURS" },
		{ SAMR_FIELD_BAD_PWD_COUNT, "SAMR_FIELD_BAD_PWD_COUNT" },
		{ SAMR_FIELD_NUM_LOGONS, "SAMR_FIELD_NUM_LOGONS" },
		{ SAMR_FIELD_ALLOW_PWD_CHANGE, "SAMR_FIELD_ALLOW_PWD_CHANGE" },
		{ SAMR_FIELD_FORCE_PWD_CHANGE, "SAMR_FIELD_FORCE_PWD_CHANGE" },
		{ SAMR_FIELD_LAST_PWD_CHANGE, "SAMR_FIELD_LAST_PWD_CHANGE" },
		{ SAMR_FIELD_ACCT_EXPIRY, "SAMR_FIELD_ACCT_EXPIRY" },
		{ SAMR_FIELD_ACCT_FLAGS, "SAMR_FIELD_ACCT_FLAGS" },
		{ SAMR_FIELD_PARAMETERS, "SAMR_FIELD_PARAMETERS" },
		{ SAMR_FIELD_COUNTRY_CODE, "SAMR_FIELD_COUNTRY_CODE" },
		{ SAMR_FIELD_CODE_PAGE, "SAMR_FIELD_CODE_PAGE" },
		{ SAMR_FIELD_NT_PASSWORD_PRESENT, "SAMR_FIELD_NT_PASSWORD_PRESENT" },
		{ SAMR_FIELD_LM_PASSWORD_PRESENT, "SAMR_FIELD_LM_PASSWORD_PRESENT" },
		{ SAMR_FIELD_PRIVATE_DATA, "SAMR_FIELD_PRIVATE_DATA" },
		{ SAMR_FIELD_EXPIRED_FLAG, "SAMR_FIELD_EXPIRED_FLAG" },
		{ SAMR_FIELD_SEC_DESC, "SAMR_FIELD_SEC_DESC" },
		{ SAMR_FIELD_OWF_PWD, "SAMR_FIELD_OWF_PWD" },
} };

x_ndr_off_t samr_UserInfo21::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_expiry, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(allow_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(force_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_owf_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_owf_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(private_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(buffer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(fields_present, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(country_code, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(code_page, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_password_set, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_password_set, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(private_data_sensitive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo21::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(lm_owf_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(nt_owf_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(private_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_buf_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(buffer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_buf_count, x_ndr_I_t());
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

x_ndr_off_t samr_UserInfo21::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(last_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_logoff, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_expiry, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(allow_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(force_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_owf_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_owf_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(private_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(buffer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(primary_gid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(fields_present, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(logon_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(country_code, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(code_page, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lm_password_set, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(nt_password_set, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(private_data_sensitive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo21::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_directory, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(home_drive, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(logon_script, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(profile_path, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(workstations, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(comment, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(parameters, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(lm_owf_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(nt_owf_password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(private_data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_buf_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(buffer, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_buf_count, x_ndr_I_t());
	X_NDR_BUFFERS(logon_hours, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo21::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(last_logon, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_logoff, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_expiry, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(allow_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(force_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_directory, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(home_drive, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_script, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(profile_path, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(workstations, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(comment, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(parameters, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lm_owf_password, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(nt_owf_password, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(private_data, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(buffer, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(primary_gid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(fields_present, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_hours, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_password_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(logon_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(country_code, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(code_page, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lm_password_set, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(nt_password_set, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_expired, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(private_data_sensitive, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_CryptPassword::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_CryptPassword::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_CryptPassword::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo23::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo23::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo23::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo23::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo23::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo24::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_UserInfo24::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_UserInfo24::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(password, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_expired, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_CryptPasswordEx::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_CryptPasswordEx::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_CryptPasswordEx::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo25::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_UserInfo25::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_UserInfo25::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_UserInfo25::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_UserInfo25::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_UserInfo26::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_UserInfo26::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_expired, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_UserInfo26::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(password, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_expired, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void samr_UserInfo::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: construct(info1); break;
		case 2: construct(info2); break;
		case 3: construct(info3); break;
		case 4: construct(info4); break;
		case 5: construct(info5); break;
		case 6: construct(info6); break;
		case 7: construct(info7); break;
		case 8: construct(info8); break;
		case 9: construct(info9); break;
		case 10: construct(info10); break;
		case 11: construct(info11); break;
		case 12: construct(info12); break;
		case 13: construct(info13); break;
		case 14: construct(info14); break;
		case 16: construct(info16); break;
		case 17: construct(info17); break;
		case 18: construct(info18); break;
		case 20: construct(info20); break;
		case 21: construct(info21); break;
		case 23: construct(info23); break;
		case 24: construct(info24); break;
		case 25: construct(info25); break;
		case 26: construct(info26); break;
	}
}

void samr_UserInfo::__init(x_ndr_switch_t __level, const samr_UserInfo &other)
{
	switch (__level) {
		case 1: construct(info1, other.info1); break;
		case 2: construct(info2, other.info2); break;
		case 3: construct(info3, other.info3); break;
		case 4: construct(info4, other.info4); break;
		case 5: construct(info5, other.info5); break;
		case 6: construct(info6, other.info6); break;
		case 7: construct(info7, other.info7); break;
		case 8: construct(info8, other.info8); break;
		case 9: construct(info9, other.info9); break;
		case 10: construct(info10, other.info10); break;
		case 11: construct(info11, other.info11); break;
		case 12: construct(info12, other.info12); break;
		case 13: construct(info13, other.info13); break;
		case 14: construct(info14, other.info14); break;
		case 16: construct(info16, other.info16); break;
		case 17: construct(info17, other.info17); break;
		case 18: construct(info18, other.info18); break;
		case 20: construct(info20, other.info20); break;
		case 21: construct(info21, other.info21); break;
		case 23: construct(info23, other.info23); break;
		case 24: construct(info24, other.info24); break;
		case 25: construct(info25, other.info25); break;
		case 26: construct(info26, other.info26); break;
	}
}

void samr_UserInfo::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: destruct(info1); break;
		case 2: destruct(info2); break;
		case 3: destruct(info3); break;
		case 4: destruct(info4); break;
		case 5: destruct(info5); break;
		case 6: destruct(info6); break;
		case 7: destruct(info7); break;
		case 8: destruct(info8); break;
		case 9: destruct(info9); break;
		case 10: destruct(info10); break;
		case 11: destruct(info11); break;
		case 12: destruct(info12); break;
		case 13: destruct(info13); break;
		case 14: destruct(info14); break;
		case 16: destruct(info16); break;
		case 17: destruct(info17); break;
		case 18: destruct(info18); break;
		case 20: destruct(info20); break;
		case 21: destruct(info21); break;
		case 23: destruct(info23); break;
		case 24: destruct(info24); break;
		case 25: destruct(info25); break;
		case 26: destruct(info26); break;
	}
}

x_ndr_off_t samr_UserInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(info2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(info4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_SCALARS(info5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 6: {
			X_NDR_SCALARS(info6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 7: {
			X_NDR_SCALARS(info7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 8: {
			X_NDR_SCALARS(info8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 9: {
			X_NDR_SCALARS(info9, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 10: {
			X_NDR_SCALARS(info10, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 11: {
			X_NDR_SCALARS(info11, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 12: {
			X_NDR_SCALARS(info12, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 13: {
			X_NDR_SCALARS(info13, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 14: {
			X_NDR_SCALARS(info14, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 16: {
			X_NDR_SCALARS(info16, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 17: {
			X_NDR_SCALARS(info17, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 18: {
			X_NDR_SCALARS(info18, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 20: {
			X_NDR_SCALARS(info20, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 21: {
			X_NDR_SCALARS(info21, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 23: {
			X_NDR_SCALARS(info23, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 24: {
			X_NDR_SCALARS(info24, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 25: {
			X_NDR_SCALARS(info25, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 26: {
			X_NDR_SCALARS(info26, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t samr_UserInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(info2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(info4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_SCALARS(info5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 6: {
			X_NDR_SCALARS(info6, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 7: {
			X_NDR_SCALARS(info7, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 8: {
			X_NDR_SCALARS(info8, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 9: {
			X_NDR_SCALARS(info9, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 10: {
			X_NDR_SCALARS(info10, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 11: {
			X_NDR_SCALARS(info11, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 12: {
			X_NDR_SCALARS(info12, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 13: {
			X_NDR_SCALARS(info13, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 14: {
			X_NDR_SCALARS(info14, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 16: {
			X_NDR_SCALARS(info16, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 17: {
			X_NDR_SCALARS(info17, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 18: {
			X_NDR_SCALARS(info18, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 20: {
			X_NDR_SCALARS(info20, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 21: {
			X_NDR_SCALARS(info21, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 23: {
			X_NDR_SCALARS(info23, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 24: {
			X_NDR_SCALARS(info24, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 25: {
			X_NDR_SCALARS(info25, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 26: {
			X_NDR_SCALARS(info26, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void samr_UserInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(info1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_OSTR(info2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_OSTR(info3, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_OSTR(info4, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_OSTR(info5, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 6: {
			X_NDR_OSTR(info6, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 7: {
			X_NDR_OSTR(info7, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 8: {
			X_NDR_OSTR(info8, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 9: {
			X_NDR_OSTR(info9, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 10: {
			X_NDR_OSTR(info10, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 11: {
			X_NDR_OSTR(info11, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 12: {
			X_NDR_OSTR(info12, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 13: {
			X_NDR_OSTR(info13, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 14: {
			X_NDR_OSTR(info14, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 16: {
			X_NDR_OSTR(info16, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 17: {
			X_NDR_OSTR(info17, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 18: {
			X_NDR_OSTR(info18, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 20: {
			X_NDR_OSTR(info20, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 21: {
			X_NDR_OSTR(info21, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 23: {
			X_NDR_OSTR(info23, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 24: {
			X_NDR_OSTR(info24, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 25: {
			X_NDR_OSTR(info25, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 26: {
			X_NDR_OSTR(info26, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t samr_RidWithAttribute::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_RidWithAttribute::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(attributes, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_RidWithAttribute::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(attributes, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_RidWithAttributeArray::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_RidWithAttributeArray::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_RidWithAttributeArray::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_RidWithAttributeArray::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(rids, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void samr_RidWithAttributeArray::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(rids, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DispEntryGeneral::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispEntryGeneral::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DispEntryGeneral::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DispEntryGeneral::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(full_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DispEntryGeneral::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(idx, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(full_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DispInfoGeneral::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispInfoGeneral::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_DispInfoGeneral::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispInfoGeneral::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void samr_DispInfoGeneral::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(entries, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DispEntryFull::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispEntryFull::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DispEntryFull::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DispEntryFull::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DispEntryFull::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(idx, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DispInfoFull::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispInfoFull::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_DispInfoFull::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispInfoFull::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void samr_DispInfoFull::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(entries, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DispEntryFullGroup::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispEntryFullGroup::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DispEntryFullGroup::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(rid, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(acct_flags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DispEntryFullGroup::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(description, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DispEntryFullGroup::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(idx, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(rid, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(acct_flags, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(description, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DispInfoFullGroups::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispInfoFullGroups::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_DispInfoFullGroups::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispInfoFullGroups::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void samr_DispInfoFullGroups::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(entries, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DispEntryAscii::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispEntryAscii::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_DispEntryAscii::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(idx, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_DispEntryAscii::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(account_name, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_DispEntryAscii::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(idx, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account_name, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_DispInfoAscii::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispInfoAscii::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_DispInfoAscii::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_DispInfoAscii::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_count = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(entries, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_count, x_ndr_I_t());
	return __bpos;
}

void samr_DispInfoAscii::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(entries, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void samr_DispInfo::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: construct(info1); break;
		case 2: construct(info2); break;
		case 3: construct(info3); break;
		case 4: construct(info4); break;
		case 5: construct(info5); break;
	}
}

void samr_DispInfo::__init(x_ndr_switch_t __level, const samr_DispInfo &other)
{
	switch (__level) {
		case 1: construct(info1, other.info1); break;
		case 2: construct(info2, other.info2); break;
		case 3: construct(info3, other.info3); break;
		case 4: construct(info4, other.info4); break;
		case 5: construct(info5, other.info5); break;
	}
}

void samr_DispInfo::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: destruct(info1); break;
		case 2: destruct(info2); break;
		case 3: destruct(info3); break;
		case 4: destruct(info4); break;
		case 5: destruct(info5); break;
	}
}

x_ndr_off_t samr_DispInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(info2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(info4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_SCALARS(info5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t samr_DispInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(5, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(info2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(info3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_SCALARS(info4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_SCALARS(info5, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void samr_DispInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(info1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_OSTR(info2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_OSTR(info3, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 4: {
			X_NDR_OSTR(info4, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 5: {
			X_NDR_OSTR(info5, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t samr_PwInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(min_password_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_properties, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_PwInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(min_password_length, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_properties, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_PwInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(min_password_length, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_properties, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 3> x_ndr_traits_t<samr_ConnectVersion>::value_name_map = { {
	{ SAMR_CONNECT_PRE_W2K, "SAMR_CONNECT_PRE_W2K" },
	{ SAMR_CONNECT_W2K, "SAMR_CONNECT_W2K" },
	{ SAMR_CONNECT_AFTER_W2K, "SAMR_CONNECT_AFTER_W2K" },
} };


const std::array<std::pair<uint32, const char *>, 9> x_ndr_traits_t<samPwdChangeReason>::value_name_map = { {
	{ SAM_PWD_CHANGE_NO_ERROR, "SAM_PWD_CHANGE_NO_ERROR" },
	{ SAM_PWD_CHANGE_PASSWORD_TOO_SHORT, "SAM_PWD_CHANGE_PASSWORD_TOO_SHORT" },
	{ SAM_PWD_CHANGE_PWD_IN_HISTORY, "SAM_PWD_CHANGE_PWD_IN_HISTORY" },
	{ SAM_PWD_CHANGE_USERNAME_IN_PASSWORD, "SAM_PWD_CHANGE_USERNAME_IN_PASSWORD" },
	{ SAM_PWD_CHANGE_FULLNAME_IN_PASSWORD, "SAM_PWD_CHANGE_FULLNAME_IN_PASSWORD" },
	{ SAM_PWD_CHANGE_NOT_COMPLEX, "SAM_PWD_CHANGE_NOT_COMPLEX" },
	{ SAM_PWD_CHANGE_MACHINE_NOT_DEFAULT, "SAM_PWD_CHANGE_MACHINE_NOT_DEFAULT" },
	{ SAM_PWD_CHANGE_FAILED_BY_FILTER, "SAM_PWD_CHANGE_FAILED_BY_FILTER" },
	{ SAM_PWD_CHANGE_PASSWORD_TOO_LONG, "SAM_PWD_CHANGE_PASSWORD_TOO_LONG" },
} };



x_ndr_off_t userPwdChangeFailureInformation::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(extendedFailureReason, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(filterModuleName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t userPwdChangeFailureInformation::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(filterModuleName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t userPwdChangeFailureInformation::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(extendedFailureReason, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(filterModuleName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t userPwdChangeFailureInformation::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(filterModuleName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void userPwdChangeFailureInformation::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(extendedFailureReason, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(filterModuleName, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_ConnectInfo1::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(client_version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t samr_ConnectInfo1::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(client_version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(unknown2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void samr_ConnectInfo1::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(client_version, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(unknown2, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_ConnectInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t samr_ConnectInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(info1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void samr_ConnectInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(info1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}

const std::array<std::pair<uint32, const char *>, 6> x_ndr_traits_t<samr_ValidateFieldsPresent>::value_name_map = { {
		{ SAMR_VALIDATE_FIELD_PASSWORD_LAST_SET, "SAMR_VALIDATE_FIELD_PASSWORD_LAST_SET" },
		{ SAMR_VALIDATE_FIELD_BAD_PASSWORD_TIME, "SAMR_VALIDATE_FIELD_BAD_PASSWORD_TIME" },
		{ SAMR_VALIDATE_FIELD_LOCKOUT_TIME, "SAMR_VALIDATE_FIELD_LOCKOUT_TIME" },
		{ SAMR_VALIDATE_FIELD_BAD_PASSWORD_COUNT, "SAMR_VALIDATE_FIELD_BAD_PASSWORD_COUNT" },
		{ SAMR_VALIDATE_FIELD_PASSWORD_HISTORY_LENGTH, "SAMR_VALIDATE_FIELD_PASSWORD_HISTORY_LENGTH" },
		{ SAMR_VALIDATE_FIELD_PASSWORD_HISTORY, "SAMR_VALIDATE_FIELD_PASSWORD_HISTORY" },
} };
const std::array<std::pair<uint16, const char *>, 3> x_ndr_traits_t<samr_ValidatePasswordLevel>::value_name_map = { {
	{ NetValidateAuthentication, "NetValidateAuthentication" },
	{ NetValidatePasswordChange, "NetValidatePasswordChange" },
	{ NetValidatePasswordReset, "NetValidatePasswordReset" },
} };


const std::array<std::pair<uint16, const char *>, 11> x_ndr_traits_t<samr_ValidationStatus>::value_name_map = { {
	{ SAMR_VALIDATION_STATUS_SUCCESS, "SAMR_VALIDATION_STATUS_SUCCESS" },
	{ SAMR_VALIDATION_STATUS_PASSWORD_MUST_CHANGE, "SAMR_VALIDATION_STATUS_PASSWORD_MUST_CHANGE" },
	{ SAMR_VALIDATION_STATUS_ACCOUNT_LOCKED_OUT, "SAMR_VALIDATION_STATUS_ACCOUNT_LOCKED_OUT" },
	{ SAMR_VALIDATION_STATUS_PASSWORD_EXPIRED, "SAMR_VALIDATION_STATUS_PASSWORD_EXPIRED" },
	{ SAMR_VALIDATION_STATUS_BAD_PASSWORD, "SAMR_VALIDATION_STATUS_BAD_PASSWORD" },
	{ SAMR_VALIDATION_STATUS_PWD_HISTORY_CONFLICT, "SAMR_VALIDATION_STATUS_PWD_HISTORY_CONFLICT" },
	{ SAMR_VALIDATION_STATUS_PWD_TOO_SHORT, "SAMR_VALIDATION_STATUS_PWD_TOO_SHORT" },
	{ SAMR_VALIDATION_STATUS_PWD_TOO_LONG, "SAMR_VALIDATION_STATUS_PWD_TOO_LONG" },
	{ SAMR_VALIDATION_STATUS_NOT_COMPLEX_ENOUGH, "SAMR_VALIDATION_STATUS_NOT_COMPLEX_ENOUGH" },
	{ SAMR_VALIDATION_STATUS_PASSWORD_TOO_RECENT, "SAMR_VALIDATION_STATUS_PASSWORD_TOO_RECENT" },
	{ SAMR_VALIDATION_STATUS_PASSWORD_FILTER_ERROR, "SAMR_VALIDATION_STATUS_PASSWORD_FILTER_ERROR" },
} };



x_ndr_off_t samr_ValidationBlob::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_ValidationBlob::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_length, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_ValidationBlob::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_ValidationBlob::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_length = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(data, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_length, x_ndr_I_t());
	return __bpos;
}

void samr_ValidationBlob::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(data, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_ValidatePasswordInfo::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(fields_present, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_pwd_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(pwd_history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordInfo::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	x_ndr_off_t __pos_pwd_history_len = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(pwd_history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_pwd_history_len, x_ndr_I_t());
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordInfo::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(fields_present, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(last_password_change, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_password_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(lockout_time, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(bad_pwd_count, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SAVE_POS(uint32, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_UNIQUE_PTR(pwd_history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordInfo::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	x_ndr_off_t __pos_pwd_history_len = __ndr.load_pos();
	X_NDR_BUFFERS_UNIQUE_SIZE_IS__1(pwd_history, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE, uint32, __pos_pwd_history_len, x_ndr_I_t());
	return __bpos;
}

void samr_ValidatePasswordInfo::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(fields_present, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(last_password_change, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_password_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(lockout_time, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bad_pwd_count, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pwd_history, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_ValidatePasswordRepCtr::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordRepCtr::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_ValidatePasswordRepCtr::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(status, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_ValidatePasswordRepCtr::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_ValidatePasswordRepCtr::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(status, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void samr_ValidatePasswordRep::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: construct(ctr1); break;
		case 2: construct(ctr2); break;
		case 3: construct(ctr3); break;
	}
}

void samr_ValidatePasswordRep::__init(x_ndr_switch_t __level, const samr_ValidatePasswordRep &other)
{
	switch (__level) {
		case 1: construct(ctr1, other.ctr1); break;
		case 2: construct(ctr2, other.ctr2); break;
		case 3: construct(ctr3, other.ctr3); break;
	}
}

void samr_ValidatePasswordRep::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: destruct(ctr1); break;
		case 2: destruct(ctr2); break;
		case 3: destruct(ctr3); break;
	}
}

x_ndr_off_t samr_ValidatePasswordRep::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(8, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(ctr1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(ctr2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(ctr3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordRep::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(8, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(ctr1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(ctr2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(ctr3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void samr_ValidatePasswordRep::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(ctr1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_OSTR(ctr2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_OSTR(ctr3, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t samr_ValidatePasswordReq3::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pwd_must_change_at_next_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(clear_lockout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordReq3::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_ValidatePasswordReq3::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(pwd_must_change_at_next_logon, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(clear_lockout, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_ValidatePasswordReq3::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_ValidatePasswordReq3::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(hash, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(pwd_must_change_at_next_logon, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(clear_lockout, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_ValidatePasswordReq2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_matched, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordReq2::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_ValidatePasswordReq2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_matched, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_ValidatePasswordReq2::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(password, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(account, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_BUFFERS(hash, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_ValidatePasswordReq2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(account, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(hash, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_matched, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t samr_ValidatePasswordReq1::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_matched, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordReq1::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t samr_ValidatePasswordReq1::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(password_matched, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(8, __ndr, __bpos, __epos, __flags);
	return __bpos;
}
x_ndr_off_t samr_ValidatePasswordReq1::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_BUFFERS(info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}

void samr_ValidatePasswordReq1::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(password_matched, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void samr_ValidatePasswordReq::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: construct(req1); break;
		case 2: construct(req2); break;
		case 3: construct(req3); break;
	}
}

void samr_ValidatePasswordReq::__init(x_ndr_switch_t __level, const samr_ValidatePasswordReq &other)
{
	switch (__level) {
		case 1: construct(req1, other.req1); break;
		case 2: construct(req2, other.req2); break;
		case 3: construct(req3, other.req3); break;
	}
}

void samr_ValidatePasswordReq::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case 1: destruct(req1); break;
		case 2: destruct(req2); break;
		case 3: destruct(req3); break;
	}
}

x_ndr_off_t samr_ValidatePasswordReq::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(8, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(req1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(req2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(req3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t samr_ValidatePasswordReq::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(8, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 1: {
			X_NDR_SCALARS(req1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_SCALARS(req2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_SCALARS(req3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void samr_ValidatePasswordReq::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 1: {
			X_NDR_OSTR(req1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 2: {
			X_NDR_OSTR(req2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case 3: {
			X_NDR_OSTR(req3, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t samr_LogonHours::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	return __bpos;
}

x_ndr_off_t samr_LogonHours::ndr_buffers(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_TODO;
	return __bpos;
}

x_ndr_off_t samr_LogonHours::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_TODO;
	return __bpos;
}

x_ndr_off_t samr_LogonHours::ndr_buffers(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_TODO;
	return __bpos;
}

void samr_LogonHours::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	// X_NDR_OSTR_NEXT(units_per_week, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(bits, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


std::ostream &operator<<(std::ostream &os, const samr_RidWithAttribute &rid_with_attr)
{
	char buf[32];
	snprintf(buf, sizeof buf, "0x%x", rid_with_attr.attributes);
	os << rid_with_attr.rid << ", " << buf;
	return os;
}


// }
}
