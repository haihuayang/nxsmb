/* ndr parser auto-generated by pidl */
	
#include "include/librpc/ntlmssp.hxx"
#include "include/librpc/ndr_smb.hxx"

namespace idl {

template <typename T, typename NT>
static x_ndr_off_t ntlmssp_buffers_relative_ptr(NT &&nt, const std::shared_ptr<T> &val, x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32 flags, x_ndr_switch_t level)
{
	x_ndr_off_t pos_len = ndr.load_pos();
	x_ndr_off_t pos_max_len = ndr.load_pos();
	ndr_traits_at_t<ndr_traits_t<uint32>> at_field{ndr_traits_t<uint32>(), ndr.load_pos(), (flags)};
	x_ndr_off_t orig_bpos = bpos;
	bpos = x_ndr_buffers_relative_ptr(std::forward<NT>(nt), val, ndr, bpos, epos, flags, level, at_field);
	if (bpos < 0) {
		return bpos;
	}
	x_ndr_scalars_default(uint16(bpos - orig_bpos), ndr, pos_len, epos, flags, X_NDR_SWITCH_NONE);
	x_ndr_scalars_default(uint16(bpos - orig_bpos), ndr, pos_max_len, epos, flags, X_NDR_SWITCH_NONE);
	return bpos;
}

template <typename T, typename NT>
static x_ndr_off_t ntlmssp_buffers_relative_ptr(NT &&nt, std::shared_ptr<T> &val, x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32 flags, x_ndr_switch_t level)
{
	ndr_traits_at_t<ndr_traits_t<uint16>> at_len{ndr_traits_t<uint16>{}, ndr.load_pos(), flags};
	ndr.load_pos();
	ndr_traits_at_t<ndr_traits_t<uint32>> at_field{ndr_traits_t<uint32>(), ndr.load_pos(), (flags)};
	bpos = x_ndr_buffers_relative_ptr(std::forward<NT>(nt), val, ndr, bpos, epos, flags, level, at_field, at_len);
	return bpos;
}

#define NTLMSSP_SCALARS_RELATIVE_PTR() do { \
	X_NDR_SAVE_POS(uint16, ndr, bpos, epos, flags); \
	X_NDR_SAVE_POS(uint16, ndr, bpos, epos, flags); \
	X_NDR_SAVE_POS(uint32, ndr, bpos, epos, flags); \
} while (0)

#define NTLMSSP_BUFFERS_RELATIVE_PTR(NT, field, flags) \
	X_NDR_VERIFY(bpos, ntlmssp_buffers_relative_ptr((NT){}, (field), ndr, bpos, epos, (flags), level))

template <typename T>
static inline x_ndr_off_t ntlmssp_buffers_relative_ptr_default(const std::shared_ptr<T> &val, x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32 flags, x_ndr_switch_t level)
{
	return ntlmssp_buffers_relative_ptr(ndr_traits_t<T>{}, val, ndr, bpos, epos, flags, level);
}

template <typename T>
static inline x_ndr_off_t ntlmssp_buffers_relative_ptr_default(std::shared_ptr<T> &val, x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32 flags, x_ndr_switch_t level)
{
	return ntlmssp_buffers_relative_ptr(ndr_traits_t<T>{}, val, ndr, bpos, epos, flags, level);
}

#define NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(field, flags) \
	X_NDR_VERIFY(bpos, ntlmssp_buffers_relative_ptr_default((field), ndr, bpos, epos, (flags), level))

struct ndr_traits_ntlmssp_string_t
{
	using ndr_base_type = std::string;
	using has_buffers = std::false_type;
	using ndr_data_type = x_ndr_type_primary;

	x_ndr_off_t scalars(const std::string &val, x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const {
		X_ASSERT(level == X_NDR_SWITCH_NONE);
		return x_ndr_push_gstring(val, ndr, bpos, epos, flags);
	}
	x_ndr_off_t scalars(std::string &val, x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const {
		X_ASSERT(level == X_NDR_SWITCH_NONE);
		return x_ndr_pull_gstring(val, ndr, bpos, epos, flags);
	}
	void ostr(const std::string &val, x_ndr_ostr_t &ndr, uint32_t flags, x_ndr_switch_t level) const {
		X_ASSERT(level == X_NDR_SWITCH_NONE);
		return x_ndr_ostr_gstring(val, ndr, flags);
	}
};

#if 0
x_ndr_off_t ntlmssp_Version::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(2, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NTLMSSP_NEGOTIATE_VERSION: {
			X_NDR_SCALARS(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t ntlmssp_Version::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(2, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case NTLMSSP_NEGOTIATE_VERSION: {
			X_NDR_SCALARS(version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void ntlmssp_Version::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case NTLMSSP_NEGOTIATE_VERSION: {
			X_NDR_OSTR(version, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
}


const std::array<std::pair<uint16, const char *>, 11> x_ndr_traits_t<ntlmssp_AvId>::value_name_map = { {
	{ MsvAvEOL, "MsvAvEOL" },
	{ MsvAvNbComputerName, "MsvAvNbComputerName" },
	{ MsvAvNbDomainName, "MsvAvNbDomainName" },
	{ MsvAvDnsComputerName, "MsvAvDnsComputerName" },
	{ MsvAvDnsDomainName, "MsvAvDnsDomainName" },
	{ MsvAvDnsTreeName, "MsvAvDnsTreeName" },
	{ MsvAvFlags, "MsvAvFlags" },
	{ MsvAvTimestamp, "MsvAvTimestamp" },
	{ MsvAvSingleHost, "MsvAvSingleHost" },
	{ MsvAvTargetName, "MsvAvTargetName" },
	{ MsvChannelBindings, "MsvChannelBindings" },
} };



x_ndr_off_t ntlmssp_SingleHostData::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	x_ndr_off_t __tmp_0;
	X_NDR_SKIP(uint32, __ndr, __bpos, __epos, __flags);
	uint32 Z4{0};
	X_NDR_SCALARS(Z4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(token_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(remaining, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(uint32(__bpos - __base), __ndr, __tmp_0, __epos, __flags, X_NDR_SWITCH_NONE);
	return __bpos;
}


x_ndr_off_t ntlmssp_SingleHostData::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
        uint32 Size;
	X_NDR_SCALARS(Size, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	__epos = X_NDR_CHECK_POS(__base + Size, __bpos, __epos);
	uint32 Z4;
	X_NDR_SCALARS(Z4, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(token_info, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(remaining, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void ntlmssp_SingleHostData::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(token_info, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(remaining, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}


const std::array<std::pair<uint32, const char *>, 3> x_ndr_traits_t<ntlmssp_AvFlags>::value_name_map = { {
		{ NTLMSSP_AVFLAG_CONSTRAINTED_ACCOUNT, "NTLMSSP_AVFLAG_CONSTRAINTED_ACCOUNT" },
		{ NTLMSSP_AVFLAG_MIC_IN_AUTHENTICATE_MESSAGE, "NTLMSSP_AVFLAG_MIC_IN_AUTHENTICATE_MESSAGE" },
		{ NTLMSSP_AVFLAG_TARGET_SPN_FROM_UNTRUSTED_SOURCE, "NTLMSSP_AVFLAG_TARGET_SPN_FROM_UNTRUSTED_SOURCE" },
} };

void ntlmssp_AvValue::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case MsvAvEOL: break;
		case MsvAvNbComputerName: construct(AvNbComputerName); break;
		case MsvAvNbDomainName: construct(AvNbDomainName); break;
		case MsvAvDnsComputerName: construct(AvDnsComputerName); break;
		case MsvAvDnsDomainName: construct(AvDnsDomainName); break;
		case MsvAvDnsTreeName: construct(AvDnsTreeName); break;
		case MsvAvFlags: construct(AvFlags); break;
		case MsvAvTimestamp: construct(AvTimestamp); break;
		case MsvAvSingleHost: construct(AvSingleHost); break;
		case MsvAvTargetName: construct(AvTargetName); break;
		case MsvChannelBindings: construct(ChannelBindings); break;
		default: construct(blob); break;
	}
}

void ntlmssp_AvValue::__init(x_ndr_switch_t __level, const ntlmssp_AvValue &other)
{
	switch (__level) {
		case MsvAvEOL: break;
		case MsvAvNbComputerName: construct(AvNbComputerName, other.AvNbComputerName); break;
		case MsvAvNbDomainName: construct(AvNbDomainName, other.AvNbDomainName); break;
		case MsvAvDnsComputerName: construct(AvDnsComputerName, other.AvDnsComputerName); break;
		case MsvAvDnsDomainName: construct(AvDnsDomainName, other.AvDnsDomainName); break;
		case MsvAvDnsTreeName: construct(AvDnsTreeName, other.AvDnsTreeName); break;
		case MsvAvFlags: construct(AvFlags, other.AvFlags); break;
		case MsvAvTimestamp: construct(AvTimestamp, other.AvTimestamp); break;
		case MsvAvSingleHost: construct(AvSingleHost, other.AvSingleHost); break;
		case MsvAvTargetName: construct(AvTargetName, other.AvTargetName); break;
		case MsvChannelBindings: construct(ChannelBindings, other.ChannelBindings); break;
		default: construct(blob, other.blob); break;
	}
}

void ntlmssp_AvValue::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case MsvAvEOL: break;
		case MsvAvNbComputerName: destruct(AvNbComputerName); break;
		case MsvAvNbDomainName: destruct(AvNbDomainName); break;
		case MsvAvDnsComputerName: destruct(AvDnsComputerName); break;
		case MsvAvDnsDomainName: destruct(AvDnsDomainName); break;
		case MsvAvDnsTreeName: destruct(AvDnsTreeName); break;
		case MsvAvFlags: destruct(AvFlags); break;
		case MsvAvTimestamp: destruct(AvTimestamp); break;
		case MsvAvSingleHost: destruct(AvSingleHost); break;
		case MsvAvTargetName: destruct(AvTargetName); break;
		case MsvChannelBindings: destruct(ChannelBindings); break;
		default: destruct(blob); break;
	}
}

x_ndr_off_t ntlmssp_AvValue::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case MsvAvEOL: {
		} break;
		case MsvAvNbComputerName: {
			X_NDR_SCALARS(AvNbComputerName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvNbDomainName: {
			X_NDR_SCALARS(AvNbDomainName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsComputerName: {
			X_NDR_SCALARS(AvDnsComputerName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsDomainName: {
			X_NDR_SCALARS(AvDnsDomainName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsTreeName: {
			X_NDR_SCALARS(AvDnsTreeName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvFlags: {
			X_NDR_SCALARS(AvFlags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvTimestamp: {
			X_NDR_SCALARS(AvTimestamp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvSingleHost: {
			X_NDR_SCALARS(AvSingleHost, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvTargetName: {
			X_NDR_SCALARS(AvTargetName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvChannelBindings: {
			X_NDR_SCALARS(ChannelBindings, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t ntlmssp_AvValue::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case MsvAvEOL: {
		} break;
		case MsvAvNbComputerName: {
			X_NDR_SCALARS(AvNbComputerName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvNbDomainName: {
			X_NDR_SCALARS(AvNbDomainName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsComputerName: {
			X_NDR_SCALARS(AvDnsComputerName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsDomainName: {
			X_NDR_SCALARS(AvDnsDomainName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsTreeName: {
			X_NDR_SCALARS(AvDnsTreeName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvFlags: {
			X_NDR_SCALARS(AvFlags, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvTimestamp: {
			X_NDR_SCALARS(AvTimestamp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvSingleHost: {
			X_NDR_SCALARS(AvSingleHost, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvTargetName: {
			X_NDR_SCALARS(AvTargetName, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvChannelBindings: {
			X_NDR_SCALARS(ChannelBindings, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(blob, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void ntlmssp_AvValue::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case MsvAvEOL: {
		} break;
		case MsvAvNbComputerName: {
			X_NDR_OSTR(AvNbComputerName, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvNbDomainName: {
			X_NDR_OSTR(AvNbDomainName, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsComputerName: {
			X_NDR_OSTR(AvDnsComputerName, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsDomainName: {
			X_NDR_OSTR(AvDnsDomainName, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvDnsTreeName: {
			X_NDR_OSTR(AvDnsTreeName, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvFlags: {
			X_NDR_OSTR(AvFlags, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvTimestamp: {
			X_NDR_OSTR(AvTimestamp, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvSingleHost: {
			X_NDR_OSTR(AvSingleHost, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvAvTargetName: {
			X_NDR_OSTR(AvTargetName, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		case MsvChannelBindings: {
			X_NDR_OSTR(ChannelBindings, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_OSTR(blob, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}

void AV_PAIR::set_AvId(ntlmssp_AvId v)
{
	Value.__uninit(x_ndr_switch_t(AvId));
	AvId = v;
	Value.__init(x_ndr_switch_t(AvId));
}

AV_PAIR::AV_PAIR()
	: AvId((ntlmssp_AvId)MsvAvEOL)
{
	Value.__init(x_ndr_switch_t(AvId));
}

AV_PAIR::~AV_PAIR()
{
	Value.__uninit(AvId);
}

AV_PAIR::AV_PAIR(const AV_PAIR &other)
	: AvId(other.AvId)
{
	Value.__init(x_ndr_switch_t(AvId), other.Value);
}

AV_PAIR &AV_PAIR::operator=(const AV_PAIR &other)
{
	Value.__uninit(x_ndr_switch_t(AvId));
	AvId = other.AvId;
	Value.__init(x_ndr_switch_t(AvId), other.Value);
	return *this;
}

x_ndr_off_t AV_PAIR::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_FLAG_NOALIGN);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(AvId, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_AvLen = __bpos;
	X_NDR_SKIP(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_SIZE(Value, __ndr, __bpos, __epos, __flags, AvId, uint16, __pos_AvLen);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t AV_PAIR::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_FLAG_NOALIGN);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SWITCH(ntlmssp_AvId, AvId, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	x_ndr_off_t __pos_AvLen = __bpos;
	X_NDR_SKIP(uint16, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS_SIZE(Value, __ndr, __bpos, __epos, __flags, AvId, uint16, __pos_AvLen);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void AV_PAIR::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_FLAG_NOALIGN);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(AvId, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(Value, __ndr, __flags, AvId);
	(__ndr) << leave;
}



x_ndr_off_t AV_PAIR_LIST::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_FLAG_NOALIGN);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	X_NDR_SCALARS(pair, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t AV_PAIR_LIST::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_FLAG_NOALIGN);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	while (__bpos < __epos) {
		pair.resize(pair.size() + 1);
		X_NDR_SCALARS(pair.back(), __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	}
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void AV_PAIR_LIST::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_FLAG_NOALIGN);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(pair, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}




x_ndr_off_t LM_RESPONSE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(Response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t LM_RESPONSE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(Response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void LM_RESPONSE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Response, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t LMv2_RESPONSE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(Response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ChallengeFromClient, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t LMv2_RESPONSE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(Response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ChallengeFromClient, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void LMv2_RESPONSE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Response, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ChallengeFromClient, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t ntlmssp_LM_RESPONSE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(1, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 24: {
			X_NDR_SCALARS(v1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

x_ndr_off_t ntlmssp_LM_RESPONSE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(1, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 24: {
			X_NDR_SCALARS(v1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
	return __bpos;
}

void ntlmssp_LM_RESPONSE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 24: {
			X_NDR_OSTR(v1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
		} break;
	}
}


x_ndr_off_t NTLM_RESPONSE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(Response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t NTLM_RESPONSE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(Response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void NTLM_RESPONSE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Response, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t NTLMv2_CLIENT_CHALLENGE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint8 RespType{1};
	X_NDR_SCALARS(RespType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint8 HiRespType{1};
	X_NDR_SCALARS(HiRespType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Reserved1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Reserved2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(TimeStamp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ChallengeFromClient, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Reserved3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(AvPairs, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t NTLMv2_CLIENT_CHALLENGE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint8 RespType;
	X_NDR_SCALARS(RespType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	uint8 HiRespType;
	X_NDR_SCALARS(HiRespType, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Reserved1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Reserved2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(TimeStamp, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(ChallengeFromClient, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Reserved3, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(AvPairs, __ndr, __bpos, __epos, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void NTLMv2_CLIENT_CHALLENGE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(TimeStamp, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(ChallengeFromClient, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(AvPairs, __ndr, x_ndr_set_flags(__flags, LIBNDR_FLAG_REMAINING), X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t NTLMv2_RESPONSE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(Response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Challenge, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

x_ndr_off_t NTLMv2_RESPONSE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(Response, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Challenge, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void NTLMv2_RESPONSE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Response, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(Challenge, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



void ntlmssp_NTLM_RESPONSE::__init(x_ndr_switch_t __level)
{
	switch (__level) {
		case 0x18: construct(v1); break;
		default: construct(v2); break;
	}
}

void ntlmssp_NTLM_RESPONSE::__init(x_ndr_switch_t __level, const ntlmssp_NTLM_RESPONSE &other)
{
	switch (__level) {
		case 0x18: construct(v1, other.v1); break;
		default: construct(v2, other.v2); break;
	}
}

void ntlmssp_NTLM_RESPONSE::__uninit(x_ndr_switch_t __level)
{
	switch (__level) {
		case 0x18: destruct(v1); break;
		default: destruct(v2); break;
	}
}

x_ndr_off_t ntlmssp_NTLM_RESPONSE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 0x18: {
			X_NDR_SCALARS(v1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(v2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

x_ndr_off_t ntlmssp_NTLM_RESPONSE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_UNION_ALIGN(4, __ndr, __bpos, __epos, __flags);
	switch (__level) {
		case 0x18: {
			X_NDR_SCALARS(v1, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_SCALARS(v2, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
	return __bpos;
}

void ntlmssp_NTLM_RESPONSE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	switch (__level) {
		case 0x18: {
			X_NDR_OSTR(v1, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
		default: {
			X_NDR_OSTR(v2, __ndr, __flags, X_NDR_SWITCH_NONE);
		} break;
	}
}


x_ndr_off_t ntlmssp_MIC::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(MIC, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t ntlmssp_MIC::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	X_NDR_SCALARS(MIC, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(1, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void ntlmssp_MIC::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(MIC, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}




x_ndr_off_t NTLMSSP_MESSAGE_SIGNATURE::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 Version{NTLMSSP_SIGN_VERSION};
	X_NDR_SCALARS(Version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(RandomPad, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Checksum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SeqNum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t NTLMSSP_MESSAGE_SIGNATURE::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 Version;
	X_NDR_SCALARS(Version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(RandomPad, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Checksum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SeqNum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void NTLMSSP_MESSAGE_SIGNATURE::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(RandomPad, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(Checksum, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SeqNum, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



x_ndr_off_t NTLMSSP_MESSAGE_SIGNATURE_NTLMv2::ndr_scalars(x_ndr_push_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 Version{NTLMSSP_SIGN_VERSION};
	X_NDR_SCALARS(Version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Checksum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SeqNum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}


x_ndr_off_t NTLMSSP_MESSAGE_SIGNATURE_NTLMv2::ndr_scalars(x_ndr_pull_t &__ndr, x_ndr_off_t __bpos, x_ndr_off_t __epos, uint32_t __flags, x_ndr_switch_t __level)
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	x_ndr_off_t __base = __bpos; (void)__base;
	uint32 Version;
	X_NDR_SCALARS(Version, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(Checksum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS(SeqNum, __ndr, __bpos, __epos, __flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(4, __ndr, __bpos, __epos, __flags);
	return __bpos;
}

void NTLMSSP_MESSAGE_SIGNATURE_NTLMv2::ostr(x_ndr_ostr_t &__ndr, uint32_t __flags, x_ndr_switch_t __level) const
{
	__flags = x_ndr_set_flags(__flags, LIBNDR_PRINT_ARRAY_HEX);
	(__ndr) << enter;
	X_NDR_OSTR_NEXT(Checksum, __ndr, __flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_NEXT(SeqNum, __ndr, __flags, X_NDR_SWITCH_NONE);
	(__ndr) << leave;
}



#endif

x_ndr_off_t ndr_traits_t<NEGOTIATE_MESSAGE>::scalars(const NEGOTIATE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature{"NTLMSSP"};
	X_NDR_SCALARS_DEFAULT(Signature, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	ntlmssp_MessageType MessageType{NtLmNegotiate};
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<NEGOTIATE_MESSAGE>::buffers(const NEGOTIATE_MESSAGE &val,
		x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.DomainName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(NTLMSSP_NEGOTIATE_OEM)));
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.Workstation, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(NTLMSSP_NEGOTIATE_OEM)));
	return bpos;
}

x_ndr_off_t ndr_traits_t<NEGOTIATE_MESSAGE>::scalars(NEGOTIATE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature;
	X_NDR_SCALARS_DEFAULT(Signature, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	ntlmssp_MessageType MessageType;
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<NEGOTIATE_MESSAGE>::buffers(NEGOTIATE_MESSAGE &val,
		x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.DomainName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(NTLMSSP_NEGOTIATE_OEM)));
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.Workstation, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(NTLMSSP_NEGOTIATE_OEM)));
	return bpos;
}

void ndr_traits_t<NEGOTIATE_MESSAGE>::ostr(const NEGOTIATE_MESSAGE &val,
		x_ndr_ostr_t &ndr, uint32_t flags, x_ndr_switch_t level) const
{
	ndr << enter;
	X_NDR_OSTR_FIELD_DEFAULT(NegotiateFlags, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR(ndr_traits_ntlmssp_string_t, DomainName, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR(ndr_traits_ntlmssp_string_t, Workstation, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(Version, val, ndr, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	ndr << leave;
}


x_ndr_off_t ndr_traits_t<CHALLENGE_MESSAGE>::scalars(const CHALLENGE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature{"NTLMSSP"};
	X_NDR_SCALARS_DEFAULT(Signature, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	ntlmssp_MessageType MessageType{NtLmChallenge};
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.ServerChallenge, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.Reserved, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<CHALLENGE_MESSAGE>::buffers(const CHALLENGE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.TargetName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.TargetInfo, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<CHALLENGE_MESSAGE>::scalars(CHALLENGE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature;
	X_NDR_SCALARS_DEFAULT(Signature, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	ntlmssp_MessageType MessageType;
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.ServerChallenge, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.Reserved, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<CHALLENGE_MESSAGE>::buffers(CHALLENGE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.TargetName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.TargetInfo, flags);
	return bpos;
}

void ndr_traits_t<CHALLENGE_MESSAGE>::ostr(const CHALLENGE_MESSAGE &val,
		x_ndr_ostr_t &ndr, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	ndr << enter;
	X_NDR_OSTR_FIELD_PTR(ndr_traits_ntlmssp_string_t, TargetName, val, ndr, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(NegotiateFlags, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(ServerChallenge, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR_DEFAULT(TargetInfo, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(Version, val, ndr, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	ndr << leave;
}


x_ndr_off_t ndr_traits_t<AUTHENTICATE_MESSAGE>::scalars(const AUTHENTICATE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_FLAG_REMAINING);
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature{"NTLMSSP"};
	X_NDR_SCALARS_DEFAULT(Signature, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	ntlmssp_MessageType MessageType{NtLmAuthenticate};
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_SCALARS_DEFAULT(val.mic, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<AUTHENTICATE_MESSAGE>::buffers(const AUTHENTICATE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_FLAG_REMAINING);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.LmChallengeResponse, flags);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.NtChallengeResponse, flags);
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.DomainName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.UserName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.Workstation, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.EncryptedRandomSessionKey, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<AUTHENTICATE_MESSAGE>::scalars(AUTHENTICATE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_FLAG_REMAINING);
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	x_ndr_off_t base = bpos; (void)base;
	std::array<uint8, 8> Signature;
	X_NDR_SCALARS_DEFAULT(Signature, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	ntlmssp_MessageType MessageType;
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_SCALARS_DEFAULT(val.mic, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<AUTHENTICATE_MESSAGE>::buffers(AUTHENTICATE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.LmChallengeResponse, flags);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.NtChallengeResponse, flags);
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.DomainName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.UserName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.Workstation, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.EncryptedRandomSessionKey, flags);
	return bpos;
}

void ndr_traits_t<AUTHENTICATE_MESSAGE>::ostr(const AUTHENTICATE_MESSAGE &val,
		x_ndr_ostr_t &ndr, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_FLAG_REMAINING);
	(ndr) << enter;
	X_NDR_OSTR_FIELD_PTR_DEFAULT(LmChallengeResponse, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR_DEFAULT(NtChallengeResponse, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR(ndr_traits_ntlmssp_string_t, DomainName, val, ndr, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR(ndr_traits_ntlmssp_string_t, UserName, val, ndr, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR(ndr_traits_ntlmssp_string_t, Workstation, val, ndr, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR_DEFAULT(EncryptedRandomSessionKey, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(NegotiateFlags, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(Version, val, ndr, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_OSTR_FIELD_DEFAULT(mic, val, ndr, flags, X_NDR_SWITCH_NONE);
	(ndr) << leave;
}


}
