/* ndr parser auto-generated by pidl */
	
#include "include/librpc/ntlmssp.hxx"
#include "include/librpc/ndr_smb.hxx"

namespace idl {

#define NTLMSSP_OSTR_FIELD_PTR(ndr_traits, name, val, ndr, flags, level) do { \
	(ndr) << #name << ": "; \
	if (!(val).name) { \
		(ndr) << "NULL"; \
	} else { \
		X_NDR_


#define X_NDR_OSTR_FIELD_PTR(NT, name, val, ndr, flags, level) do { \
	(ndr) << #name << ": "; \
	if ((val).name) { \
		x_ndr_ostr((NT){}, *(val).name, (ndr), (flags), (level)); \
	} else { \
		ndr << "NULL"; \
	} \
	(ndr) << next; \
} while (0)

#define X_NDR_OSTR_FIELD_PTR_DEFAULT(name, val, ndr, flags, level) do { \
	(ndr) << #name << ": "; \
	if ((val).name) { \
		x_ndr_ostr_default(*(val).name, (ndr), (flags), (level)); \
	} else { \
		ndr << "NULL"; \
	} \
	(ndr) << next; \
} while (0)



template <typename T, typename NT>
static x_ndr_off_t ntlmssp_buffers_relative_ptr(NT &&nt, const std::shared_ptr<T> &val, x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32 flags, x_ndr_switch_t level)
{
	x_ndr_off_t pos_len = ndr.load_pos();
	x_ndr_off_t pos_max_len = ndr.load_pos();
	x_ndr_off_t pos_offset = ndr.load_pos();
	if (val) {
		X_NDR_DO_ALIGN(ndr, bpos, epos, flags);
		x_ndr_off_t orig_bpos = bpos;
		X_NDR_SCALARS_DEFAULT(uint32(bpos - ndr.base), ndr, pos_offset, epos, flags, X_NDR_SWITCH_NONE);
		bpos = x_ndr_both(nt, *val, ndr, bpos, epos, flags, level);

		X_NDR_SCALARS_DEFAULT(uint16(bpos - orig_bpos), ndr, pos_len, epos, flags, X_NDR_SWITCH_NONE);
		X_NDR_SCALARS_DEFAULT(uint16(bpos - orig_bpos), ndr, pos_max_len, epos, flags, X_NDR_SWITCH_NONE);
	}
	return bpos;
}

template <typename T, typename NT>
static x_ndr_off_t ntlmssp_buffers_relative_ptr(NT &&nt, std::shared_ptr<T> &val, x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32 flags, x_ndr_switch_t level)
{
	x_ndr_off_t pos_len = ndr.load_pos();
	ndr.load_pos();
	x_ndr_off_t pos_offset = ndr.load_pos();
	uint16 len;
	X_NDR_SCALARS_DEFAULT(len, ndr, pos_len, epos, flags, X_NDR_SWITCH_NONE);
	uint32 offset;
	X_NDR_SCALARS_DEFAULT(offset, ndr, pos_offset, epos, flags, X_NDR_SWITCH_NONE);
	if (len > 0 && offset > 0) {
		X_NDR_CHECK_ALIGN(ndr, flags, offset);
		x_ndr_allocate_ptr(val, level);
		x_ndr_off_t tmp_bpos = X_NDR_CHECK_POS(ndr.base + offset, 0, epos);
		x_ndr_off_t tmp_epos = X_NDR_CHECK_POS(tmp_bpos + len, 0, epos);
		tmp_bpos = x_ndr_both(nt, *val, ndr, tmp_bpos, tmp_epos, flags, level);
		if (tmp_bpos < 0) {
			return tmp_bpos;
		}

		bpos = tmp_epos;
	}
	return bpos;
}

#define NTLMSSP_SCALARS_RELATIVE_PTR() do { \
	X_NDR_SAVE_POS(uint16, ndr, bpos, epos, flags); \
	X_NDR_SAVE_POS(uint16, ndr, bpos, epos, flags); \
	X_NDR_SAVE_POS(uint32, ndr, bpos, epos, flags); \
} while (0)

#define NTLMSSP_BUFFERS_RELATIVE_PTR(NT, field, flags) \
	X_NDR_VERIFY(bpos, ntlmssp_buffers_relative_ptr((NT){}, (field), ndr, bpos, epos, (flags), level))

template <typename T>
static inline x_ndr_off_t ntlmssp_buffers_relative_ptr_default(const std::shared_ptr<T> &val, x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32 flags, x_ndr_switch_t level)
{
	return ntlmssp_buffers_relative_ptr(ndr_traits_t<T>{}, val, ndr, bpos, epos, flags, level);
}

template <typename T>
static inline x_ndr_off_t ntlmssp_buffers_relative_ptr_default(std::shared_ptr<T> &val, x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32 flags, x_ndr_switch_t level)
{
	return ntlmssp_buffers_relative_ptr(ndr_traits_t<T>{}, val, ndr, bpos, epos, flags, level);
}

#define NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(field, flags) \
	X_NDR_VERIFY(bpos, ntlmssp_buffers_relative_ptr_default((field), ndr, bpos, epos, (flags), level))

#if 0
struct ndr_traits_ntlmssp_string_t
{
	using ndr_base_type = std::string;
	using has_buffers = std::false_type;
	using ndr_data_type = x_ndr_type_primary;

	x_ndr_off_t scalars(const std::string &val, x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const {
		X_ASSERT(level == X_NDR_SWITCH_NONE);
		return x_ndr_push_gstring(val, ndr, bpos, epos, flags);
	}
	x_ndr_off_t scalars(std::string &val, x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const {
		X_ASSERT(level == X_NDR_SWITCH_NONE);
		return x_ndr_pull_gstring(val, ndr, bpos, epos, flags);
	}
	void ostr(const std::string &val, x_ndr_ostr_t &ndr, uint32_t flags, x_ndr_switch_t level) const {
		X_ASSERT(level == X_NDR_SWITCH_NONE);
		return x_ndr_ostr_gstring(val, ndr, flags);
	}
};

x_ndr_off_t ndr_traits_t<NEGOTIATE_MESSAGE>::scalars(const NEGOTIATE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature{"NTLMSSP"};
	X_NDR_SCALARS_BYTE_ARRAY(Signature, ndr, bpos, epos);
	ntlmssp_MessageType MessageType{NtLmNegotiate};
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<NEGOTIATE_MESSAGE>::buffers(const NEGOTIATE_MESSAGE &val,
		x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.DomainName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(NTLMSSP_NEGOTIATE_OEM)));
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.Workstation, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(NTLMSSP_NEGOTIATE_OEM)));
	return bpos;
}

x_ndr_off_t ndr_traits_t<NEGOTIATE_MESSAGE>::scalars(NEGOTIATE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature;
	X_NDR_SCALARS_BYTE_ARRAY(Signature, ndr, bpos, epos);
	ntlmssp_MessageType MessageType;
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<NEGOTIATE_MESSAGE>::buffers(NEGOTIATE_MESSAGE &val,
		x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.DomainName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(NTLMSSP_NEGOTIATE_OEM)));
	NTLMSSP_BUFFERS_RELATIVE_PTR(ndr_traits_ntlmssp_string_t, val.Workstation, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(NTLMSSP_NEGOTIATE_OEM)));
	return bpos;
}

void ndr_traits_t<NEGOTIATE_MESSAGE>::ostr(const NEGOTIATE_MESSAGE &val,
		x_ndr_ostr_t &ndr, uint32_t flags, x_ndr_switch_t level) const
{
	ndr << enter;
	X_NDR_OSTR_FIELD_DEFAULT(NegotiateFlags, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR(ndr_traits_ntlmssp_string_t, DomainName, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR(ndr_traits_ntlmssp_string_t, Workstation, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(Version, val, ndr, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	ndr << leave;
}
#endif

x_ndr_off_t ndr_traits_t<CHALLENGE_MESSAGE>::scalars(const CHALLENGE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature{"NTLMSSP"};
	X_NDR_SCALARS_BYTE_ARRAY(Signature, ndr, bpos, epos);
	ntlmssp_MessageType MessageType{NtLmChallenge};
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_BYTE_ARRAY(val.ServerChallenge, ndr, bpos, epos);
	X_NDR_SCALARS_BYTE_ARRAY(val.Reserved, ndr, bpos, epos);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<CHALLENGE_MESSAGE>::buffers(const CHALLENGE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.TargetName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.TargetInfo, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<CHALLENGE_MESSAGE>::scalars(CHALLENGE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature;
	X_NDR_SCALARS_BYTE_ARRAY(Signature, ndr, bpos, epos);
	ntlmssp_MessageType MessageType;
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_BYTE_ARRAY(val.ServerChallenge, ndr, bpos, epos);
	X_NDR_SCALARS_BYTE_ARRAY(val.Reserved, ndr, bpos, epos);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<CHALLENGE_MESSAGE>::buffers(CHALLENGE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.TargetName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.TargetInfo, flags);
	return bpos;
}

void ndr_traits_t<CHALLENGE_MESSAGE>::ostr(const CHALLENGE_MESSAGE &val,
		x_ndr_ostr_t &ndr, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_PRINT_ARRAY_HEX);
	ndr << enter;
	X_NDR_OSTR_FIELD_PTR_DEFAULT(TargetName, val, ndr, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(NegotiateFlags, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD(ServerChallenge, x_ndr_ostr_byte_array(val.ServerChallenge, ndr));
	X_NDR_OSTR_FIELD_PTR_DEFAULT(TargetInfo, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(Version, val, ndr, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	ndr << leave;
}


x_ndr_off_t ndr_traits_t<AUTHENTICATE_MESSAGE>::scalars(const AUTHENTICATE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_FLAG_REMAINING);
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	std::array<uint8, 8> Signature{"NTLMSSP"};
	X_NDR_SCALARS_BYTE_ARRAY(Signature, ndr, bpos, epos);
	ntlmssp_MessageType MessageType{NtLmAuthenticate};
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_SCALARS_DEFAULT(val.mic, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<AUTHENTICATE_MESSAGE>::buffers(const AUTHENTICATE_MESSAGE &val,
	x_ndr_push_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_FLAG_REMAINING);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.LmChallengeResponse, flags);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.NtChallengeResponse, flags);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.DomainName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.UserName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.Workstation, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.EncryptedRandomSessionKey, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<AUTHENTICATE_MESSAGE>::scalars(AUTHENTICATE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_FLAG_REMAINING);
	X_NDR_HEADER_ALIGN(5, ndr, bpos, epos, flags);
	x_ndr_off_t base = bpos; (void)base;
	std::array<uint8, 8> Signature;
	X_NDR_SCALARS_BYTE_ARRAY(Signature, ndr, bpos, epos);
	ntlmssp_MessageType MessageType;
	X_NDR_SCALARS_DEFAULT(MessageType, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	NTLMSSP_SCALARS_RELATIVE_PTR();
	X_NDR_SCALARS_DEFAULT(val.NegotiateFlags, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_SCALARS_DEFAULT(val.Version, ndr, bpos, epos, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_SCALARS_DEFAULT(val.mic, ndr, bpos, epos, flags, X_NDR_SWITCH_NONE);
	X_NDR_TRAILER_ALIGN(5, ndr, bpos, epos, flags);
	return bpos;
}

x_ndr_off_t ndr_traits_t<AUTHENTICATE_MESSAGE>::buffers(AUTHENTICATE_MESSAGE &val,
	x_ndr_pull_t &ndr, x_ndr_off_t bpos, x_ndr_off_t epos, uint32_t flags, x_ndr_switch_t level) const
{
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.LmChallengeResponse, flags);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.NtChallengeResponse, flags);
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.DomainName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.UserName, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.Workstation, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)));
	NTLMSSP_BUFFERS_RELATIVE_PTR_DEFAULT(val.EncryptedRandomSessionKey, flags);
	return bpos;
}

void ndr_traits_t<AUTHENTICATE_MESSAGE>::ostr(const AUTHENTICATE_MESSAGE &val,
		x_ndr_ostr_t &ndr, uint32_t flags, x_ndr_switch_t level) const
{
	flags = x_ndr_set_flags(flags, LIBNDR_FLAG_REMAINING);
	(ndr) << enter;
	X_NDR_OSTR_FIELD_PTR_DEFAULT(LmChallengeResponse, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR_DEFAULT(NtChallengeResponse, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR_DEFAULT(DomainName, val, ndr, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR_DEFAULT(UserName, val, ndr, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR_DEFAULT(Workstation, val, ndr, x_ndr_set_flags(flags, ndr_ntlmssp_negotiated_string_flags(val.NegotiateFlags)), X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_PTR_DEFAULT(EncryptedRandomSessionKey, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(NegotiateFlags, val, ndr, flags, X_NDR_SWITCH_NONE);
	X_NDR_OSTR_FIELD_DEFAULT(Version, val, ndr, flags, val.NegotiateFlags&NTLMSSP_NEGOTIATE_VERSION);
	X_NDR_OSTR_FIELD_DEFAULT(mic, val, ndr, flags, X_NDR_SWITCH_NONE);
	(ndr) << leave;
}


}
