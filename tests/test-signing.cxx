
#include <openssl/evp.h>
#include <string.h>
#include <assert.h>

#define X_ASSERT assert

static inline int aes_ccm_signing_decrypt(const EVP_CIPHER *evp_cipher,
		const void *key,
		const void *signature,
		const void *aad, int aad_len,
		const void *cdata, int cdata_len,
		void *pdata)
{
	EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
	X_ASSERT(ctx);

	int rc, out_len;
	int pdata_len = -1;

	rc = EVP_DecryptInit_ex(ctx, evp_cipher, NULL, NULL, NULL);
	X_ASSERT(rc == 1);

	rc = EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_IVLEN, 11, NULL);
	X_ASSERT(rc == 1);

	rc = EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_TAG, 16, (void *)signature);
	X_ASSERT(rc == 1);

	rc = EVP_DecryptInit_ex(ctx, NULL, NULL, (const uint8_t *)key, (uint8_t *)aad);
	X_ASSERT(rc == 1);

	rc = EVP_DecryptUpdate(ctx, nullptr, &out_len,
			nullptr, cdata_len);
	X_ASSERT(rc == 1);

	rc = EVP_DecryptUpdate(ctx, nullptr, &out_len,
			(const uint8_t *)aad, aad_len);
	X_ASSERT(rc == 1);

	rc = EVP_DecryptUpdate(ctx, (uint8_t *)pdata, &out_len,
			(const uint8_t *)cdata, cdata_len);
	X_ASSERT(rc == 1);

	pdata_len = out_len;

	rc = EVP_DecryptFinal_ex(ctx, (uint8_t *)pdata + pdata_len, &out_len);

	EVP_CIPHER_CTX_free(ctx);
	if (!rc) {
		return -1;
	}

	return pdata_len + out_len;
}

static void test_aes_ccm_128_decrypt()
{
	const uint8_t key[] = {
		0x14, 0x8f, 0xc1, 0x08, 0x7c, 0x1e, 0x96, 0xd3,
		0x7a, 0xc8, 0xb0, 0x46, 0xd8, 0xe8, 0x00, 0xac,
	};
	const uint8_t signature[] = {
		0x1b, 0xef, 0x48, 0x72, 0x6f, 0xd8, 0xfe, 0x85,
		0xdc, 0x69, 0xfe, 0x3e, 0xd4, 0xdf, 0x8d, 0xf8,
	};
	const uint8_t aad[] = {
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x83, 0xe9, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	};
	const uint8_t cdata[] = {
		0x2a, 0x8d, 0xcf, 0xa2, 0x54, 0x61, 0xb0, 0x1b,
		0x4d, 0x4a, 0x52, 0x8d, 0x8a, 0x3a, 0xc2, 0x29,
		0x5a, 0x4f, 0xdf, 0xfe, 0x70, 0xbe, 0xda, 0x1b,
		0xde, 0x96, 0x41, 0x07, 0xf1, 0x3f, 0x19, 0x94,
		0x57, 0xa4, 0x8d, 0xf1, 0x9b, 0x04, 0x6d, 0x65,
		0x35, 0xdc, 0xbd, 0xfd, 0xbc, 0x96, 0x8c, 0x41,
		0xf8, 0xca, 0xcd, 0x7a, 0x83, 0x08, 0xad, 0xdc,
		0x4b, 0x65, 0xe9, 0xba, 0xb2, 0x82, 0x88, 0xda,
		0x50, 0xb6, 0xd4, 0xcc, 0x70, 0x4f, 0xcd, 0xdb,
		0x63, 0x39, 0x0a, 0xe6, 0x8d, 0x7b, 0x48, 0x99,
		0xe5, 0xc1, 0x7f, 0x88, 0xd4, 0xdb, 0xd0, 0x07,
		0x70, 0xe0, 0xfe, 0x60, 0x2e, 0x43, 0x68, 0xcd,
		0x57, 0x28, 0xe6, 0x27, 0x43, 0xa5, 0x41, 0xe3,
		0xdc, 0x15, 0x35, 0x27, 0x52, 0x8f, 0x71, 0xa7,
		0xed, 0xfb, 0x7a, 0xe7, 0x0c, 0xbb, 0xeb, 0xf4,
		0x36, 0x41, 0xc0, 0xa4, 0xe1, 0x46, 0x34, 0x19,
		0x87, 0xb1, 0xc6, 0xf8, 0x20, 0x0c, 0x24, 0xd4,
		0x2d, 0x45, 0x67, 0x03, 0x85, 0x39, 0xcd, 0x9b,
		0xb9, 0xf3, 0x6e, 0x92, 0xb1, 0x47, 0x7c, 0xa2,
		0x66, 0xf9, 0x94, 0x0c, 0x72, 0xe1, 0x11, 0xc5,
		0xfa, 0x07, 0xd2, 0x52, 0xd6, 0xcd, 0xe0, 0x4f,
		0xc4, 0xf1, 0x2d, 0x25, 0x56, 0xdf, 0xb9, 0xcf,
		0xbb, 0x8c, 0xbc, 0xa5, 0xf1, 0xde, 0xf4, 0xba,
		0x99, 0xc8, 0x15, 0x8d, 0xa7, 0x6a, 0x54, 0x0a,
		0x1f, 0x04, 0x02, 0x4e, 0xb0, 0xa0, 0x9c, 0x6e,
		0xd8, 0xa7, 0x8a, 0x53, 0x5e, 0x02, 0xbe, 0xfb,
		0x00, 0x67, 0xbe, 0x53, 0x44, 0xa7, 0x8d, 0xa4,
	};
	const uint8_t pdata[] = {
		0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x40, 0x10, 0x00, 0x00, 0x78, 0x00, 0x60, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00,
		0x5f, 0x00, 0x73, 0x00, 0x65, 0x00, 0x73, 0x00,
		0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
		0x5f, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00,
		0x72, 0x00, 0x79, 0x00, 0x70, 0x00, 0x74, 0x00,
		0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x5f, 0x00,
		0x61, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5f, 0x00,
		0x31, 0x00, 0x32, 0x00, 0x38, 0x00, 0x5f, 0x00,
		0x63, 0x00, 0x63, 0x00, 0x6d, 0x00, 0x5f, 0x00,
		0x61, 0x00, 0x55, 0x00, 0x2d, 0x00, 0x74, 0x00,
		0x5a, 0x00, 0x74, 0x00, 0x43, 0x00, 0x59, 0x00,
		0x2e, 0x00, 0x64, 0x00, 0x61, 0x00, 0x74, 0x00,
	};

	uint8_t dec_data[sizeof cdata + 32];
	int ret = aes_ccm_signing_decrypt(EVP_aes_128_ccm(),
			key, signature,
			aad, sizeof aad,
			cdata, sizeof cdata,
			dec_data);
	X_ASSERT(ret == sizeof pdata);
	X_ASSERT(memcmp(pdata, dec_data, sizeof pdata) == 0);
}

int main()
{
	test_aes_ccm_128_decrypt();
	return 0;
}
#if 0
static constexpr x_array_const_t<char> SMB3_10_decryption_label{"SMBC2SCipherKey"};

int main()
{
	const uint8_t KI[] = {
		0x46, 0xe7, 0x76, 0x38, 0x92, 0x6b, 0xff, 0x14,
		0x59, 0x92, 0xd8, 0x55, 0x48, 0xd6, 0x70, 0x83,
	};

	const uint8_t context_data[] = {
		0xcc, 0xec, 0x10, 0xaa, 0x11, 0x9d, 0xa8, 0x43,
		0x34, 0xe5, 0x3d, 0x0f, 0xbc, 0x39, 0x2d, 0x04,
		0x86, 0xa5, 0x8e, 0xb9, 0x6d, 0x44, 0x64, 0xa8,
		0xb1, 0x35, 0x7e, 0x32, 0x52, 0xfe, 0xc6, 0x99,
		0xc3, 0x5a, 0x45, 0x42, 0x49, 0xb3, 0x06, 0xa1,
		0xf1, 0xaf, 0x63, 0xeb, 0x61, 0x7b, 0xc8, 0xb9,
		0xc8, 0x0b, 0x59, 0x43, 0xe5, 0x58, 0xbb, 0x89,
		0xd7, 0xc9, 0x4e, 0x19, 0xcc, 0x3f, 0xa2, 0x70,
	};

	x_array_const_t<char> context{(const char *)context_data, sizeof context_data};

	uint8_t KO[32];

	x_smb2_key_derivation(KI, sizeof KI, SMB3_10_decryption_label,
			context, KO, sizeof KO);
}
#endif
