
#include <assert.h>
#include <cstring>
#include "include/librpc/srvsvc.hxx"
#include "common.h"

static const uint8_t srvsvc_NetShareEnumAll_requ[] = {
	0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
	0x68, 0x00, 0x68, 0x00, 0x6e, 0x00, 0x78, 0x00, 
	0x73, 0x00, 0x6d, 0x00, 0x62, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static const uint8_t srvsvc_NetDiskEnum_requ[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x00,
};

template <class T>
void verify_requ(const uint8_t *data, size_t size, bool verify)
{
	T val;
	idl::x_ndr_off_t ret = idl::x_ndr_requ_pull(val, data, size, 0);
	assert(ret > 0);
	//idl::x_ndr_output(val, std::cout, 8, 3);

	assert((size_t)ret == size);

	std::vector<uint8_t> out;
	ret = idl::x_ndr_requ_push(val, out, 0);

	if (verify) {
		assert(ret > 0);
		assert((size_t)ret == size);
		assert(memcmp(out.data(), data, size) == 0);
	}
}

static void test_ndr()
{
	verify_requ<idl::srvsvc_NetShareEnumAll>(srvsvc_NetShareEnumAll_requ,
			sizeof srvsvc_NetShareEnumAll_requ, true);
	verify_requ<idl::srvsvc_NetDiskEnum>(srvsvc_NetDiskEnum_requ,
			sizeof srvsvc_NetDiskEnum_requ, true);
}

int main(int argc, char  **argv)
{
	test_ndr();
	return 0;
}

